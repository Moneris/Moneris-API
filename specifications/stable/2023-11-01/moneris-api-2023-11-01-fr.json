{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.1",
    "title": "API de Moneris",
    "description": "Plateforme des API de Moneris\n\n[<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height:32px;\">](https://god.gw.postman.com/run-collection/25575461-ab82f3e6-bc3e-471e-bbf5-3875f1616ef9?action=collection%2Ffork&collection-url=entityId%3D25575461-ab82f3e6-bc3e-471e-bbf5-3875f1616ef9%26entityType%3Dcollection%26workspaceId%3D5d2a9a0f-57a7-441c-b2af-fe6315e80a08)\n",
    "termsOfService": "https://www.moneris.com/fr-ca/juridiques/conditions-utilisation",
    "contact": {
      "url": "https://api-developer.moneris.com",
      "email": "UnifiedAPI@moneris.com"
    },
    "license": {
      "name": "Moneris",
      "url": "https://developer.moneris.com/Agreements/Terms%20of%20Use"
    },
    "x-audience": "external-public"
  },
  "servers": [
    {
      "url": "https://api.moneris.io",
      "description": "Production server (uses live data)"
    },
    {
      "url": "https://api.sb.moneris.io",
      "description": "Sandbox server (uses test data)"
    }
  ],
  "paths": {
    "/payments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Liste des paiements",
        "description": "Renvoie une liste pagin√©e de paiements.",
        "operationId": "getPayments",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste de tous les paiements",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentResponseList"
                },
                "example": {
                  "data": [
                    {
                      "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "0123456789101",
                      "orderId": "1q2w3e4r5t6t78",
                      "invoiceNumber": "1a2s3d45v6",
                      "transactionDateTime": "2019-07-30T06:43:40.252Z",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "amount": {
                        "amount": 16000,
                        "currency": "CAD"
                      },
                      "authorizedAmount": {
                        "amount": 16000,
                        "currency": "CAD"
                      },
                      "capturableAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      },
                      "amountDetails": {
                        "subTotalAmount": {
                          "amount": 14000,
                          "currency": "CAD"
                        },
                        "tipAmount": {
                          "amount": 150,
                          "currency": "CAD"
                        }
                      },
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMethod": {
                        "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": null,
                        "contactDetails": null,
                        "billingAddress": null,
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2025,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": null,
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "paymentStatus": "SUCCEEDED",
                      "transactionDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 0,
                        "responseCode": 1,
                        "message": "approved",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "checkResults": {
                        "addressVerificationServiceResultCode": "M",
                        "cardSecurityCodeResultCode": "MATCH",
                        "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                      },
                      "cardOnFileResponse": null,
                      "refunds": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    },
                    {
                      "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAZ",
                      "merchantId": "0123456789101",
                      "orderId": "1q2w3e4r5t6t78",
                      "invoiceNumber": "1a2s3d45v6",
                      "transactionDateTime": "2019-07-30T06:43:40.252Z",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "amount": {
                        "amount": 16000,
                        "currency": "CAD"
                      },
                      "authorizedAmount": {
                        "amount": 16000,
                        "currency": "CAD"
                      },
                      "capturableAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      },
                      "amountDetails": {
                        "subTotalAmount": {
                          "amount": 14000,
                          "currency": "CAD"
                        },
                        "tipAmount": {
                          "amount": 150,
                          "currency": "CAD"
                        }
                      },
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMethod": {
                        "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": null,
                        "contactDetails": null,
                        "billingAddress": null,
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2025,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": null,
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "paymentStatus": "CANCELED",
                      "transactionDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 0,
                        "responseCode": 1,
                        "message": "approved",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "checkResults": {
                        "addressVerificationServiceResultCode": "M",
                        "cardSecurityCodeResultCode": "MATCH",
                        "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                      },
                      "cardOnFileResponse": null,
                      "refunds": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    },
                    {
                      "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAX",
                      "merchantId": "0123456789101",
                      "orderId": "1q2w3e4r5t6t78",
                      "invoiceNumber": "1a2s3d45v6",
                      "transactionDateTime": "2019-07-30T06:43:40.252Z",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "amount": {
                        "amount": 16000,
                        "currency": "CAD"
                      },
                      "authorizedAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      },
                      "capturableAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      },
                      "amountDetails": {
                        "subTotalAmount": {
                          "amount": 14000,
                          "currency": "CAD"
                        },
                        "tipAmount": {
                          "amount": 150,
                          "currency": "CAD"
                        }
                      },
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMethod": {
                        "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": null,
                        "contactDetails": null,
                        "billingAddress": null,
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2025,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": null,
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "paymentStatus": "DECLINED",
                      "transactionDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 421,
                        "responseCode": 43,
                        "message": "Stolen card, pick up.",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "checkResults": {
                        "addressVerificationServiceResultCode": "M",
                        "cardSecurityCodeResultCode": "MATCH",
                        "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                      },
                      "cardOnFileResponse": null,
                      "refunds": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    }
                  ],
                  "self": "/payments?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "first": "/payments?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "last": "/payments?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "next\"": null,
                  "previous": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      },
      "post": {
        "summary": "Cr√©er un paiement",
        "description": "Cette op√©ration est utilis√©e pour initier un paiement.",
        "operationId": "createPayments",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createPaymentRequest"
              },
              "examples": {
                "regularPurchaseWithPaymentMethodId": {
                  "$ref": "#/components/examples/regularPurchaseWithPaymentMethodId"
                },
                "regularPurchaseWithPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithPaymentMethod"
                },
                "preAuthorizationWithPaymentMethodId": {
                  "$ref": "#/components/examples/preAuthorizationWithPaymentMethodId"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Op√©ration de paiement cr√©√©e avec succ√®s.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentResponse"
                },
                "examples": {
                  "PurchaseCompleted": {
                    "$ref": "#/components/examples/PurchaseCompletedResponse"
                  },
                  "PreauthorizationCompletedResponse": {
                    "$ref": "#/components/examples/PreauthorizationCompletedResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "R√©ponse du r√©sultat de l‚Äôop√©ration de paiement √©chou√©",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "declined": {
                    "$ref": "#/components/examples/DeclineErrorResponse"
                  },
                  "invalid_request": {
                    "$ref": "#/components/examples/InvalidRequestErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/payments/{payment-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/paymentId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "R√©cup√©rer le paiement",
        "description": "R√©cup√©rer un paiement √† l‚Äôaide de son ID de paiement",
        "operationId": "getPayment",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "responses": {
          "200": {
            "description": "Le paiement correspondant √† l''identifiant de paiement fourni.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentResponse"
                },
                "examples": {
                  "succeeded": {
                    "$ref": "#/components/examples/PurchaseCompletedResponse"
                  },
                  "authorized": {
                    "$ref": "#/components/examples/PreauthorizationCompletedResponse"
                  },
                  "declined": {
                    "$ref": "#/components/examples/PurchaseDeclinedResponse"
                  },
                  "declined_retry": {
                    "$ref": "#/components/examples/PurchaseDeclinedRetryResponse"
                  },
                  "canceled": {
                    "$ref": "#/components/examples/PurchaseCanceledResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/payments/{payment-id}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/paymentId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Annuler le paiement",
        "description": "Annuler un paiement. Cette op√©ration peut ne pas √™tre possible si le paiement a √©t√© effectu√©.",
        "operationId": "cancelPayment",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cancelPaymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Le paiement a √©t√© annul√© avec succ√®s.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentResponse"
                },
                "example": {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "invoiceNumber": "1a2s3d45v6",
                  "transactionDateTime": "2019-07-30T06:43:40.252Z",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "amount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "authorizedAmount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "capturableAmount": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "amountDetails": {
                    "subTotalAmount": {
                      "amount": 14000,
                      "currency": "CAD"
                    },
                    "tipAmount": {
                      "amount": 150,
                      "currency": "CAD"
                    }
                  },
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodType": "CARD",
                    "paymentMethodInformation": {
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2025,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778"
                    },
                    "paymentMethodStored": "DO_NOT_STORE",
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "paymentStatus": "CANCELED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": 0,
                    "responseCode": 1,
                    "message": "approved",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "checkResults": {
                    "addressVerificationServiceResultCode": "M",
                    "cardSecurityCodeResultCode": "MATCH",
                    "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                  },
                  "cardOnFileResponse": null,
                  "refunds": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "√âchec de l‚Äôannulation R√©ponse du r√©sultat de l‚Äôop√©ration de paiement",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "declined": {
                    "$ref": "#/components/examples/DeclineErrorResponse"
                  },
                  "invalid_request": {
                    "$ref": "#/components/examples/InvalidPurchaseErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/payments/{payment-id}/complete": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/paymentId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Paiement complet",
        "description": "Cela permettra de saisir efficacement un paiement qui a √©t√© autoris√©.",
        "operationId": "completePayment",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/completionRequest"
              },
              "example": {
                "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
                "invoiceNumber": "1a2s3d45v6",
                "customData": {
                  "property1": "string",
                  "property2": "string"
                },
                "amount": {
                  "amount": 16000,
                  "currency": "CAD"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Le paiement s‚Äôest termin√© avec succ√®s.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentResponse"
                },
                "example": {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "invoiceNumber": "1a2s3d45v6",
                  "transactionDateTime": "2019-07-30T06:43:40.252Z",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "amount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "authorizedAmount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "capturableAmount": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "amountDetails": {
                    "subTotalAmount": {
                      "amount": 14000,
                      "currency": "CAD"
                    },
                    "tipAmount": {
                      "amount": 150,
                      "currency": "CAD"
                    }
                  },
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodType": "CARD",
                    "paymentMethodInformation": {
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2025,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778"
                    },
                    "paymentMethodStored": "DO_NOT_STORE",
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "paymentStatus": "SUCCEEDED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": 0,
                    "responseCode": 1,
                    "message": "approved",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "checkResults": {
                    "addressVerificationServiceResultCode": "M",
                    "cardSecurityCodeResultCode": "MATCH",
                    "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                  },
                  "cardOnFileResponse": null,
                  "refunds": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Echec de l‚Äôachat",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "declined": {
                    "$ref": "#/components/examples/DeclineErrorResponse"
                  },
                  "invalid_request": {
                    "$ref": "#/components/examples/InvalidPurchaseErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/payment-methods": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "R√©pertorier les modes de paiement",
        "description": "R√©cup√®re une liste pagin√©e des modes de paiement.",
        "operationId": "getPaymentMethods",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de paiements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          },
          {
            "$ref": "#/components/parameters/isExpiring"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste pagin√©e des modes de paiement",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentMethodResponseList"
                },
                "example": {
                  "data": [
                    {
                      "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "0123456789101",
                      "cardholderInformation": null,
                      "contactDetails": null,
                      "billingAddress": null,
                      "paymentMethodType": "CARD",
                      "paymentMethodInformation": {
                        "cardInformation": {
                          "bankIdentificationNumber": "123456",
                          "lastFour": "1234",
                          "expiryMonth": 1,
                          "expiryYear": 2023,
                          "cardBrand": "MASTERCARD",
                          "cardType": "CREDIT",
                          "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                          "issuer": "RBC"
                        },
                        "paymentAccountReference": "11112222333344445555666677778"
                      },
                      "paymentMethodStored": "DO_NOT_STORE",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    },
                    {
                      "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "0123456789101",
                      "cardholderInformation": {
                        "cardholderName": "John Doe",
                        "companyName": "SP Ltd"
                      },
                      "contactDetails": {
                        "phoneNumber": "1-866-319-7450",
                        "email": "moneris@moneris.com"
                      },
                      "billingAddress": {
                        "unitNumber": "123A",
                        "streetNumber": "3300",
                        "streetName": "Bloor Street West",
                        "city": "Toronto",
                        "province": "Ontario",
                        "postalCode": "M8X 2X2",
                        "country": "CA"
                      },
                      "paymentMethodType": "TEMPORARY_TOKEN",
                      "paymentMethodInformation": {
                        "cardInformation": {
                          "bankIdentificationNumber": "123456",
                          "lastFour": "1234",
                          "expiryMonth": 1,
                          "expiryYear": 2023,
                          "cardBrand": "MASTERCARD",
                          "cardType": "CREDIT",
                          "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                          "issuer": "RBC"
                        },
                        "paymentAccountReference": "11112222333344445555666677778"
                      },
                      "paymentMethodStored": "DO_NOT_STORE",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    }
                  ],
                  "self": "/payment-methods?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "first": "/payment-methods?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "last": "/payment-methods?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "next\"": null,
                  "previous": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      },
      "post": {
        "summary": "Cr√©er un mode de paiement",
        "description": "Cr√©ez un mode de paiement.",
        "operationId": "createPaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createPaymentMethodRequest"
              },
              "examples": {
                "card": {
                  "$ref": "#/components/examples/cardPaymentMethodRequest"
                },
                "temporary_token": {
                  "$ref": "#/components/examples/temporaryTokenPaymentMethodRequest"
                },
                "permanent_token": {
                  "$ref": "#/components/examples/permanentTokenPaymentMethodRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Mode de paiement cr√©√© avec succ√®s.  Le contenu de la r√©ponse contient le mode de paiement cr√©√©.\n",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentMethodResponse"
                },
                "example": {
                  "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "cardholderInformation": {
                    "cardholderName": "John Doe",
                    "companyName": "SP Ltd"
                  },
                  "contactDetails": {
                    "phoneNumber": "1-866-319-7450",
                    "email": "moneris@moneris.com"
                  },
                  "billingAddress": {
                    "unitNumber": "123A",
                    "streetNumber": "3300",
                    "streetName": "Bloor Street West",
                    "city": "Toronto",
                    "province": "Ontario",
                    "postalCode": "M8X 2X2",
                    "country": "CA"
                  },
                  "paymentMethodType": "CARD",
                  "paymentMethodInformation": {
                    "cardInformation": {
                      "bankIdentificationNumber": "123456",
                      "lastFour": "1234",
                      "expiryMonth": 1,
                      "expiryYear": 2023,
                      "cardBrand": "MASTERCARD",
                      "cardType": "CREDIT",
                      "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                      "issuer": "RBC"
                    },
                    "paymentAccountReference": "11112222333344445555666677778"
                  },
                  "paymentMethodStored": "DO_NOT_STORE",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/payment-methods/{payment-method-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/paymentMethodId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "R√©cup√©rer le mode de paiement",
        "description": "R√©cup√©rer un mode de paiement par ID",
        "operationId": "getPaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de paiements"
        ],
        "responses": {
          "200": {
            "description": "Mode de paiement trouv√© et renvoy√© dans la r√©ponse.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentMethodResponse"
                },
                "example": {
                  "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "cardholderInformation": {
                    "cardholderName": "John Doe",
                    "companyName": "SP Ltd"
                  },
                  "contactDetails": {
                    "phoneNumber": "1-866-319-7450",
                    "email": "moneris@moneris.com"
                  },
                  "billingAddress": {
                    "unitNumber": "123A",
                    "streetNumber": "3300",
                    "streetName": "Bloor Street West",
                    "city": "Toronto",
                    "province": "Ontario",
                    "postalCode": "M8X 2X2",
                    "country": "CA"
                  },
                  "paymentMethodType": "CARD",
                  "paymentMethodInformation": {
                    "cardInformation": {
                      "bankIdentificationNumber": "123456",
                      "lastFour": "1234",
                      "expiryMonth": 1,
                      "expiryYear": 2023,
                      "cardBrand": "MASTERCARD",
                      "cardType": "CREDIT",
                      "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                      "issuer": "RBC"
                    },
                    "paymentAccountReference": "11112222333344445555666677778"
                  },
                  "paymentMethodStored": "DO_NOT_STORE",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Mode de paiement introuvable.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      },
      "put": {
        "summary": "Mettre √† jour le mode de paiement",
        "description": "Mettre √† jour le mode de paiement r√©f√©renc√© par son Id. \nCertaines informations peuvent ne pas √™tre mises √† jour si le mode de paiement a √©t√© utilis√© dans une transaction.\n",
        "operationId": "updatePaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updatePaymentMethodRequest"
              },
              "examples": {
                "card": {
                  "$ref": "#/components/examples/updateCardPaymentMethodRequest"
                },
                "temporary_token": {
                  "$ref": "#/components/examples/updateTemporaryTokenPaymentMethodRequest"
                },
                "permanent_token": {
                  "$ref": "#/components/examples/updatePermanentTokenPaymentMethodRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mettre √† jour le mode de paiement",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentMethodResponse"
                },
                "example": {
                  "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "cardholderInformation": {
                    "cardholderName": "John Doe",
                    "companyName": "SP Ltd"
                  },
                  "contactDetails": {
                    "phoneNumber": "1-866-319-7450",
                    "email": "moneris@moneris.com"
                  },
                  "billingAddress": {
                    "unitNumber": "123A",
                    "streetNumber": "3300",
                    "streetName": "Bloor Street West",
                    "city": "Toronto",
                    "province": "Ontario",
                    "postalCode": "M8X 2X2",
                    "country": "CA"
                  },
                  "paymentMethodType": "CARD",
                  "paymentMethodInformation": {
                    "cardInformation": {
                      "bankIdentificationNumber": "123456",
                      "lastFour": "1234",
                      "expiryMonth": 1,
                      "expiryYear": 2023,
                      "cardBrand": "MASTERCARD",
                      "cardType": "CREDIT",
                      "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                      "issuer": "RBC"
                    },
                    "paymentAccountReference": "11112222333344445555666677778"
                  },
                  "paymentMethodStored": "DO_NOT_STORE",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Mode de paiement introuvable.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/concurrencyConflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      },
      "delete": {
        "summary": "Supprimer le mode de paiement",
        "description": "Supprime un mode de paiement.",
        "operationId": "deletePaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de paiements"
        ],
        "responses": {
          "204": {
            "description": "Le mode de paiement a √©t√© supprim√© avec succ√®s. \nLe contenu de la r√©ponse contient les d√©tails du mode de paiement.\n",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Mode de paiement introuvable.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/refunds": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Liste des remboursements",
        "description": "Renvoie une liste pagin√©e des op√©rations de remboursement.",
        "operationId": "getRefunds",
        "security": [
          {
            "OAuth2": [
              "refund.read"
            ]
          },
          {
            "OAuth2": [
              "refund.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Remboursements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste de remboursement renvoy√©e avec succ√®s.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refundResponseList"
                },
                "example": {
                  "data": [
                    {
                      "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "0123456789101",
                      "paymentMethod": {
                        "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": {
                          "cardholderName": "John Doe",
                          "companyName": "SP Ltd"
                        },
                        "contactDetails": {
                          "phoneNumber": "1-866-319-7450",
                          "email": "moneris@moneris.com"
                        },
                        "billingAddress": {
                          "unitNumber": "123A",
                          "streetNumber": "3300",
                          "streetName": "Bloor Street West",
                          "city": "Toronto",
                          "province": "Ontario",
                          "postalCode": "M8X 2X2",
                          "country": "CA"
                        },
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2023,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": "2019-07-30T06:43:40.252Z",
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "refundAmount": {
                        "amount": 1600,
                        "currency": "CAD"
                      },
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "status": "SUCCEEDED",
                      "statusDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 1,
                        "responseCode": 1,
                        "message": "SUCCESS",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "reason": "Defective product",
                      "cardOnFileResponse": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    },
                    {
                      "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "0123456789101",
                      "paymentMethod": {
                        "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": {
                          "cardholderName": "John Doe",
                          "companyName": "SP Ltd"
                        },
                        "contactDetails": {
                          "phoneNumber": "1-866-319-7450",
                          "email": "moneris@moneris.com"
                        },
                        "billingAddress": {
                          "unitNumber": "123A",
                          "streetNumber": "3300",
                          "streetName": "Bloor Street West",
                          "city": "Toronto",
                          "province": "Ontario",
                          "postalCode": "M8X 2X2",
                          "country": "CA"
                        },
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2023,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": "2019-07-30T06:43:40.252Z",
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "refundAmount": {
                        "amount": 1600,
                        "currency": "CAD"
                      },
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "status": "DECLINED",
                      "statusDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 51,
                        "responseCode": 54,
                        "message": "Expired Card",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "reason": "Defective product",
                      "cardOnFileResponse": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    }
                  ],
                  "self": "/refunds?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "first": "/refunds?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "last": "/refunds?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "next\"": null,
                  "previous": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      },
      "post": {
        "summary": "Cr√©er un remboursement",
        "description": "Cette op√©ration permet de cr√©er un Remboursement. \nPour les remboursements de paiement, l‚Äôidentifiant de paiement est requis tandis que le mode de paiement n‚Äôest pas requis.\nPour les remboursements ind√©pendants, aucun identifiant de paiement n‚Äôest requis, mais le mode de paiement est requis.\n",
        "operationId": "createRefund",
        "security": [
          {
            "OAuth2": [
              "refund.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Remboursements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRefundRequest"
              },
              "examples": {
                "matching": {
                  "$ref": "#/components/examples/matchingRefundRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "R√©ponse du r√©sultat de l‚Äôop√©ration de remboursement",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refundResponse"
                },
                "example": {
                  "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "paymentMethod": {
                    "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": {
                      "cardholderName": "John Doe",
                      "companyName": "SP Ltd"
                    },
                    "contactDetails": {
                      "phoneNumber": "1-866-319-7450",
                      "email": "moneris@moneris.com"
                    },
                    "billingAddress": {
                      "unitNumber": "123A",
                      "streetNumber": "3300",
                      "streetName": "Bloor Street West",
                      "city": "Toronto",
                      "province": "Ontario",
                      "postalCode": "M8X 2X2",
                      "country": "CA"
                    },
                    "paymentMethodType": "CARD",
                    "paymentMethodInformation": {
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2023,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778"
                    },
                    "paymentMethodStored": "DO_NOT_STORE",
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": "2019-07-30T06:43:40.252Z",
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "refundAmount": {
                    "amount": 1600,
                    "currency": "CAD"
                  },
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "status": "SUCCEEDED",
                  "statusDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": 1,
                    "responseCode": 1,
                    "message": "SUCCESS",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "reason": "Defective product",
                  "cardOnFileResponse": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Op√©ration de remboursement refus√©e",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "invalid_request": {
                    "$ref": "#/components/examples/InvalidRefundErrorResponse"
                  },
                  "declined": {
                    "$ref": "#/components/examples/exp-refundResponse_DeclineErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/refunds/{refund-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/refundId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "R√©cup√©rer le remboursement",
        "description": "R√©cup√©rer un remboursement par son Id.",
        "operationId": "getRefundById",
        "security": [
          {
            "OAuth2": [
              "refund.read"
            ]
          },
          {
            "OAuth2": [
              "refund.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Remboursements"
        ],
        "responses": {
          "200": {
            "description": "Vous avez r√©ussi √† r√©cup√©rer le remboursement correspondant √† l‚Äôidentifiant de remboursement fourni.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refundResponse"
                },
                "examples": {
                  "succeeded": {
                    "$ref": "#/components/examples/SucceededRefundResponse"
                  },
                  "declined": {
                    "$ref": "#/components/examples/DeclinedRefundResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Remboursement introuvable.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/refunds/ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/validations": {
      "description": "Param√©trez un mode de paiement pour les paiements futurs. \nSimilaire √† un paiement, mais aucun frais n‚Äôest cr√©√©.\nUtile lors de l‚Äôint√©gration des clients, mais ne les facturant pas imm√©diatement.\n",
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Validations de cartes de liste",
        "description": "Renvoie une liste pagin√©e des validations de cartes qui ont √©t√© ex√©cut√©es.",
        "operationId": "getValidations",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Validations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des validations de cartes",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationsResponseList"
                },
                "example": {
                  "data": [
                    {
                      "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "0123456789101",
                      "orderId": "1q2w3e4r5t6t78",
                      "invoiceNumber": "1a2s3d45v6",
                      "transactionDateTime": "2019-07-30T06:43:40.252Z",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": null,
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMethod": {
                        "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": {
                          "cardholderName": "John Doe",
                          "companyName": "SP Ltd"
                        },
                        "contactDetails": null,
                        "billingAddress": {
                          "unitNumber": "123A",
                          "streetNumber": "3300",
                          "streetName": "Bloor Street West",
                          "city": "Toronto",
                          "province": "Ontario",
                          "postalCode": "M8X 2X2",
                          "country": "CA"
                        },
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2025,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": null,
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "validationStatus": "SUCCEEDED",
                      "transactionDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 0,
                        "responseCode": 1,
                        "message": "approved",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "checkResults": {
                        "addressVerificationServiceResultCode": "M",
                        "cardSecurityCodeResultCode": "MATCH",
                        "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                      },
                      "cardOnFileResponse": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    },
                    {
                      "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAX",
                      "merchantId": "0123456789101",
                      "orderId": "1q2w3e4r5t6t78",
                      "invoiceNumber": "1a2s3d45v6",
                      "transactionDateTime": "2019-07-30T06:43:40.252Z",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": null,
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMethod": {
                        "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": {
                          "cardholderName": "John Doe",
                          "companyName": "SP Ltd"
                        },
                        "contactDetails": {
                          "phoneNumber": "1-866-319-7450",
                          "email": "moneris@moneris.com"
                        },
                        "billingAddress": {
                          "unitNumber": "123A",
                          "streetNumber": "3300",
                          "streetName": "Bloor Street West",
                          "city": "Toronto",
                          "province": "Ontario",
                          "postalCode": "M8X 2X2",
                          "country": "CA"
                        },
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2025,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": null,
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "validationStatus": "DECLINED",
                      "transactionDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 421,
                        "responseCode": 43,
                        "message": "Stolen card, pick up.",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "checkResults": {
                        "addressVerificationServiceResultCode": "M",
                        "cardSecurityCodeResultCode": "MATCH",
                        "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                      },
                      "cardOnFileResponse": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    }
                  ],
                  "self": "/validations?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "first": "/validations?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "last": "/validations?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "next\"": null,
                  "previous": null
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      },
      "post": {
        "summary": "Cr√©er une validation de carte",
        "description": "Lancez une nouvelle demande de validation de carte.",
        "operationId": "createValidation",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Validations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createValidationRequest"
              },
              "examples": {
                "with_payment_method_id": {
                  "$ref": "#/components/examples/validationRequestWithPaymentMethodId"
                },
                "with_payment_method": {
                  "$ref": "#/components/examples/validationRequestWithPaymentMethodData"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Demande de validation cr√©√©e avec succ√®s.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationResponse"
                }
              }
            }
          },
          "400": {
            "description": "R√©ponse du r√©sultat de l‚Äôop√©ration de validation ayant √©chou√©",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "declined": {
                    "$ref": "#/components/examples/exp-validationResponse_DeclineErrorResponse"
                  },
                  "invalid_request": {
                    "$ref": "#/components/examples/InvalidRequestErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/validations/{validation-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/validationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "R√©cup√©rer la validation de la carte.",
        "description": "R√©cup√©rer une validation de carte par id.",
        "operationId": "getValidation",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Validations"
        ],
        "responses": {
          "200": {
            "description": "R√©cup√©rer une validation de carte par ID",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationResponse"
                },
                "examples": {
                  "succeeded": {
                    "$ref": "#/components/examples/ValidationSucceededResponse"
                  },
                  "declined": {
                    "$ref": "#/components/examples/ValidationDeclinedRetryResponse"
                  },
                  "declined_retry": {
                    "$ref": "#/components/examples/ValidationDeclinedResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Validation de la carte introuvable",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationResponse"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/validations/vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/customers": {
      "description": "Cette API permet de g√©rer les clients pass√©s et r√©currents.\nTr√®s utile lors du suivi et de la gestion des frais appartenant au m√™me client.\n",
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Liste des clients",
        "description": "Renvoie une liste pagin√©e de clients.",
        "operationId": "getCustomers",
        "security": [
          {
            "OAuth2": [
              "customer.read"
            ]
          },
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste de tous les clients",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customerResponseList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      },
      "post": {
        "summary": "Cr√©er un client",
        "description": "Cette op√©ration permet de cr√©er un nouveau client.",
        "operationId": "createCustomers",
        "security": [
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "R√©ponse du r√©sultat de l‚Äôop√©ration client",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customerResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/customers/{customer-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/customerId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "R√©cup√©rer le client",
        "description": "R√©cup√©rer un client par son Id.",
        "operationId": "getCustomer",
        "security": [
          {
            "OAuth2": [
              "customer.read"
            ]
          },
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "responses": {
          "200": {
            "description": "Le client correspondant au 'customerId' fourni",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customerResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Client introuvable",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      },
      "put": {
        "summary": "Mettre √† jour le client",
        "description": "Met √† jour les coordonn√©es du client telles que le nom, l‚Äôadresse, etc.",
        "operationId": "updateCustomer",
        "security": [
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Le client a mis √† jour avec succ√®s.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customerResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Client introuvable",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/concurrencyConflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      },
      "delete": {
        "summary": "Supprimer le client",
        "description": "Supprimer un client par son identifiant",
        "operationId": "deleteCustomer",
        "security": [
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "responses": {
          "204": {
            "description": "Le client a √©t√© supprim√© avec succ√®s.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Client introuvable",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/three-d-secure": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Cr√©er une authentification",
        "description": "Cette op√©ration permet de cr√©er une demande d‚Äôauthentification. \nLa demande d‚Äôauthentification permet de lancer le processus de validation de la carte. \nLe r√©sultat de cette demande d√©termine si 3DS est pris en charge par la carte et quel type d‚Äôauthentification est requis.\n",
        "operationId": "createAuthentication",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "3D Secure"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authenticationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "R√©ponse du r√©sultat de l‚Äôop√©ration de recherche de carte",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authenticationResponse"
                }
              }
            }
          },
          "202": {
            "description": "L‚Äôop√©ration d‚Äôauthentification MPI s‚Äôest av√©r√©e probl√©matique.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authenticationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/three-d-secure/{authentication-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/authenticationId"
        }
      ],
      "get": {
        "summary": "R√©cup√©rer l‚Äôauthentification",
        "description": "R√©cup√©rer une authentification par son ID d‚Äôauthentification",
        "operationId": "getAuthentication",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "3D Secure"
        ],
        "responses": {
          "200": {
            "description": "L‚Äôauthentification correspondant √† l''authentication-id fourni.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authenticationResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/three-d-secure/{authentication-id}/lookup": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/authenticationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Recherche de valeur d‚Äôauthentification",
        "description": "L‚Äôint√©r√™t du flux 3-D Secure est de v√©rifier que le v√©ritable titulaire de la carte fait partie de l‚Äôautorisation. Le flux de d√©fi est utilis√© pour pr√©senter un moyen d‚Äôauthentifier le titulaire de la carte √† l‚Äôaide, par exemple, d‚Äôun OTP ou d‚Äôune m√©thode d‚Äôidentification f√©d√©r√©e.",
        "operationId": "authenticationValueLookup",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "3D Secure"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lookupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "L‚Äôop√©ration d‚Äôauthentification MPI a √©t√© authentifi√©e avec succ√®s.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authenticationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    },
    "/three-d-secure/card-lookups": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Recherche de carte 3DS",
        "operationId": "cardLookup",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "3D Secure"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cardLookupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Op√©ration de recherche CAVV pour lire le r√©sultat du d√©fi.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cardLookupResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Api-Key"
      },
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://api.moneris.io/oauth2/token",
            "scopes": {
              "payment.read": "Grants read access to payment related APIs",
              "payment.write": "Grants read & write access to payment related APIs",
              "refund.read": "Grants read access to refunds",
              "refund.write": "Grants read & write access to refunds",
              "customer.read": "Grants read access to customer data",
              "customer.write": "Grants read & write access to customer data"
            }
          }
        }
      }
    },
    "schemas": {
      "apiVersion": {
        "description": "Version de l‚ÄôAPI du point de terminaison. \n\nDoit √™tre fourni par le biais de la cha√Æne de requ√™te ou d‚Äôen-t√™tes.\n",
        "type": "string",
        "example": "2023-11-01"
      },
      "merchantId": {
        "type": "string",
        "description": "Identification de treize caract√®res fournie aux marchands par Moneris.\n",
        "minLength": 13,
        "maxLength": 13,
        "example": 123456789101
      },
      "dateTime": {
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z"
      },
      "orderId": {
        "type": "string",
        "description": "Indique un identificateur de transaction d√©fini par le marchand qui est attribu√© de mani√®re unique √† chaque transaction d‚Äôachat, de pr√©autorisation et de remboursement ind√©pendant. \n\nRemarque : Il n‚Äôest pas possible que deux transactions de ce type aient le m√™me ID de commande.\n",
        "minLength": 1,
        "maxLength": 50,
        "example": "1q2w3e4r5t6t78",
        "pattern": "^[^\\s]+$",
        "nullable": true
      },
      "invoiceNumber": {
        "type": "string",
        "description": "Le terminal utilise le champ du num√©ro de facture pour soumettre une valeur unique afin d‚Äôidentifier une transaction. Ces donn√©es sont enregistr√©es par Moneris Solutions.",
        "minLength": 1,
        "maxLength": 17,
        "example": "1a2s3d45v6",
        "nullable": true
      },
      "transactionDateTime": {
        "description": "Date et heure de la transaction",
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z"
      },
      "createdAt": {
        "description": "Heure √† laquelle l‚Äôobjet a √©t√© cr√©√©",
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z"
      },
      "modifiedAt": {
        "description": "Heure √† laquelle l‚Äôobjet a √©t√© modifi√©",
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z"
      },
      "amount": {
        "type": "integer",
        "format": "int32",
        "minimum": 0,
        "maximum": 999999999,
        "example": 10000
      },
      "currency": {
        "type": "string",
        "description": "Code mon√©taire √† trois lettres bas√© sur la norme ISO 4217. Voir https://en.wikipedia.org/wiki/ISO_4217",
        "minLength": 3,
        "maxLength": 4,
        "example": "CAD"
      },
      "transactionAmount": {
        "type": "object",
        "description": "Le montant de la transaction. La valeur doit √™tre exprim√©e en centimes. Par cons√©quent, 10,59 $ doivent √™tre envoy√©s en tant que 1059",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 16000,
          "currency": "CAD"
        }
      },
      "subTotalAmount": {
        "type": "object",
        "description": "Sous-montant total de la transaction. La valeur doit √™tre exprim√©e en centimes. Par cons√©quent, 10,59 $ doivent √™tre envoy√©s en tant que 1059",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "nullable": true,
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 2000,
          "currency": "CAD"
        }
      },
      "tipAmount": {
        "type": "object",
        "description": "Montant total du pourboire pour la transaction. La valeur doit √™tre exprim√©e en centimes. Par cons√©quent, 10,59 $ doivent √™tre envoy√©s en tant que 1059",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "nullable": true,
        "example": {
          "amount": 1200,
          "currency": "CAD"
        }
      },
      "amountDetails": {
        "description": "D√©tails suppl√©mentaires sur le montant",
        "type": "object",
        "nullable": true,
        "properties": {
          "subTotalAmount": {
            "$ref": "#/components/schemas/subTotalAmount"
          },
          "tipAmount": {
            "$ref": "#/components/schemas/tipAmount"
          }
        }
      },
      "cardholderName": {
        "type": "string",
        "description": "Nom du titulaire de la carte",
        "minLength": 1,
        "maxLength": 60,
        "example": "John Doe",
        "nullable": true
      },
      "companyName": {
        "type": "string",
        "description": "Nom de l‚Äôentreprise",
        "minLength": 1,
        "maxLength": 50,
        "example": "SP Ltd",
        "nullable": true
      },
      "cardholderInformation": {
        "type": "object",
        "description": "Informations sur le titulaire de la carte.",
        "nullable": true,
        "properties": {
          "cardholderName": {
            "$ref": "#/components/schemas/cardholderName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          }
        },
        "required": [
          "cardholderName"
        ]
      },
      "contactDetails": {
        "type": "object",
        "description": "Coordonn√©es du client",
        "nullable": true,
        "properties": {
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Num√©ro de t√©l√©phone du client",
            "minLength": 1,
            "maxLength": 30,
            "example": "1-866-319-7450"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "iso-639",
            "description": "Adresse e-mail du client. Voir https://www.rfc-editor.org/rfc/rfc5322",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com"
          }
        },
        "example": {
          "phoneNumber": "1-866-319-7450",
          "email": "moneris@moneris.com"
        }
      },
      "unitNumber": {
        "type": "string",
        "description": "Num√©ro d‚Äôunit√©",
        "minLength": 1,
        "maxLength": 19,
        "example": "123A"
      },
      "streetNumber": {
        "type": "string",
        "description": "Num√©ro de rue",
        "minLength": 1,
        "maxLength": 19,
        "example": 3300
      },
      "streetName": {
        "type": "string",
        "description": "Nom de la rue",
        "minLength": 1,
        "maxLength": 100,
        "example": "Bloor"
      },
      "city": {
        "type": "string",
        "description": "Ville",
        "minLength": 1,
        "maxLength": 50,
        "example": "Toronto"
      },
      "province": {
        "type": "string",
        "description": "Province ou √âtat",
        "minLength": 1,
        "maxLength": 30,
        "example": "Ontario"
      },
      "postalCode": {
        "type": "string",
        "description": "Code postal",
        "minLength": 1,
        "maxLength": 30,
        "example": "M8X 2X2"
      },
      "country": {
        "type": "string",
        "description": "Code de pays √† deux lettres bas√© sur la norme ISO 3166-1 alpha-2. Voir https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2",
        "minLength": 2,
        "maxLength": 2,
        "example": "CA"
      },
      "address": {
        "type": "object",
        "description": "L‚Äôadresse postale, y compris la rue, la ville, la province et le code postal.",
        "properties": {
          "unitNumber": {
            "$ref": "#/components/schemas/unitNumber"
          },
          "streetNumber": {
            "$ref": "#/components/schemas/streetNumber"
          },
          "streetName": {
            "$ref": "#/components/schemas/streetName"
          },
          "city": {
            "$ref": "#/components/schemas/city"
          },
          "province": {
            "$ref": "#/components/schemas/province"
          },
          "postalCode": {
            "$ref": "#/components/schemas/postalCode"
          },
          "country": {
            "$ref": "#/components/schemas/country"
          }
        },
        "example": {
          "unitNumber": "123A",
          "streetNumber": 3300,
          "streetName": "Bloor Street West",
          "city": "Toronto",
          "province": "Ontario",
          "postalCode": "M8X 2X2",
          "country": "CA"
        }
      },
      "paymentMethodType": {
        "type": "string",
        "description": "Le type de Mode de paiement utilis√©. Il peut s‚Äôagir de :\n  - Jeton permanent.\n  - Jeton temporaire.\n  - Carte.\n",
        "enum": [
          "PERMANENT_TOKEN",
          "TEMPORARY_TOKEN",
          "CARD"
        ],
        "example": "TEMPORARY_TOKEN"
      },
      "bankIdentificationNumber": {
        "type": "string",
        "description": "Le num√©ro d‚Äôidentification bancaire (BIN) se compose des six premiers chiffres, jusqu‚Äô√† huit, du num√©ro de compte principal (PAN), et identifie √† la fois le r√©seau de paiement concern√© et l‚Äô√©tablissement √©metteur sp√©cifique.",
        "minLength": 6,
        "maxLength": 8,
        "example": 123456
      },
      "lastFour": {
        "type": "string",
        "description": "Les 4 derniers chiffres de la carte",
        "minLength": 4,
        "maxLength": 4,
        "example": 1234
      },
      "expiryMonth": {
        "type": "integer",
        "format": "int32",
        "description": "Mois d‚Äôexpiration de la carte. Le format doit √™tre MM",
        "minimum": 1,
        "maximum": 12,
        "example": 1
      },
      "expiryYear": {
        "type": "integer",
        "format": "int32",
        "description": "Ann√©e d‚Äôexpiration de la carte. Le format doit √™tre YYYY",
        "minimum": 2022,
        "maximum": 9999,
        "example": 2023
      },
      "cardBrand": {
        "type": "string",
        "description": "Nom de la marque de la carte associ√© au cardType.",
        "enum": [
          "MASTERCARD",
          "VISA",
          "AMERICAN_EXPRESS",
          "JCB",
          "DINERS_DISCOVER",
          "INTERAC",
          "UNIONPAY",
          "GIFT_MONERIS",
          "GIFT_DATACANDY",
          "GIFT_GIVEX"
        ],
        "example": "MASTERCARD"
      },
      "cardType": {
        "type": "string",
        "description": "Le terminal utilise le champ type de carte pour sp√©cifier l‚Äôutilisation pr√©vue d‚Äôune carte (d√©bit ou cr√©dit)",
        "enum": [
          "CREDIT",
          "DEBIT",
          "DOMESTIC_DEBIT",
          "PREPAID_RELOADABLE",
          "PREPAID_NON_RELOADABLE",
          "UNKNOWN",
          "GIFT",
          "LOYALTY",
          "FLEET",
          "CORPORATE"
        ],
        "example": "CREDIT"
      },
      "cardFingerprint": {
        "type": "string",
        "description": "Identifiant unique de la carte",
        "maxLength": 255,
        "example": "1Q2W3E4r5t6rfwewerwewrrw"
      },
      "issuer": {
        "type": "string",
        "description": "√âmetteur de la carte.",
        "minLength": 1,
        "maxLength": 100,
        "example": "RBC"
      },
      "cardInformation": {
        "type": "object",
        "description": "Informations sur la carte utilis√©e pour la transaction",
        "properties": {
          "bankIdentificationNumber": {
            "$ref": "#/components/schemas/bankIdentificationNumber"
          },
          "lastFour": {
            "$ref": "#/components/schemas/lastFour"
          },
          "expiryMonth": {
            "$ref": "#/components/schemas/expiryMonth"
          },
          "expiryYear": {
            "$ref": "#/components/schemas/expiryYear"
          },
          "cardBrand": {
            "$ref": "#/components/schemas/cardBrand"
          },
          "cardType": {
            "$ref": "#/components/schemas/cardType"
          },
          "cardFingerprint": {
            "$ref": "#/components/schemas/cardFingerprint"
          },
          "issuer": {
            "$ref": "#/components/schemas/issuer"
          }
        }
      },
      "paymentAccountReference": {
        "type": "string",
        "description": "La r√©f√©rence de compte de paiement (PAR) est utilis√©e pour lier des transactions bas√©es sur un num√©ro de compte principal (PAN) et des transactions sur des jetons de paiement associ√©s sans utiliser le PAN comme m√©canisme de liaison.",
        "minLength": 1,
        "maxLength": 29,
        "example": 1.1112222333344446e+28
      },
      "paymentMethodInformation": {
        "title": "paymentMethodInformation",
        "description": "D√©tails sur la carte utilis√©e dans le mode de paiement.",
        "type": "object",
        "properties": {
          "cardInformation": {
            "$ref": "#/components/schemas/cardInformation"
          },
          "paymentAccountReference": {
            "$ref": "#/components/schemas/paymentAccountReference"
          }
        },
        "required": [
          "cardInformation"
        ]
      },
      "storePaymentMethod": {
        "description": "Stockez ce mode de paiement cr√©√© par le biais de ce paiement pour une utilisation ult√©rieure. \n- DO_NOT_STORE : Le mode de paiement ne sera pas enregistr√©.\n- CARDHOLDER_INITIATED : mode de paiement √† enregistrer et ne peut √™tre r√©utilis√© qu‚Äôavec l‚Äôaccord du titulaire de la carte. Limit√© √† l‚Äôachat, √† la pr√©-autorisation et √† la validation de la carte.\n- MERCHANT_INITIATED : Mode de paiement √† enregistrer et r√©utilisable sans le consentement du titulaire de la carte. Par exemple, les paiements r√©currents.\n",
        "type": "string",
        "default": "DO_NOT_STORE",
        "enum": [
          "DO_NOT_STORE",
          "CARDHOLDER_INITIATED",
          "MERCHANT_INITIATED"
        ]
      },
      "customData": {
        "description": "Le marchand peut envoyer des m√©tadonn√©es personnalis√©es avec la transaction dans cet objet. Moneris fera √©cho √† ces valeurs en r√©ponse.",
        "type": "object",
        "additionalProperties": {
          "type": "string",
          "minLength": 1,
          "maxLength": 50
        },
        "maxProperties": 10,
        "nullable": true
      },
      "paymentMethodResponse": {
        "title": "paymentMethodResponse",
        "description": "Objet de r√©ponse du mode de paiement",
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "cardholderInformation": {
            "$ref": "#/components/schemas/cardholderInformation"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/contactDetails"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/address"
          },
          "paymentMethodType": {
            "$ref": "#/components/schemas/paymentMethodType"
          },
          "paymentMethodInformation": {
            "$ref": "#/components/schemas/paymentMethodInformation"
          },
          "paymentMethodStored": {
            "$ref": "#/components/schemas/storePaymentMethod"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "paymentStatus": {
        "type": "string",
        "description": "Description du statut du paiement.",
        "enum": [
          "CANCELED",
          "DECLINED",
          "DECLINED_RETRY",
          "AUTHORIZED",
          "PROCESSING",
          "SUCCEEDED"
        ],
        "example": "SUCCEEDED"
      },
      "iso": {
        "type": "string",
        "description": "Ce champ repr√©sente le code de r√©ponse de Moneris pour le code de r√©ponse √©quivalent de l‚ÄôOrganisation internationale de normalisation (ISO).",
        "minLength": 2,
        "maxLength": 2,
        "example": 0
      },
      "responseCode": {
        "type": "string",
        "description": "Code de r√©ponse de transaction < 50, Transaction approuv√©e >= 50, Transaction refus√©e NULL La transaction n‚Äôa pas √©t√© envoy√©e pour autorisation. Pour plus de d√©tails sur les codes de r√©ponse retourn√©s, veuillez consulter le tableau des codes de r√©ponse",
        "minLength": 3,
        "maxLength": 3,
        "example": 1
      },
      "message": {
        "type": "string",
        "description": "Description de la r√©ponse renvoy√©e par l‚Äôinstitution √©mettrice. Ce message ne doit pas √™tre affich√© sur les supports de carte.  Pour obtenir des re√ßus, veuillez consulter les Exigences en mati√®re de re√ßus.",
        "minLength": 1,
        "maxLength": 100,
        "example": "SUCCESS"
      },
      "ecommerceIndicator": {
        "type": "string",
        "description": "Cat√©gorie de transaction de commerce √©lectronique en cours de traitement.  Lorsqu‚Äôelle est renvoy√©e dans le responese, elle peut √™tre diff√©rente de la valeur envoy√©e dans la demande au cas o√π la transaction aurait √©t√© d√©class√©e par l‚Äô√©metteur.\n",
        "enum": [
          "MAIL_TELEPHONE_ORDER_SINGLE",
          "MAIL_TELEPHONE_ORDER_RECURRING",
          "MAIL_TELEPHONE_ORDER_INSTALMENT",
          "MAIL_TELEPHONE_ORDER_UNKNOWN",
          "AUTHENTICATED_ECOMMERCE",
          "NON_AUTHENTICATED_ECOMMERCE",
          "SSL_MERCHANT"
        ],
        "example": "AUTHENTICATED_ECOMMERCE",
        "default": "SSL_MERCHANT"
      },
      "statusDetails": {
        "type": "object",
        "description": "D√©tails suppl√©mentaires sur le r√©sultat de la transaction.",
        "properties": {
          "transactionUniqueId": {
            "type": "string",
            "description": "Identifiant de transaction en temps r√©el de l‚Äôh√¥te."
          },
          "isoResponseCode": {
            "$ref": "#/components/schemas/iso"
          },
          "responseCode": {
            "$ref": "#/components/schemas/responseCode"
          },
          "message": {
            "$ref": "#/components/schemas/message"
          },
          "ecommerceIndicator": {
            "$ref": "#/components/schemas/ecommerceIndicator"
          }
        }
      },
      "addressVerificationServiceResult": {
        "type": "string",
        "description": "Indique le r√©sultat de la v√©rification de l‚Äôadresse. \nPour plus d‚Äôinformations, reportez-vous au tableau des codes de r√©sultat AVS.\n\n|Valeur|VISA|CARTE MASTERCARD|D√âCOUVRIR|Amex / JCB|\n|:----|:----|:----|:----|:----|\n|A|Correspondance partielle de l‚Äôadresse AVS|L‚Äôadresse correspond, pas le code postal.|Correspondances d‚Äôadresses, correspondances de codes postaux √† cinq chiffres|L‚Äôadresse de facturation correspond, pas le code postal.|\n|D|N/A|N/A|N/A|Nom du client incorrect, correspondance avec le code postal|\n|E|N/A|N/A|N/A|Nom du client incorrect, correspondance entre l‚Äôadresse de facturation et le code postal|\n|F|N/A|N/A|N/A|Le nom du client est incorrect, l‚Äôadresse de facturation correspond.|\n|G|N/A|N/A|Les informations d‚Äôadresse ne sont pas v√©rifi√©es pour les transactions internationales|N/A|\n|K|N/A|N/A|N/A|Correspondances de noms de clients|\n|L|N/A|N/A|N/A|Le nom du client et le code postal correspondent.|\n|M|N/A|N/A|N/A|Correspondance entre le nom du client, l‚Äôadresse de facturation et le code postal.|\n|N|AVS non-match|Ni l‚Äôadresse ni le code postal ne correspondent.|Ni l‚Äôadresse ni le code postal ne correspondent.|L‚Äôadresse de facturation et le code postal ne correspondent pas.|\n|O|N/A|N/A|N/A|Correspondance entre le nom du client et l‚Äôadresse de facturation|\n|R|(AVS ind√©termin√© outcome (retry)) V.I.P. convertira les valeurs non valides du champ 44.2 en R (AVS indetermined outcome (retry)).|R√©essayer; syst√®me incapable de traiter.|N/A|Syst√®me indisponible¬†; R√©essayer.|\n|S|N/A|AVS n‚Äôest actuellement pas pris en charge.|AVS n‚Äôest actuellement pas pris en charge.|AVS n‚Äôest actuellement pas pris en charge.|\n|L|N/A|N/A|Le code postal √† neuf chiffres correspond, l‚Äôadresse ne correspond pas.|N/A|\n|U|(AVS impossible de v√©rifier) V.I.P. convertira un espace vide dans la zone 44.2 en U (AVS impossible de v√©rifier).|Aucune donn√©e du syst√®me d‚Äô√©mission/d‚Äôautorisation.|R√©essayer; syst√®me incapable de traiter.|L‚Äôinformation n‚Äôest pas disponible.|\n|W|N/A|Pour les adresses am√©ricaines, le code postal √† neuf chiffres correspond, l‚Äôadresse ne correspond pas ; pour une adresse en dehors du code postal am√©ricain correspond, l‚Äôadresse ne correspond pas.|Aucune donn√©e du syst√®me d‚Äô√©metteur/d‚Äôautorisation|Le nom du client, l‚Äôadresse de facturation et le code postal sont tous corrects.|\n|X|N/A|Pour les adresses aux √âtats-Unis, le code postal √† neuf chiffres et les adresses correspondent¬†; pour les adresses en dehors des √âtats-Unis, le code postal et l‚Äôadresse correspondent.|Appariement d‚Äôadresse, correspondance de code postal √† neuf chiffres|N/A|\n|Y|(Match complet AVS)|Pour les adresses aux √âtats-Unis, le code postal √† cinq chiffres et l‚Äôadresse correspondent.|L‚Äôadresse correspond, le code postal ne correspond pas|L‚Äôadresse de facturation et le code postal correspondent|\n|Z|(Code postal/postal AVS uniquement (correspondance partielle))|Pour les adresses am√©ricaines, le code postal √† cinq chiffres correspond, l‚Äôadresse ne correspond pas.|Le code postal √† cinq chiffres correspond, l‚Äôadresse ne correspond pas|Le code postal correspond, pas l‚Äôadresse de facturation.|\n",
        "x-extensible-enum": [
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "I",
          "K",
          "L",
          "M",
          "N",
          "O",
          "P",
          "R",
          "S",
          "T",
          "U",
          "W",
          "X",
          "Y",
          "Z"
        ],
        "example": "M"
      },
      "cardSecurityCodeResult": {
        "type": "string",
        "description": "Indique le r√©sultat de la validation CVD. Le premier octet est l‚Äôindicateur CVD num√©rique envoy√© dans la demande ; Le deuxi√®me octet est le code de r√©ponse. Les codes de r√©ponse possibles sont indiqu√©s dans le tableau des codes de r√©sultat CVD (https://developer.moneris.com/More/Testing/CVD%20Result%20Codes).",
        "enum": [
          "MATCH",
          "NO_MATCH",
          "NOT_PROCESSED",
          "CVD_NOT_PRESENT",
          "NOT_CVD_PARTICIPANT",
          "AMEX_JCB_MATCH",
          "AMEX_JCB_INVALID",
          "OTHER"
        ],
        "example": "MATCH"
      },
      "threeDSecureAuthenticationValueResult": {
        "type": "string",
        "description": "Indique le r√©sultat Verified by Visa CAVV. Les codes de r√©ponse possibles sont indiqu√©s dans le tableau des codes de r√©sultat CAVV (https://developer.moneris.com/More/Testing/CAVV%20Result%20Codes).",
        "enum": [
          "AMEX_AEVV_FAILED_ATTEMPT_ISSUER_KEY",
          "AMEX_AEVV_FAILED_ATTEMPT_ISSUER_NOT_PARTICIPATING_NETWORK_KEY",
          "AMEX_AEVV_FAILED_ATTEMPT_PARTICIPATING_NOT_AVAILABLE_NETWORK_KEY",
          "AMEX_AEVV_FAILED_AUTHENTICATION_ISSUER_KEY",
          "AMEX_AEVV_PASSED_ATTEMPT_ISSUER_KEY",
          "AMEX_AEVV_PASSED_ATTEMPT_ISSUER_NOT_PARTICIPATING_NETWORK_KEY",
          "AMEX_AEVV_PASSED_ATTEMPT_PARTICIPATING_NOT_AVAILABLE_NETWORK_KEY",
          "AMEX_AEVV_PASSED_AUTHENTICATION_ISSUER_KEY",
          "AMEX_AEVV_UNCHECKED",
          "ISA_CAVV_NOT_PRESENT_OR_NOT_VERIFIED",
          "MASTERCARD_AUTHENTICATION_ATTEMPTED",
          "MASTERCARD_AUTHENTICATION_FAILED",
          "MASTERCARD_AUTHENTICATION_SUCCESSFUL",
          "VISA_CAVV_AUTHENTICATION_RESULTS_INVALID",
          "VISA_CAVV_FAILED_VALIDATION_ATTEMPTED",
          "VISA_CAVV_FAILED_VALIDATION_AUTHENTICATION",
          "VISA_CAVV_NOT_VALIDATED_ISSUER_NOT_PARTICIPATING",
          "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED",
          "VISA_CAVV_PASSED_VALIDATION_AUTHENTICATION",
          "VISA_CAVV_PASSED_VALIDATION_INFO_ONLY",
          "VISA_CAVV_WAS_NOT_VALIDATED_ATTEMPTED",
          "VISA_CAVV_WAS_NOT_VALIDATED_AUTHENTICATION"
        ],
        "example": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
      },
      "checkResults": {
        "description": "Codes de r√©sultat CVD, AVS, 3DS, ITD",
        "type": "object",
        "properties": {
          "addressVerificationServiceResultCode": {
            "$ref": "#/components/schemas/addressVerificationServiceResult"
          },
          "cardSecurityCodeResultCode": {
            "$ref": "#/components/schemas/cardSecurityCodeResult"
          },
          "threeDSecureAuthenticationValueResultCode": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationValueResult"
          }
        }
      },
      "originalAmount": {
        "type": "object",
        "description": "Montant initial de la transaction. La valeur doit √™tre exprim√©e en centimes. Par cons√©quent, 10,59 $ doivent √™tre envoy√©s en tant que 1059",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 15000,
          "currency": "CAD"
        }
      },
      "issuerId": {
        "type": "string",
        "description": "Identifiant unique des informations d‚Äôidentification stock√©es du titulaire de la carte. Renvoy√©e dans la r√©ponse de la marque de la carte lors du traitement d‚Äôune transaction d‚Äôinformations d‚Äôidentification enregistr√©es.",
        "minLength": 1,
        "maxLength": 15,
        "example": "A"
      },
      "cardOnFileResponse": {
        "type": "object",
        "description": "Contient des champs li√©s aux informations d‚Äôidentification enregistr√©es (CoF) ",
        "properties": {
          "originalAmount": {
            "$ref": "#/components/schemas/originalAmount"
          },
          "issuerId": {
            "$ref": "#/components/schemas/issuerId"
          }
        }
      },
      "resourceId": {
        "type": "string",
        "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
        "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
        "minLength": 30,
        "maxLength": 30,
        "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
      },
      "refundAmount": {
        "type": "object",
        "description": "Montant total du remboursement pour la transaction. La valeur doit √™tre exprim√©e en centimes. Par cons√©quent, 10,59 $ doivent √™tre envoy√©s en tant que 1059",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 17500,
          "currency": "CAD"
        }
      },
      "refundDetails": {
        "description": "Les d√©tails du remboursement, le cas √©ch√©ant.",
        "type": "object",
        "properties": {
          "refundIds": {
            "description": "Liste des remboursements associ√©s √† ce paiement",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resourceId"
            }
          },
          "refundedAmount": {
            "$ref": "#/components/schemas/refundAmount"
          }
        }
      },
      "paymentResponse": {
        "title": "paymentResponse",
        "type": "object",
        "properties": {
          "paymentId": {
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "transactionDateTime": {
            "$ref": "#/components/schemas/transactionDateTime"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "amount": {
            "description": "This amount excludes surcharge, application and convenience fee.",
            "$ref": "#/components/schemas/transactionAmount",
            "x-i18n-description-fr": "Ce montant ne comprend pas les frais suppl√©mentaires, les frais de dossier et les frais de commodit√©."
          },
          "authorizedAmount": {
            "description": "This amount includes transactionAmount and all applicable fees (surcharge, application and convenience).",
            "$ref": "#/components/schemas/transactionAmount",
            "x-i18n-description-fr": "Ce montant comprend le transactionAmount et tous les frais applicables (suppl√©ment, application et commodit√©)."
          },
          "capturableAmount": {
            "$ref": "#/components/schemas/transactionAmount"
          },
          "amountDetails": {
            "$ref": "#/components/schemas/amountDetails"
          },
          "customerId": {
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "paymentStatus": {
            "$ref": "#/components/schemas/paymentStatus"
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/statusDetails"
          },
          "checkResults": {
            "$ref": "#/components/schemas/checkResults"
          },
          "cardOnFileResponse": {
            "$ref": "#/components/schemas/cardOnFileResponse"
          },
          "refunds": {
            "$ref": "#/components/schemas/refundDetails"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "self": {
        "description": "Lien de pagination pointant vers la page actuelle.",
        "type": "string",
        "format": "uri",
        "nullable": true
      },
      "first": {
        "description": "Lien de pagination pointant vers la premi√®re page.",
        "type": "string",
        "format": "uri",
        "nullable": true
      },
      "last": {
        "description": "Lien de pagination pointant vers la derni√®re page.",
        "type": "string",
        "format": "uri",
        "nullable": true
      },
      "next": {
        "description": "Lien de pagination pointant vers la page suivante.",
        "type": "string",
        "format": "uri",
        "nullable": true
      },
      "previous": {
        "description": "Lien de pagination pointant vers la page pr√©c√©dente.",
        "type": "string",
        "format": "uri",
        "nullable": true
      },
      "paymentResponseList": {
        "title": "paymentResponseList",
        "type": "object",
        "properties": {
          "data": {
            "description": "Liste des paiements.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/paymentResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "parameterError": {
        "title": "Parameter error",
        "description": "Erreur li√©e √† la propri√©t√© ou √† l‚Äôen-t√™te de la demande.",
        "type": "object",
        "properties": {
          "parameterName": {
            "type": "string",
            "description": "Nom de la propri√©t√© ou de l‚Äôen-t√™te. Peut contenir des chemins d‚Äôacc√®s imbriqu√©s s√©par√©s par '.'",
            "example": "address.postalCode"
          },
          "parameterValue": {
            "type": "string",
            "nullable": true,
            "description": "Repr√©sentation de cha√Æne de valeur de propri√©t√© ou d‚Äôen-t√™te.",
            "example": "MAP3J8"
          },
          "reasonCode": {
            "type": "string",
            "description": "Raison qui a d√©clench√© l‚Äôerreur.",
            "enum": [
              "INVALID_FORMAT",
              "REQUIRED_FIELD",
              "INVALID_VALUE"
            ],
            "example": "INVALID_FORMAT"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true,
            "description": "Message lisible par l‚Äôhomme de l‚Äôerreur de param√®tre.",
            "example": "Required properties are missing from object: postalCode."
          }
        }
      },
      "error": {
        "description": "D√©tails de la r√©ponse d‚Äôerreur.",
        "properties": {
          "type": {
            "description": "R√©f√©rence d‚ÄôURI qui identifie le type de probl√®me.  Id√©alement, il devrait s‚Äôagir d‚Äôune URL stable pour la documentation des d√©tails de ce type d‚Äôerreur, mais il peut √©galement s‚Äôagir d‚Äôun URN.  Si rien ne peut √™tre fourni, une valeur ¬´¬†about¬†:blank¬†¬ª est renvoy√©e.\n",
            "type": "string",
            "format": "uri",
            "example": "https://developer.moneris.com/docs/error-codes"
          },
          "title": {
            "description": "Un r√©sum√© court et lisible par l‚Äôhomme du type de probl√®me.   Il NE DEVRAIT PAS changer d‚Äôune occurrence √† l‚Äôautre du probl√®me, sauf √† des fins de localisation\n",
            "type": "string",
            "example": "INSUFFICIENT_FUNDS",
            "nullable": true
          },
          "status": {
            "description": "il transmet le code d‚Äô√©tat HTTP utilis√© pour la commodit√© du consommateur.\n",
            "type": "integer",
            "format": "int32",
            "minimum": 100,
            "maximum": 505,
            "nullable": true
          },
          "detail": {
            "description": "Un message lisible par l‚Äôhomme fournissant plus de d√©tails sur l‚Äôerreur. Pour les erreurs de carte, ces messages peuvent √™tre affich√©s √† vos utilisateurs.\n",
            "type": "string",
            "example": "Funds are insufficient to execute the operation.",
            "nullable": true
          },
          "instance": {
            "description": "R√©f√©rence d‚ÄôURI qui identifie l‚Äôoccurrence sp√©cifique du probl√®me. En r√®gle g√©n√©rale, cela se r√©sout en une ressource qui peut inclure plus de d√©tails sur le probl√®me.\n",
            "type": "string",
            "example": "/payments/12f3e0a8-1d68-2b86-dd30-4ca51bb66e10",
            "format": "uri",
            "nullable": true
          },
          "category": {
            "description": "Type d‚Äôerreur renvoy√©. \n - `API_ERROR` : cela se produit en raison d‚Äôun probl√®me intermittent.  \n - `IDEMPOTENCY_ERROR` : la cl√© d‚Äôidempotence a d√©j√† √©t√© utilis√©e.\n - `INVALID_REQUEST_ERROR` : les donn√©es fournies dans la demande ne sont pas valides.\n - `DECLINED_ERROR` : La transaction a √©t√© refus√©e par l‚Äô√©metteur.\n - `UNAUTHORIZED_ERROR` : l‚Äôappelant n‚Äôest pas authentifi√© ou n‚Äôest pas autoris√© √† ex√©cuter l‚Äôop√©ration en cours.\n - `INTERNAL_SERVER_ERROR` : Un probl√®me interne avec nos serveurs s‚Äôest produit.\n",
            "enum": [
              "API_ERROR",
              "IDEMPOTENCY_ERROR",
              "INVALID_REQUEST_ERROR",
              "DECLINED_ERROR",
              "UNAUTHORIZED_ERROR",
              "INTERNAL_SERVER_ERROR"
            ],
            "type": "string",
            "example": "DECLINED_ERROR"
          },
          "errors": {
            "type": "array",
            "description": "Liste des erreurs de validation lorsque la cat√©gorie d‚Äôerreur est INVALID_REQUEST_ERROR.",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/parameterError"
            },
            "example": [
              {
                "parameterName": "address.postalCode",
                "parameterValue": "MAP3J8",
                "reasonCode": "invalid_format"
              }
            ]
          }
        },
        "title": "API Error",
        "type": "object"
      },
      "idempotencyKey": {
        "type": "string",
        "description": "Identificateur unique requis pour le traitement des demandes idempotentes. \n\nRemarque : Moneris encourage l‚Äôutilisation de la version 4 de l‚ÄôUUID dans les API comme cl√© d‚Äôidempotence.\n",
        "minLength": 1,
        "maxLength": 36,
        "example": "6q5w4e7r8t9y"
      },
      "cardNumber": {
        "type": "string",
        "description": "Num√©ro de carte de cr√©dit/d√©bit du client (num√©ro de compte principal).",
        "minLength": 14,
        "maxLength": 16,
        "example": 4444111122223333
      },
      "cardSecurityCode": {
        "type": "string",
        "pattern": "[0-9]*",
        "description": "Valeur CVD situ√©e sur la carte de cr√©dit. La valeur CVD (fournie par le titulaire de la carte) ne doit √™tre transmise qu‚Äô√† la passerelle de paiement. En aucun cas, ils ne peuvent √™tre stock√©s pour une utilisation ult√©rieure ou affich√©s dans le cadre des informations de re√ßu.",
        "minLength": 3,
        "maxLength": 4,
        "example": 123
      },
      "paymentMethodCard": {
        "type": "object",
        "description": "D√©tails du mode de paiement par carte de cr√©dit/d√©bit/carte-cadeau.",
        "properties": {
          "cardNumber": {
            "$ref": "#/components/schemas/cardNumber"
          },
          "expiryMonth": {
            "$ref": "#/components/schemas/expiryMonth"
          },
          "expiryYear": {
            "$ref": "#/components/schemas/expiryYear"
          },
          "cardSecurityCode": {
            "$ref": "#/components/schemas/cardSecurityCode"
          }
        },
        "required": [
          "cardNumber",
          "expiryMonth",
          "expiryYear",
          "cardSecurityCode"
        ]
      },
      "token": {
        "type": "string",
        "description": "Ce champ est cr√©√© lorsqu‚Äôun jeton temporaire est cr√©√© et renvoy√©. Il s‚Äôagit d‚Äôun identificateur de profil unique et d‚Äôune valeur obligatoire pour les transactions de jetons temporaires.",
        "minLength": 25,
        "maxLength": 28,
        "example": "ot-HCUeCFtXJfEZSSUqvUJk0"
      },
      "paymentMethodData": {
        "title": "paymentMethodData",
        "type": "object",
        "description": "D√©tails du mode de paiement",
        "properties": {
          "paymentMethodType": {
            "$ref": "#/components/schemas/paymentMethodType"
          },
          "card": {
            "$ref": "#/components/schemas/paymentMethodCard"
          },
          "temporaryToken": {
            "$ref": "#/components/schemas/token"
          },
          "permanentToken": {
            "$ref": "#/components/schemas/token"
          }
        },
        "required": [
          "paymentMethodType"
        ]
      },
      "paymentMethodRequest": {
        "title": "paymentMethodRequest",
        "description": "D√©tails du mode de paiement.\n\nRemarque : Si cette option est d√©finie, cela entra√Ænera la cr√©ation d‚Äôun mode de paiement tel que d√©fini dans l‚ÄôAPI du mode de paiement.\n",
        "type": "object",
        "nullable": true,
        "properties": {
          "cardholderInformation": {
            "$ref": "#/components/schemas/cardholderInformation"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/contactDetails"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/address"
          },
          "paymentMethodData": {
            "$ref": "#/components/schemas/paymentMethodData"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "paymentMethodData"
        ]
      },
      "automaticCapture": {
        "type": "boolean",
        "description": "Cet indicateur est utilis√© pour remplacer le type de transaction de paiement par d√©faut activ√© sur le profil du marchand. Oui (par d√©faut) fera en sorte que Moneris saisira le paiement lorsqu‚Äôil est autoris√©. Non, Moneris devra retenir les fonds lorsque le paiement est autoris√©.",
        "default": true
      },
      "threeDSecureAuthenticationValue": {
        "type": "string",
        "description": "La valeur de v√©rification de l‚Äôauthentification du titulaire de carte (CAVV), la valeur d‚Äôauthentification du titulaire de compte (AAV) et la valeur de v√©rification American Express (AEVV) sont les valeurs qui permettent √† Visa, Mastercard et American Express de valider l‚Äôint√©grit√© des donn√©es de transaction Visa Secure, Mastercard Identity Check et American Express SafeKey. Ces valeurs sont renvoy√©es de l‚Äô√©metteur au commer√ßant une fois l‚Äôauthentification effectu√©e. Le commer√ßant int√®gre ensuite la valeur CAVV/AAV/AEVV dans la demande d‚Äôautorisation √† l‚Äôaide du type de transaction Achat ou Pr√©-autorisation avec 3-D Secure.",
        "maxLength": 50,
        "example": 109260000719349
      },
      "threeDSecureVersion": {
        "type": "string",
        "description": "Obligatoire en cas d‚Äôenvoi d‚Äôune transaction 3-D Secure version 2.0+. Par d√©faut, V2.1 si aucune valeur n‚Äôest fournie.",
        "maxLength": 10,
        "example": 2.2
      },
      "threeDSecureServerTransactionId": {
        "type": "string",
        "description": "Obligatoire en cas d‚Äôenvoi d‚Äôune transaction en version 3-D Secure 2.0+. Les donn√©es sont obtenues √† partir d‚Äôune transaction de demande de recherche Cavv ou de demande d‚Äôauthentification MPI 3DS",
        "maxLength": 36,
        "format": "uuid",
        "example": "ad9b0eda-bf9b-4288-b188-9467993603e1"
      },
      "threeDSecureDirectoryServerTransactionId": {
        "type": "string",
        "description": "Identificateur de transaction unique universel attribu√© par le serveur d‚Äôannuaire 3DS (DS) pour identifier une transaction unique.",
        "maxLength": 36,
        "format": "uuid",
        "example": "ad9b0eda-bf9b-4288-b188-9467993603e1"
      },
      "threeDSecureData": {
        "description": "Donn√©es relatives √† 3-D Secure",
        "type": "object",
        "properties": {
          "threeDSecureAuthenticationValue": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationValue"
          },
          "threeDSecureVersion": {
            "$ref": "#/components/schemas/threeDSecureVersion"
          },
          "threeDSecureServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureServerTransactionId"
          },
          "threeDSecureDirectoryServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureDirectoryServerTransactionId"
          }
        }
      },
      "paymentIndicator": {
        "type": "string",
        "description": "Indique l‚Äôutilisation actuelle ou pr√©vue des informations d‚Äôidentification",
        "enum": [
          "UNSCHEDULED_COF",
          "RECURRING",
          "MERCHANT_INITIATED",
          "VARIABLE_RECURRING",
          "CUSTOMER_INITIATED"
        ],
        "example": "UNSCHEDULED_COF"
      },
      "paymentInformation": {
        "type": "string",
        "description": "Indique s‚Äôil s‚Äôagit de la premi√®re transaction ou d‚Äôune transaction ult√©rieure de la s√©rie",
        "enum": [
          "FIRST",
          "SUBSEQUENT"
        ],
        "example": "FIRST"
      },
      "ipv4": {
        "type": "string",
        "format": "ipv4",
        "description": "Protocole Internet version 4 (IPv4).",
        "example": "104.75.173.179",
        "nullable": true
      },
      "ipv6": {
        "type": "string",
        "format": "ipv6",
        "description": "Protocole Internet version 6 (IPv6).",
        "example": "2600:1401:2::8a",
        "nullable": true
      },
      "createPaymentRequest": {
        "title": "paymentRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "amount": {
            "description": "This amount excludes surcharge, application and converience fee.",
            "$ref": "#/components/schemas/transactionAmount",
            "x-i18n-description-fr": "Ce montant ne comprend pas les frais suppl√©mentaires, les frais de dossier et les frais de conversion."
          },
          "amountDetails": {
            "nullable": true,
            "description": "D√©tails suppl√©mentaires sur le montant",
            "type": "object",
            "properties": {
              "subTotalAmount": {
                "$ref": "#/components/schemas/subTotalAmount"
              },
              "tipAmount": {
                "$ref": "#/components/schemas/tipAmount"
              }
            }
          },
          "customerId": {
            "nullable": true,
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentMethodId": {
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodRequest"
          },
          "storePaymentMethod": {
            "$ref": "#/components/schemas/storePaymentMethod"
          },
          "ecommerceIndicator": {
            "description": "Cat√©gorie de transaction de commerce √©lectronique en cours de traitement.  Lorsqu‚Äôelle est renvoy√©e dans le responese, elle peut √™tre diff√©rente de la valeur envoy√©e dans la demande au cas o√π la transaction aurait √©t√© d√©class√©e par l‚Äô√©metteur.\n",
            "type": "string",
            "enum": [
              "MAIL_TELEPHONE_ORDER_SINGLE",
              "MAIL_TELEPHONE_ORDER_RECURRING",
              "MAIL_TELEPHONE_ORDER_INSTALMENT",
              "MAIL_TELEPHONE_ORDER_UNKNOWN",
              "AUTHENTICATED_ECOMMERCE",
              "NON_AUTHENTICATED_ECOMMERCE",
              "SSL_MERCHANT"
            ],
            "example": "AUTHENTICATED_ECOMMERCE",
            "default": "SSL_MERCHANT"
          },
          "automaticCapture": {
            "$ref": "#/components/schemas/automaticCapture"
          },
          "customData": {
            "nullable": true,
            "description": "Le marchand peut envoyer des m√©tadonn√©es personnalis√©es avec la transaction dans cet objet. Moneris fera √©cho √† ces valeurs en r√©ponse.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "minLength": 1,
              "maxLength": 50
            },
            "maxProperties": 10
          },
          "dynamicDescriptor": {
            "nullable": true,
            "type": "string",
            "description": "Description d√©finie par le commer√ßant envoy√©e pour chaque transaction et qui appara√Ætra sur le relev√© de carte de cr√©dit.  \nEn fonction de l‚Äô√©metteur de la carte, le relev√© affichera g√©n√©ralement le descripteur dynamique ajout√© au nom commercial existant du commer√ßant, s√©par√© par le caract√®re ¬´ / ¬ª.  \n\nRemarque : La longueur combin√©e du nom commercial du commer√ßant, de la barre oblique ¬´ / ¬ª et du descripteur dynamique ne doit pas d√©passer 22 caract√®res.\n",
            "minLength": 1,
            "maxLength": 20,
            "example": "moneris"
          },
          "threeDSecureAuthenticationId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "threeDSecureData": {
            "$ref": "#/components/schemas/threeDSecureData"
          },
          "cardOnFileInformation": {
            "nullable": true,
            "type": "object",
            "description": "Contains fields related to the Credential on File (CoF) ",
            "properties": {
              "paymentIndicator": {
                "$ref": "#/components/schemas/paymentIndicator"
              },
              "paymentInformation": {
                "$ref": "#/components/schemas/paymentInformation"
              },
              "issuerId": {
                "$ref": "#/components/schemas/issuerId"
              },
              "originalAmount": {
                "$ref": "#/components/schemas/originalAmount"
              }
            },
            "required": [
              "paymentIndicator",
              "paymentInformation",
              "issuerId"
            ],
            "example": {
              "paymentIndicator": "CUSTOMER_INITIATED",
              "paymentInformation": "FIRST",
              "issuerId": "123asd"
            },
            "x-i18n-description-fr": "Contient des champs li√©s aux informations d‚Äôidentification enregistr√©es (CoF) "
          },
          "ipv4": {
            "$ref": "#/components/schemas/ipv4"
          },
          "ipv6": {
            "$ref": "#/components/schemas/ipv6"
          }
        },
        "required": [
          "idempotencyKey",
          "amount"
        ]
      },
      "cancelPaymentRequest": {
        "title": "cancelPaymentRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "reason": {
            "nullable": true,
            "description": "Raison du remboursement.",
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "Defective product"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "completionRequest": {
        "title": "completionRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "amount": {
            "description": "Amount for the transaction",
            "$ref": "#/components/schemas/transactionAmount",
            "x-i18n-description-fr": "Montant de la transaction"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "paymentMethodResponseList": {
        "description": "Liste des modes de paiement",
        "type": "object",
        "title": "paymentMethodResponseList",
        "properties": {
          "data": {
            "description": "Liste des modes de paiement",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/paymentMethodResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "createPaymentMethodRequest": {
        "title": "paymentMethodRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "cardholderInformation": {
            "$ref": "#/components/schemas/cardholderInformation"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/contactDetails"
          },
          "billingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L‚Äôadresse postale, y compris la rue, la ville, la province et le code postal.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "paymentMethodData": {
            "$ref": "#/components/schemas/paymentMethodData"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey",
          "paymentMethodData"
        ]
      },
      "updatePaymentMethodRequest": {
        "title": "paymentMethodRequest",
        "type": "object",
        "properties": {
          "cardholderInformation": {
            "$ref": "#/components/schemas/cardholderInformation"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/contactDetails"
          },
          "billingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L‚Äôadresse postale, y compris la rue, la ville, la province et le code postal.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "paymentMethodData": {
            "$ref": "#/components/schemas/paymentMethodData"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "paymentMethodData"
        ]
      },
      "refundStatus": {
        "type": "string",
        "description": "Description de l‚Äô√©tat du remboursement.",
        "enum": [
          "DECLINED",
          "DECLINED_RETRY",
          "PROCESSING",
          "SUCCEEDED"
        ],
        "example": "SUCCEEDED"
      },
      "reason": {
        "type": "string",
        "description": "Raison du remboursement.",
        "minLength": 1,
        "maxLength": 100,
        "example": "Defective product",
        "nullable": true
      },
      "refundResponse": {
        "title": "refundResponse",
        "type": "object",
        "properties": {
          "refundId": {
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "refundAmount": {
            "$ref": "#/components/schemas/refundAmount"
          },
          "customerId": {
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "status": {
            "$ref": "#/components/schemas/refundStatus"
          },
          "statusDetails": {
            "$ref": "#/components/schemas/statusDetails"
          },
          "reason": {
            "$ref": "#/components/schemas/reason"
          },
          "cardOnFileResponse": {
            "$ref": "#/components/schemas/cardOnFileResponse"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "refundResponseList": {
        "title": "refundResponseList",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/refundResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "dynamicDescriptor": {
        "type": "string",
        "description": "Description d√©finie par le commer√ßant envoy√©e pour chaque transaction et qui appara√Ætra sur le relev√© de carte de cr√©dit.  \nEn fonction de l‚Äô√©metteur de la carte, le relev√© affichera g√©n√©ralement le descripteur dynamique ajout√© au nom commercial existant du commer√ßant, s√©par√© par le caract√®re ¬´ / ¬ª.  \n\nRemarque : La longueur combin√©e du nom commercial du commer√ßant, de la barre oblique ¬´ / ¬ª et du descripteur dynamique ne doit pas d√©passer 22 caract√®res.\n",
        "minLength": 1,
        "maxLength": 20,
        "example": "moneris"
      },
      "createRefundRequest": {
        "title": "refundRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "paymentId": {
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "refundAmount": {
            "$ref": "#/components/schemas/refundAmount"
          },
          "customerId": {
            "nullable": true,
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "dynamicDescriptor": {
            "$ref": "#/components/schemas/dynamicDescriptor"
          },
          "cofInformation": {
            "nullable": true,
            "type": "object",
            "description": "Contient des champs li√©s aux informations d‚Äôidentification enregistr√©es (CoF) ",
            "properties": {
              "paymentIndicator": {
                "$ref": "#/components/schemas/paymentIndicator"
              },
              "paymentInformation": {
                "$ref": "#/components/schemas/paymentInformation"
              },
              "issuerId": {
                "$ref": "#/components/schemas/issuerId"
              },
              "originalAmount": {
                "$ref": "#/components/schemas/originalAmount"
              }
            },
            "required": [
              "paymentIndicator",
              "paymentInformation",
              "issuerId"
            ],
            "example": {
              "paymentIndicator": "CUSTOMER_INITIATED",
              "paymentInformation": "FIRST",
              "issuerId": "123asd"
            }
          },
          "ipv4": {
            "$ref": "#/components/schemas/ipv4"
          },
          "ipv6": {
            "$ref": "#/components/schemas/ipv6"
          },
          "ecommerceIndicator": {
            "$ref": "#/components/schemas/ecommerceIndicator"
          },
          "reason": {
            "$ref": "#/components/schemas/reason"
          }
        },
        "required": [
          "idempotencyKey",
          "refundAmount",
          "paymentId"
        ]
      },
      "validationStatus": {
        "type": "string",
        "description": "Description du statut de validation.",
        "enum": [
          "CANCELED",
          "DECLINED",
          "DECLINED_RETRY",
          "PROCESSING",
          "SUCCEEDED"
        ],
        "example": "SUCCEEDED"
      },
      "validationResponse": {
        "title": "createValidationResponse",
        "type": "object",
        "properties": {
          "validationId": {
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "validationStatus": {
            "$ref": "#/components/schemas/validationStatus"
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/statusDetails"
          },
          "checkResults": {
            "$ref": "#/components/schemas/checkResults"
          },
          "cardOnFileResponse": {
            "$ref": "#/components/schemas/cardOnFileResponse"
          },
          "customerId": {
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "validationsResponseList": {
        "title": "validationsResponseList",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/validationResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "createValidationRequest": {
        "title": "Creates a Validation Request",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "paymentMethodId": {
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodRequest"
          },
          "storePaymentMethod": {
            "$ref": "#/components/schemas/storePaymentMethod"
          },
          "customerId": {
            "nullable": true,
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "cardOnFileInformation": {
            "nullable": true,
            "type": "object",
            "description": "Contient des champs li√©s aux informations d‚Äôidentification enregistr√©es (CoF) ",
            "properties": {
              "paymentIndicator": {
                "$ref": "#/components/schemas/paymentIndicator"
              },
              "paymentInformation": {
                "$ref": "#/components/schemas/paymentInformation"
              },
              "issuerId": {
                "$ref": "#/components/schemas/issuerId"
              },
              "originalAmount": {
                "$ref": "#/components/schemas/originalAmount"
              }
            },
            "required": [
              "paymentIndicator",
              "paymentInformation",
              "issuerId"
            ],
            "example": {
              "paymentIndicator": "CUSTOMER_INITIATED",
              "paymentInformation": "FIRST",
              "issuerId": "123asd"
            }
          },
          "dynamicDescriptor": {
            "$ref": "#/components/schemas/dynamicDescriptor"
          },
          "threeDSecureAuthenticationId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "threeDSecureData": {
            "$ref": "#/components/schemas/threeDSecureData"
          },
          "ecommerceIndicator": {
            "description": "Cat√©gorie de transaction de commerce √©lectronique en cours de traitement.  Lorsqu‚Äôelle est renvoy√©e dans le responese, elle peut √™tre diff√©rente de la valeur envoy√©e dans la demande au cas o√π la transaction aurait √©t√© d√©class√©e par l‚Äô√©metteur.\n",
            "type": "string",
            "enum": [
              "MAIL_TELEPHONE_ORDER_SINGLE",
              "MAIL_TELEPHONE_ORDER_RECURRING",
              "MAIL_TELEPHONE_ORDER_INSTALMENT",
              "MAIL_TELEPHONE_ORDER_UNKNOWN",
              "AUTHENTICATED_ECOMMERCE",
              "NON_AUTHENTICATED_ECOMMERCE",
              "SSL_MERCHANT"
            ],
            "example": "AUTHENTICATED_ECOMMERCE",
            "default": "SSL_MERCHANT"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "firstName": {
        "type": "string",
        "description": "Pr√©nom du client",
        "minLength": 1,
        "maxLength": 30,
        "example": "John",
        "nullable": true
      },
      "middleName": {
        "type": "string",
        "description": "Deuxi√®me pr√©nom du client",
        "minLength": 1,
        "maxLength": 30,
        "example": "J.",
        "nullable": true
      },
      "lastName": {
        "type": "string",
        "description": "Nom de famille du client",
        "minLength": 1,
        "maxLength": 30,
        "example": "Doe",
        "nullable": true
      },
      "phoneNumber": {
        "type": "string",
        "description": "Num√©ro de t√©l√©phone du client",
        "minLength": 1,
        "maxLength": 30,
        "example": "1-866-319-7450",
        "nullable": true
      },
      "email": {
        "type": "string",
        "format": "iso-639",
        "description": "Adresse e-mail du client. Voir https://www.rfc-editor.org/rfc/rfc5322",
        "minLength": 1,
        "maxLength": 320,
        "example": "moneris@moneris.com",
        "nullable": true
      },
      "customerResponse": {
        "title": "customerResponse",
        "type": "object",
        "properties": {
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "customerId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/middleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/address"
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/phoneNumber"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "customerResponseList": {
        "title": "customerResponseList",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/customerResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "createCustomerRequest": {
        "title": "customerRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/middleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          },
          "address": {
            "nullable": true,
            "type": "object",
            "description": "L‚Äôadresse postale, y compris la rue, la ville, la province et le code postal.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L‚Äôadresse postale, y compris la rue, la ville, la province et le code postal.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Num√©ro de t√©l√©phone du client",
            "minLength": 1,
            "maxLength": 30,
            "example": "1-866-319-7450"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "iso-639",
            "description": "Adresse e-mail du client. Voir https://www.rfc-editor.org/rfc/rfc5322",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "customerRequest": {
        "title": "customerRequest",
        "type": "object",
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/middleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          },
          "address": {
            "nullable": true,
            "type": "object",
            "description": "L‚Äôadresse postale, y compris la rue, la ville, la province et le code postal.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L‚Äôadresse postale, y compris la rue, la ville, la province et le code postal.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Num√©ro de t√©l√©phone du client",
            "minLength": 1,
            "maxLength": 30,
            "example": "1-866-319-7450"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "iso-639",
            "description": "Adresse e-mail du client. Voir https://www.rfc-editor.org/rfc/rfc5322",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "threeDSecureMessageCategory": {
        "type": "string",
        "description": "Identifie la cat√©gorie du message pour un cas d‚Äôutilisation sp√©cifique.",
        "enum": [
          "PAYMENT",
          "NON_PAYMENT"
        ],
        "example": "PAYMENT"
      },
      "threeDSecureDeviceChannel": {
        "type": "string",
        "description": "Indique le type d‚Äôinterface de canal utilis√© pour lancer la transaction.",
        "enum": [
          "BROWSER",
          "THREE_D_SECURE_REQUESTOR_INITIATED"
        ],
        "example": "BROWSER"
      },
      "threeDSecureRequestType": {
        "type": "string",
        "nullable": true,
        "description": "Type de paiement qui a d√©clench√© la v√©rification.\n  - **CARDHOLDER** : Le paiement initi√© par le titulaire de la carte.\n  - **RECURRING** : Paiement r√©current.\n",
        "enum": [
          "CARDHOLDER",
          "RECURRING"
        ],
        "example": "CARDHOLDER"
      },
      "threeDSecureRecurringFrequency": {
        "type": "integer",
        "format": "int32",
        "description": "Indique le nombre minimum de jours entre les autorisations.",
        "minimum": 1,
        "maximum": 9999,
        "example": 1,
        "nullable": true
      },
      "threeDSecureRecurringExpiry": {
        "type": "string",
        "description": "Date √† partir de laquelle aucune autre autorisation ne sera effectu√©e. Il s‚Äôagit d‚Äôun champ obligatoire pour les transactions r√©currentes, nous vous sugg√©rons de le d√©finir √† une valeur raisonnablement √©lev√©e si vous n‚Äôavez pas de date d‚Äôexpiration d√©finie.",
        "format": "date",
        "minLength": 10,
        "maxLength": 10,
        "example": "2019-07-30",
        "nullable": true
      },
      "threeDSecureRequestorInitiatedIndicator": {
        "type": "string",
        "description": "Indique le type de requ√™te 3RI. Cet √©l√©ment de donn√©es fournit des informations suppl√©mentaires √† l‚ÄôACS pour d√©terminer la meilleure approche pour traiter une demande 3RI.",
        "enum": [
          "RECURRING_TRANSACTION",
          "INSTALMENT_TRANSACTION",
          "ADD_CARD",
          "MAINTAIN_CARD_INFORMATION",
          "ACCOUNT_VERIFICATION",
          "SPLIT_DELAYED_SHIPMENT",
          "TOP_UP",
          "MAIL_ORDER",
          "TELEPHONE_ORDER",
          "WHITELIST_STATUS_CHECK",
          "OTHER_PAYMENT"
        ],
        "example": "RECURRING_TRANSACTION",
        "nullable": true
      },
      "threeDSecurePriorAuthenticationData": {
        "type": "string",
        "description": "Donn√©es qui documentent et soutiennent un processus d‚Äôauthentification sp√©cifique. Dans la version actuelle de la sp√©cification, cet √©l√©ment de donn√©es n‚Äôest pas d√©fini en d√©tail, mais l‚Äôintention est que pour chaque m√©thode d‚Äôauthentification du demandeur 3DS, ce champ contienne des donn√©es que l‚ÄôACS peut utiliser pour v√©rifier le processus d‚Äôauthentification. Dans les futures versions de la sp√©cification, ces d√©tails devraient √™tre inclus.",
        "maxLength": 2048,
        "example": 12345678,
        "nullable": true
      },
      "threeDSecurePriorAuthenticationMethod": {
        "type": "string",
        "description": "M√©canisme utilis√© par le Titulaire de la Carte pour s‚Äôauthentifier pr√©alablement aupr√®s du Demandeur 3DS.",
        "enum": [
          "FRICTIONLESS_AUTHENTICATION_OCCURRED_BY_ACS",
          "CARDHOLDER_CHALLENGE_OCCURRED_BY_ACS",
          "AVS_VERIFIED",
          "OTHER_ISSUER_METHODS"
        ],
        "example": "AVS_VERIFIED",
        "nullable": true
      },
      "threeDSecurePriorAuthenticationTimestamp": {
        "type": "string",
        "description": "Date et heure en UTC de l‚Äôauthentification pr√©c√©dente du titulaire de la carte.",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z",
        "nullable": true
      },
      "threeDSecurePriorAuthenticationReference": {
        "type": "string",
        "description": "Cet √©l√©ment de donn√©es fournit des renseignements suppl√©mentaires au SCA afin de d√©terminer la meilleure approche pour traiter une demande.",
        "maxLength": 36,
        "example": 12345678,
        "nullable": true
      },
      "threeDSecurePriorAuthenticationInformation": {
        "type": "object",
        "description": "Informations sur la mani√®re dont le demandeur 3DS a authentifi√© le titulaire de la carte dans le cadre d‚Äôune transaction 3DS pr√©c√©dente.",
        "nullable": true,
        "properties": {
          "threeDSecurePriorAuthenticationData": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationData"
          },
          "threeDSecurePriorAuthenticationMethod": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationMethod"
          },
          "threeDSecurePriorAuthenticationTimestamp": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationTimestamp"
          },
          "threeDSecurePriorAuthenticationReference": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationReference"
          }
        }
      },
      "threeDSecureCompletionIndicator": {
        "type": "string",
        "description": "Indique si la recherche de carte 3DS s‚Äôest termin√©e avec succ√®s.  Une recherche de carte r√©ussie augmente les chances d‚Äôune authentification de carte sans friction.\n  - **SUCCESS** : Termin√© avec succ√®s.\n  - **FAILURE** : La recherche de carte 3DS a √©chou√©, mais a √©chou√©.\n  - **UNAVAILABLE** : Indisponible ou non tent√©.\n",
        "enum": [
          "SUCCESS",
          "FAILURE",
          "UNAVAILABLE"
        ],
        "example": "SUCCESS",
        "nullable": true
      },
      "threeDSecureChallengeRequested": {
        "type": "string",
        "description": "Indique si une demande d‚Äôauthentification bas√©e sur le navigateur est demand√©e pour cette transaction. La norme est ¬´ aucune pr√©f√©rence ¬ª",
        "enum": [
          "NO_PREFERENCE",
          "NO_CHALLENGE_REQUESTED",
          "CHALLENGE_REQUESTED_MANDATE"
        ],
        "example": "NO_PREFERENCE",
        "nullable": true,
        "default": "NO_PREFERENCE"
      },
      "threeDSecureChallengeWindowSize": {
        "type": "string",
        "description": "Dimensions de la fen√™tre du d√©fi qui a √©t√© affich√©e au titulaire de la carte dans le navigateur.\n  - **X_SMALL** : 250 x 400\n  - **SMALL** : 390 x 400\n  - **MEDIUM** : 500 x 600\n  - **LARGE** : 600 x 400\n  - **FULL_SCREEN** : Plein √©cran\n",
        "enum": [
          "X_SMALL",
          "SMALL",
          "MEDIUM",
          "LARGE",
          "FULL_SCREEN"
        ],
        "example": "FULL_SCREEN",
        "nullable": true
      },
      "browserUserAgent": {
        "type": "string",
        "description": "Contenu exact de l‚Äôen-t√™te HTTP de l‚Äôagent utilisateur. Remarque, si la longueur totale du User-Agent envoy√© par le navigateur d√©passe 2048 caract√®res, tronquez la partie exc√©dentaire.",
        "maxLength": 2048,
        "example": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})",
        "nullable": true
      },
      "browserJavaEnabled": {
        "type": "boolean",
        "description": "Indique si Java est activ√© dans le navigateur",
        "example": true
      },
      "browserJavascriptEnabled": {
        "type": "boolean",
        "description": "Indique si Javascript est activ√© dans le navigateur",
        "example": true
      },
      "browserScreenHeight": {
        "type": "integer",
        "format": "int32",
        "description": "Hauteur totale de l‚Äô√©cran du titulaire de la carte en pixels.",
        "minimum": 0,
        "maximum": 999999,
        "example": 1080,
        "nullable": true
      },
      "browserScreenWidth": {
        "type": "integer",
        "format": "int32",
        "description": "Largeur totale de l‚Äô√©cran du titulaire de la carte en pixels.",
        "minimum": 0,
        "maximum": 999999,
        "example": 1920,
        "nullable": true
      },
      "language": {
        "type": "string",
        "format": "iso-639",
        "description": "Code de langue √† deux lettres bas√© sur la norme ISO 639-1. Voir https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes",
        "minLength": 2,
        "maxLength": 2,
        "example": "en"
      },
      "authenticationRequest": {
        "title": "authenticationRequest",
        "description": "Utilisez la demande d‚Äôauthentification 3DS pour lancer le processus de validation de la carte et de l‚Äôidentit√© du titulaire de la carte. Cette demande prend en charge toutes les m√©thodes d‚Äôauthentification 3DS, y compris l‚Äôauthentification 3RI (3DS Requestor Initiat) et l‚Äôauthentification d√©coupl√©e. Les champs device_channel et message_category contr√¥ler le type de requ√™te 3DS effectu√©e. Pour effectuer une authentification 3DS standard avec une exp√©rience de navigateur de titulaire de carte, envoyez device_channel = 02 pour BRW. Le r√©sultat de cette demande d√©termine si la carte prend en charge les fonctionnalit√©s 3DS et, le cas √©ch√©ant, si la transaction utilise un flux sans friction ou un flux d‚Äôauthentification. Pour effectuer une authentification initi√©e par le demandeur 3DS sans exp√©rience de navigateur du titulaire de carte, envoyez device_channel = 03 pour 3RI. Tous les champs li√©s √† l‚Äôinvite d‚Äôauthentification du navigateur ne sont plus obligatoires, mais les autres champs conditionnels pour 3RI deviennent obligatoires.",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "cardLookupId": {
            "nullable": true,
            "type": "string",
            "description": "Affiche un identificateur unique requis pour identifier les ressources d‚ÄôAPI.\nRemarque : Ce champ est obligatoire pour toutes les transactions ult√©rieures futures, y compris les remboursements, les corrections, les ach√®vements, les annulations, etc.\n",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "amount": {
            "$ref": "#/components/schemas/transactionAmount"
          },
          "cardholderName": {
            "$ref": "#/components/schemas/cardholderName"
          },
          "cardholderEmail": {
            "$ref": "#/components/schemas/email"
          },
          "cardholderPhoneNumber": {
            "$ref": "#/components/schemas/phoneNumber"
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L‚Äôadresse postale, y compris la rue, la ville, la province et le code postal.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "billingAddress": {
            "type": "object",
            "description": "L‚Äôadresse postale, y compris la rue, la ville, la province et le code postal.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "required": [
              "streetNumber",
              "streetName",
              "city",
              "province",
              "postalCode",
              "country"
            ]
          },
          "paymentMethodId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodRequest"
          },
          "threeDSecureMessageCategory": {
            "$ref": "#/components/schemas/threeDSecureMessageCategory"
          },
          "threeDSecureDeviceChannel": {
            "$ref": "#/components/schemas/threeDSecureDeviceChannel"
          },
          "threeDSecureRequestType": {
            "$ref": "#/components/schemas/threeDSecureRequestType"
          },
          "threeDSecureRecurringFrequency": {
            "$ref": "#/components/schemas/threeDSecureRecurringFrequency"
          },
          "threeDSecureRecurringExpiry": {
            "$ref": "#/components/schemas/threeDSecureRecurringExpiry"
          },
          "threeDSecureRequestorInitiatedIndicator": {
            "$ref": "#/components/schemas/threeDSecureRequestorInitiatedIndicator"
          },
          "threeDSecurePriorAuthenticationInformation": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationInformation"
          },
          "threeDSecureNotificationUrl": {
            "nullable": true,
            "type": "string",
            "description": "URL d‚Äôencodage compl√®te du syst√®me qui re√ßoit le message de r√©ponse ou le message d‚Äôerreur.",
            "minLength": 1,
            "maxLength": 256,
            "example": "https%3A%2F%2Fdeveloper.moneris.com%2F"
          },
          "threeDSecureCompletionIndicator": {
            "$ref": "#/components/schemas/threeDSecureCompletionIndicator"
          },
          "threeDSecureChallengeRequested": {
            "$ref": "#/components/schemas/threeDSecureChallengeRequested"
          },
          "threeDSecureChallengeWindowSize": {
            "$ref": "#/components/schemas/threeDSecureChallengeWindowSize"
          },
          "browserIpAddress": {
            "$ref": "#/components/schemas/ipv4"
          },
          "browserUserAgent": {
            "$ref": "#/components/schemas/browserUserAgent"
          },
          "browserJavaEnabled": {
            "$ref": "#/components/schemas/browserJavaEnabled"
          },
          "browserJavascriptEnabled": {
            "$ref": "#/components/schemas/browserJavascriptEnabled"
          },
          "browserScreenHeight": {
            "$ref": "#/components/schemas/browserScreenHeight"
          },
          "browserScreenWidth": {
            "$ref": "#/components/schemas/browserScreenWidth"
          },
          "browserLanguage": {
            "$ref": "#/components/schemas/language"
          }
        },
        "required": [
          "amount",
          "billingAddress",
          "cardholderEmail",
          "cardholderName",
          "cardholderPhoneNumber",
          "idempotencyKey",
          "threeDSecureDeviceChannel",
          "threeDSecureMessageCategory"
        ]
      },
      "threeDSecureMessageType": {
        "type": "string",
        "description": "Indique le type de r√©ponse dans le flux 3DS",
        "enum": [
          "AUTHENTICATION_RESPONSE_MESSAGE",
          "AUTHENTICATION_REQUEST_MESSAGE",
          "PREPARATION_RESPONSE_MESSAGE",
          "PREPARATION_REQUEST_MESSAGE",
          "CHALLENGE_RESPONSE_MESSAGE",
          "CHALLENGE_REQUEST_MESSAGE",
          "RESULTS_REQUEST_MESSAGE",
          "RESULTS_RESPONSE_MESSAGE",
          "ERROR_MESSAGE"
        ],
        "example": "CHALLENGE_RESPONSE_MESSAGE"
      },
      "threeDSecureTransactionStatus": {
        "type": "string",
        "description": "Indique le r√©sultat de la transaction.  Pour plus d‚Äôinformations sur ce domaine, veuillez consulter https://docs.3dsecure.io/3dsv2/specification_220.html#attr-ARes-transStatus\n  - **AUTHENTICATED** : Authentification/v√©rification du compte r√©ussie.\n  - **AUTHENTICATION_ATTEMPTED** : Tentatives de traitement effectu√©es ; Non authentifi√©/v√©rifi√©, mais une preuve de tentative d‚Äôauthentification/v√©rification est fournie.\n  - **CHALLENGE_AUTHENTICATION_REQUIRED** : D√©fi requis¬†; Une authentification suppl√©mentaire est requise √† l‚Äôaide des fichiers 'challengeUrl' et 'challengeData'.\n  - **CHALLENGE_DECOUPLED_AUTHENTICATION_CONFIRMED** : D√©fi requis¬†; Authentification d√©coupl√©e confirm√©e. \n  - **TECHNICAL_ISSUE** : L‚Äôauthentification/v√©rification du compte n‚Äôa pas pu √™tre effectu√©e ; Probl√®me technique ou autre.\n  - **NOT_AUTHENTICATED** : Non authentifi√© / Compte non v√©rifi√© ; Transaction refus√©e.\n  - **REJECTED** : Authentification/v√©rification de compte rejet√©e ; L‚Äô√©metteur rejette l‚Äôauthentification/v√©rification et demande que l‚Äôautorisation ne soit pas tent√©e.\n  - **CHALLENGE_PREFERENCE_ACKNOWLEDGED** : √† titre informatif seulement¬†; Reconnaissance de la pr√©f√©rence du demandeur 3DS.\n",
        "enum": [
          "AUTHENTICATED",
          "AUTHENTICATION_ATTEMPTED",
          "CHALLENGE_AUTHENTICATION_REQUIRED",
          "CHALLENGE_DECOUPLED_AUTHENTICATION_CONFIRMED",
          "TECHNICAL_ISSUE",
          "NOT_AUTHENTICATED",
          "REJECTED",
          "CHALLENGE_PREFERENCE_ACKNOWLEDGED"
        ]
      },
      "threeDSecureTransactionStatusReasonCode": {
        "type": "string",
        "description": "Code de r√©ponse de l‚Äô√©tat des transactions 3-D Secure.\n",
        "nullable": true,
        "maxLength": 3,
        "example": 1
      },
      "threeDSecureTransactionStatusReasonDescription": {
        "type": "string",
        "description": "Fournit des informations sur la raison pour laquelle le champ Statut de la transaction a la valeur sp√©cifi√©e.",
        "enum": [
          "ACQUIRER_EXEMPTION_ACCEPTED",
          "ACS_MAXIMUM_CHALLENGES",
          "ACS_TECHNICAL_ISSUE",
          "ACS_TIMED_OUT",
          "AUTHENTICATION_ATTEMPTED_BUT_NOT_PERFORMED_BY_THE_CARDHOLDER",
          "CARDHOLDER_NOT_ENROLLED_IN_SERVICE",
          "CARD_AUTHENTICATION_FAILED",
          "CAVV_IS_INCLUDED_IN_RESPONSE",
          "CHALLENGE_CANCELATION_INDICATOR_POPULATED",
          "CHALLENGE_MANDATE_REQUESTED_BUT_COULD_NOT_BE_PERFORMED",
          "DECOUPLED_AUTHENTICATION_REQUIRED_BY_ACS_BUT_NOT_REQUESTED_BY_THREE_D_SECURE_REQUESTOR",
          "DECOUPLED_AUTHENTICATION_WAS_PROVIDED_INSUFFICIENT_TIME_TO_AUTHENTICATE_CARDHOLDER_ACS_WILL_NOT_MAKE_ATTEMPT",
          "DS_DROPPED_REASON_CODE_RECEIVED_FROM_ACS",
          "EXCEEDS_AUTHENTICATION_FREQUENCY_LIMIT",
          "EXPIRED_CARD",
          "HIGH_CONFIDENCE",
          "INTERNAL_ERROR_WHILE_GENERATING_CAVV",
          "INVALID_CARD_NUMBER",
          "INVALID_RESPONSE_FROM_ACS",
          "INVALID_TRANSACTION",
          "ISSUER_SCA_REQUIRED",
          "LOW_CONFIDENCE",
          "MEDIUM_CONFIDENCE",
          "NON_PAYMENT_TRANSACTION_NOT_SUPPORTED",
          "NO_CARD_RECORD",
          "PROTOCOL_VERSION_NOT_SUPPORTED_BY_ACS",
          "REQUESTED_PROGRAM_NOT_SUPPORTED_BY_THE_ACS",
          "SECURITY_FAILURE",
          "STOLEN_CARD",
          "SUSPECTED_FRAUD",
          "SYSTEM_ERROR_RESPONSE_FROM_ACS",
          "THREE_D_SECURE_REQUESTOR_DECOUPLED_MAX_EXPIRY_TIME_EXCEEDED",
          "THREE_RI_TRANSACTION_NOT_SUPPORTED",
          "TRANSACTION_IS_EXCLUDED_FROM_ATTEMPTS_PROCESSING",
          "TRANSACTION_NOT_PERMITTED_TO_CARDHOLDER",
          "TRANSACTION_PROCESSED_AS_IDENTITY_CHECK_INSIGHTS",
          "TRANSACTION_TIMED_OUT_AT_THE_ACS",
          "UNKNOWN_DEVICE",
          "UNSUPPORTED_DEVICE",
          "VERY_HIGH_CONFIDENCE",
          "VMID_NOT_ELIGIBLE_FOR_REQUESTED_PROGRAM"
        ],
        "example": "RECURRING_TRANSACTION"
      },
      "threeDSecureTransactionStatusReason": {
        "type": "object",
        "description": "Fournit des informations sur la raison pour laquelle le champ Statut de la transaction a la valeur sp√©cifi√©e.",
        "properties": {
          "threeDSecureTransactionStatusReasonCode": {
            "$ref": "#/components/schemas/threeDSecureTransactionStatusReasonCode"
          },
          "threeDSecureTransactionStatusReasonDescription": {
            "$ref": "#/components/schemas/threeDSecureTransactionStatusReasonDescription"
          }
        }
      },
      "threeDSecureChallengeUrl": {
        "type": "string",
        "description": "Si le transStatus est ¬´ C ¬ª, ce champ sera renseign√© avec l‚ÄôURL pour POST le challengeData afin de cr√©er l‚Äô√©cran de d√©fi du titulaire de carte",
        "format": "uri",
        "minLength": 1,
        "maxLength": 2048,
        "example": "https://developer.moneris.com/"
      },
      "threeDSecureChallengeData": {
        "type": "string",
        "description": "Cha√Æne qui doit √™tre post√©e sur l‚ÄôURL du d√©fi pour cr√©er l‚Äô√©cran de d√©fi",
        "minLength": 1,
        "maxLength": 2048
      },
      "threeDSecureChallengeCompletionIndicator": {
        "type": "string",
        "description": "Indicateur de l‚Äô√©tat du cycle de d√©fi ACS et si le d√©fi est termin√© ou n√©cessitera des messages suppl√©mentaires.",
        "enum": [
          "YES",
          "NO"
        ]
      },
      "threeDSecureAccessControlServerTransactionId": {
        "type": "string",
        "description": "Obligatoire en cas d‚Äôenvoi d‚Äôune transaction en version 3-D Secure 2.0+. Les donn√©es sont obtenues √† partir d‚Äôune transaction de demande de recherche Cavv ou de demande d‚Äôauthentification MPI 3DS",
        "maxLength": 36,
        "format": "uuid",
        "example": "ad9b0eda-bf9b-4288-b188-9467993603e1"
      },
      "threeDSecureAuthenticationType": {
        "type": "string",
        "description": "Indique le type de m√©thode d‚Äôauthentification que l‚Äô√©metteur utilisera pour d√©fier le titulaire de la carte, que ce soit dans le message ARes ou ce qui a √©t√© utilis√© par l‚ÄôACS dans le message RReq.",
        "enum": [
          "STATIC",
          "DYNAMIC",
          "OOB",
          "DECOUPLED"
        ],
        "example": "DYNAMIC"
      },
      "threeDSecureAuthenticationTimestamp": {
        "type": "string",
        "description": "Date et heure en UTC de l‚Äôauthentification du titulaire de la carte.",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z"
      },
      "authenticationResponse": {
        "title": "authenticationResponse",
        "type": "object",
        "properties": {
          "threeDSecureAuthenticationId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "cardLookupId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "threeDSecureMessageType": {
            "$ref": "#/components/schemas/threeDSecureMessageType"
          },
          "threeDSecureTransactionStatus": {
            "$ref": "#/components/schemas/threeDSecureTransactionStatus"
          },
          "threeDSecureTransactionStatusReason": {
            "$ref": "#/components/schemas/threeDSecureTransactionStatusReason"
          },
          "ecommerceIndicator": {
            "$ref": "#/components/schemas/ecommerceIndicator"
          },
          "threeDSecureChallengeUrl": {
            "$ref": "#/components/schemas/threeDSecureChallengeUrl"
          },
          "threeDSecureChallengeData": {
            "$ref": "#/components/schemas/threeDSecureChallengeData"
          },
          "threeDSecureAuthenticationValue": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationValue"
          },
          "threeDSecureChallengeCompletionIndicator": {
            "$ref": "#/components/schemas/threeDSecureChallengeCompletionIndicator"
          },
          "threeDSecureServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureServerTransactionId"
          },
          "threeDSecureDirectoryServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureDirectoryServerTransactionId"
          },
          "threeDSecureAccessControlServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureAccessControlServerTransactionId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "threeDSecureCardholderInformation": {
            "type": "string",
            "description": "Texte fourni par l‚ÄôAEC/l‚Äô√©metteur au titulaire de la carte lors d‚Äôune transaction sans friction ou d√©coupl√©e. L‚Äô√©metteur peut fournir des informations au titulaire de la carte.",
            "maxLength": 128,
            "example": "Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx."
          },
          "threeDSecureVersion": {
            "$ref": "#/components/schemas/threeDSecureVersion"
          },
          "threeDSecureAuthenticationType": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationType"
          },
          "threeDSecureAuthenticationTimestamp": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationTimestamp"
          }
        }
      },
      "threeDSecureChallengeResponseData": {
        "type": "string",
        "description": "Donn√©es de r√©ponse du d√©fi",
        "example": "TBD"
      },
      "lookupRequest": {
        "title": "challengeFlowRequest",
        "description": "L‚Äôint√©r√™t du flux 3-D Secure est de v√©rifier que le v√©ritable titulaire de la carte fait partie de l‚Äôautorisation. Le flux de d√©fi est utilis√© pour pr√©senter un moyen d‚Äôauthentifier le titulaire de la carte √† l‚Äôaide, par exemple, d‚Äôun OTP ou d‚Äôune m√©thode d‚Äôidentification f√©d√©r√©e.",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "threeDSecureChallengeResponseData": {
            "$ref": "#/components/schemas/threeDSecureChallengeResponseData"
          }
        },
        "required": [
          "idempotencyKey",
          "threeDSecureChallengeResponseData"
        ]
      },
      "threeDSecureNotificationUrl": {
        "type": "string",
        "description": "URL d‚Äôencodage compl√®te du syst√®me qui re√ßoit le message de r√©ponse ou le message d‚Äôerreur.",
        "minLength": 1,
        "maxLength": 256,
        "example": "https%3A%2F%2Fdeveloper.moneris.com%2F"
      },
      "cardLookupRequest": {
        "title": "cardLookupRequest",
        "description": "La demande card_lookup v√©rifie l‚Äôapplicabilit√© de 3DS sur la carte et renvoie la version 3DS prise en charge par la carte. Il renvoie √©galement l‚ÄôURL de la m√©thode 3DS et les donn√©es de la m√©thode 3DS pour l‚Äôenvoi d‚Äôun POST d‚Äôempreinte d‚Äôappareil √† l‚ÄôACS de l‚Äô√©metteur.",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "paymentMethodId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodRequest"
          },
          "threeDSecureNotificationUrl": {
            "$ref": "#/components/schemas/threeDSecureNotificationUrl"
          }
        },
        "required": [
          "idempotencyKey",
          "threeDSecureNotificationUrl"
        ]
      },
      "threeDSecureMethodUrl": {
        "type": "string",
        "format": "uri",
        "description": "Renvoie l‚ÄôURL de l‚Äô√©tape de prise d‚Äôempreinte de l‚Äôappareil.",
        "minLength": 1,
        "maxLength": 256,
        "example": "https://developer.moneris.com/"
      },
      "threeDSecureMethodData": {
        "type": "string",
        "description": "Donn√©es qui doivent √™tre publi√©es sur l‚ÄôURL de la m√©thode 3DS pour l‚Äô√©tape de prise d‚Äôempreinte de l‚Äôappareil.",
        "minLength": 1,
        "maxLength": 254
      },
      "cardLookupResponse": {
        "title": "cardLookupResponse",
        "type": "object",
        "properties": {
          "cardLookupId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "threeDSecureServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureServerTransactionId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "threeDSecureVersion": {
            "$ref": "#/components/schemas/threeDSecureVersion"
          },
          "threeDSecureMethodUrl": {
            "$ref": "#/components/schemas/threeDSecureMethodUrl"
          },
          "threeDSecureMethodData": {
            "$ref": "#/components/schemas/threeDSecureMethodData"
          }
        }
      }
    },
    "parameters": {
      "apiVersion": {
        "in": "header",
        "name": "Api-Version",
        "required": false,
        "example": "2023-11-01",
        "description": "Version de l‚ÄôAPI. \n\nDoit √™tre fourni par le biais de la cha√Æne de requ√™te ou d‚Äôen-t√™tes. \n",
        "schema": {
          "$ref": "#/components/schemas/apiVersion"
        }
      },
      "correlationId": {
        "in": "header",
        "name": "X-Correlation-Id",
        "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4",
        "description": "Corr√®le une s√©rie de requ√™tes au sein d‚Äôun m√™me flux.\n\nRemarque : Cet identifiant est g√©n√©r√© par Moneris avec chaque demande ou r√©ponse, s‚Äôil n‚Äôexiste pas. \nLes commer√ßants doivent faire √©cho √† la valeur avec chaque demande qui fait partie du flux d‚Äôappels.\n",
        "required": false,
        "schema": {
          "type": "string",
          "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4"
        }
      },
      "prm-common_apiVersion": {
        "in": "query",
        "name": "api_version",
        "required": false,
        "example": "2023-11-01",
        "description": "Version de l‚ÄôAPI du point de terminaison. \n\nDoit √™tre fourni par le biais de la cha√Æne de requ√™te ou d‚Äôen-t√™tes. \n",
        "schema": {
          "$ref": "#/components/schemas/apiVersion"
        }
      },
      "merchantId": {
        "in": "header",
        "name": "X-Merchant-Id",
        "example": 123456789101,
        "description": "Code d‚Äôidentification de treize caract√®res. \n\nRemarque : Ce code est fourni par Moneris et est requis pour identifier le commer√ßant qui effectue la transaction.\n",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/merchantId"
        }
      },
      "pageBeforeCursor": {
        "in": "query",
        "name": "cursor",
        "description": "Curseur de pagination pour renvoyer les √©l√©ments situ√©s apr√®s.",
        "required": false,
        "example": "d41d8cd98f00b204e9800998ecf8427e",
        "schema": {
          "type": "string",
          "example": "d41d8cd98f00b204e9800998ecf8427e"
        }
      },
      "pageLimit": {
        "in": "query",
        "name": "limit",
        "description": "Nombre maximal d‚Äô√©l√©ments √† renvoyer dans la r√©ponse.",
        "example": 50,
        "schema": {
          "type": "integer",
          "default": 10,
          "minimum": 1,
          "maximum": 100,
          "example": 50
        }
      },
      "createdFrom": {
        "name": "created_from",
        "in": "query",
        "description": "Renvoie les √©l√©ments cr√©√©s apr√®s la date sp√©cifi√©e. La valeur par d√©faut est il y a trois mois √† partir d‚Äôaujourd‚Äôhui.",
        "required": false,
        "example": "2019-07-30T06:43:40.252Z",
        "schema": {
          "$ref": "#/components/schemas/dateTime"
        }
      },
      "createdTo": {
        "name": "created_to",
        "in": "query",
        "description": "Renvoie les √©l√©ments cr√©√©s avant la date sp√©cifi√©e. \n\nPar d√©faut, la date et l‚Äôheure actuelles sont et doit √™tre post√©rieure √† la date ¬´ created_from ¬ª. \n",
        "required": false,
        "example": "2019-10-30T06:43:40.252Z",
        "schema": {
          "$ref": "#/components/schemas/dateTime"
        }
      },
      "paymentId": {
        "in": "path",
        "name": "payment-id",
        "description": "L‚Äôidentifiant unique du paiement",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "isExpiring": {
        "name": "is_expiring",
        "in": "query",
        "description": "Retourne les modes de paiement dont les cartes expirent au cours du mois civil en cours et du mois civil suivant.",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "paymentMethodId": {
        "name": "payment-method-id",
        "in": "path",
        "description": "ID du mode de paiement",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "refundId": {
        "in": "path",
        "name": "refund-id",
        "description": "L‚Äôidentifiant unique du remboursement",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "validationId": {
        "in": "path",
        "name": "validation-id",
        "description": "L‚Äôidentifiant unique de la Validation",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "customerId": {
        "in": "path",
        "name": "customer-id",
        "description": "L‚Äôidentifiant unique du client",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "authenticationId": {
        "in": "path",
        "name": "authentication-id",
        "description": "L‚Äôidentifiant unique de l‚Äôauthentification",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      }
    },
    "headers": {
      "apiVersion": {
        "description": "Version de l‚ÄôAPI.",
        "example": "2023-11-01",
        "schema": {
          "type": "string"
        }
      },
      "correlationId": {
        "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4",
        "description": "Corr√®le une s√©rie de requ√™tes au sein d‚Äôun m√™me flux. \n\nRemarque : Cet identifiant est g√©n√©r√© par Moneris avec chaque demande ou r√©ponse, s‚Äôil n‚Äôexiste pas, et il est recommand√© au commer√ßant de faire √©cho √† la valeur.  \n",
        "schema": {
          "type": "string",
          "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4"
        }
      },
      "sunset": {
        "example": "2025-07-30T06:43:40.252Z",
        "description": "Optionnel.\n\nIndique que l‚ÄôURI de ressource sera mis hors service au moment sp√©cifi√© √† l‚Äôavenir. \nPlus de d√©tails sont disponibles sur [RFC 8594](https://www.rfc-editor.org/rfc/rfc8594.html)\n",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "rateLimitCount": {
        "description": "Nombre maximal de requ√™tes que le client peut effectuer dans cette fen√™tre.",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 1000
      },
      "rateLimitRemaining": {
        "description": "Le nombre de requ√™tes autoris√©es dans la fen√™tre actuelle.",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 0
      },
      "rateLimitReset": {
        "description": "Temps relatif en secondes lorsque la fen√™tre de limite de d√©bit sera r√©initialis√©e.",
        "schema": {
          "type": "integer",
          "format": "int32"
        },
        "example": 3600
      }
    },
    "examples": {
      "InvalidListRequestErrorResponse": {
        "summary": "Invalid query parameter",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_QUERY_PARAMETER",
          "status": 400,
          "detail": null,
          "instance": null,
          "category": "INVALID_REQUEST_ERROR",
          "errors": [
            {
              "parameter": "created_from",
              "value": "2019/07/30",
              "reasonCode": "INVALID_FORMAT"
            }
          ]
        }
      },
      "regularPurchaseWithPaymentMethodId": {
        "summary": "Regular Purchase With Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "storePaymentMethod": "DO_NOT_STORE",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithPaymentMethod": {
        "summary": "Regular Purchase With Payment Method Details",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodData": {
              "paymentMethodType": "CARD",
              "card": {
                "cardNumber": "4444111122223333",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardSecurityCode": 123
              }
            }
          },
          "storePaymentMethod": "DO_NOT_STORE",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "preAuthorizationWithPaymentMethodId": {
        "summary": "Pre-Authorization With Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "storePaymentMethod": "DO_NOT_STORE",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": false,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "PurchaseCompletedResponse": {
        "summary": "Successful Purchase",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "SUCCEEDED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 0,
            "responseCode": 1,
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "refunds": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "PreauthorizationCompletedResponse": {
        "summary": "Successful Pre-Authorization",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "AUTHORIZED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 27,
            "responseCode": 0,
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "refunds": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "DeclineErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "EXCESS PIN TRIES",
          "status": 400,
          "detail": "052-38 - PIN retries exceeded",
          "instance": "/payments/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "DECLINED_ERROR",
          "errors": []
        }
      },
      "InvalidRequestErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_ADDRESS",
          "status": 400,
          "detail": null,
          "instance": null,
          "category": "INVALID_REQUEST_ERROR",
          "errors": [
            {
              "reasonCode": "INVALID_FORMAT",
              "parameterName": "address.postalCode",
              "parameterValue": "MAP3J8"
            }
          ]
        }
      },
      "IdempotencyRequestErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "IDEMPOTENCY_KEY_ALREADY_EXISTS",
          "status": 409,
          "detail": null,
          "instance": null,
          "category": "IDEMPOTENCY_ERROR",
          "errors": []
        }
      },
      "PurchaseDeclinedResponse": {
        "summary": "Purchase Declined",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "DECLINED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 421,
            "responseCode": 43,
            "message": "Stolen card, pick up.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "refunds": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "PurchaseDeclinedRetryResponse": {
        "summary": "Purchase Declined with Retry",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "DECLINED_RETRY",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 416,
            "responseCode": 79,
            "message": "Life cycle declines.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "refunds": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "PurchaseCanceledResponse": {
        "summary": "Purchase Canceled",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "CANCELED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 0,
            "responseCode": 1,
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "refunds": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "InvalidPurchaseErrorResponse": {
        "summary": "Purchase already completed",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_STATE",
          "status": 400,
          "detail": "Invalid purchase state",
          "instance": "/payments/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "INVALID_REQUEST_ERROR"
        }
      },
      "cardPaymentMethodRequest": {
        "summary": "Card Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "cardholderInformation": {
            "cardholderName": "John Doe",
            "companyName": "SP Ltd"
          },
          "contactDetails": {
            "phoneNumber": "1-866-319-7450",
            "email": "moneris@moneris.com"
          },
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor Street West",
            "city": "Toronto",
            "province": "Ontario",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethodData": {
            "paymentMethodType": "CARD",
            "card": {
              "cardNumber": "4444111122223333",
              "expiryMonth": 1,
              "expiryYear": 2023,
              "cardSecurityCode": 123
            }
          },
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "temporaryTokenPaymentMethodRequest": {
        "summary": "Temporary Token Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "cardholderInformation": null,
          "contactDetails": null,
          "billingAddress": null,
          "paymentMethodData": {
            "paymentMethodType": "TEMPORARY_TOKEN",
            "temporaryToken": "ot-HCUeCFtXJfEZSSUqvUJk0"
          },
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "permanentTokenPaymentMethodRequest": {
        "summary": "Permanent Token Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "cardholderInformation": null,
          "contactDetails": null,
          "billingAddress": null,
          "paymentMethodData": {
            "paymentMethodType": "PERMANENT_TOKEN",
            "permanentToken": "HCUeCFtXJfEZSSUqvUJk0"
          },
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "updateCardPaymentMethodRequest": {
        "summary": "Card Payment Method request",
        "value": {
          "cardholderInformation": {
            "cardholderName": "John Doe",
            "companyName": "SP Ltd"
          },
          "contactDetails": {
            "phoneNumber": "1-866-319-7450",
            "email": "moneris@moneris.com"
          },
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor Street West",
            "city": "Toronto",
            "province": "Ontario",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethodData": {
            "paymentMethodType": "CARD",
            "card": {
              "cardNumber": "4444111122223333",
              "expiryMonth": 12,
              "expiryYear": 2033,
              "cardSecurityCode": 123
            }
          },
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "updateTemporaryTokenPaymentMethodRequest": {
        "summary": "Temporary Token Payment Method request",
        "value": {
          "cardholderInformation": null,
          "contactDetails": null,
          "billingAddress": null,
          "paymentMethodData": {
            "paymentMethodType": "TEMPORARY_TOKEN",
            "temporaryToken": "ot-HCUeCFtXJfEZSSUqvXYl9"
          }
        }
      },
      "updatePermanentTokenPaymentMethodRequest": {
        "summary": "Permanent Token Payment Method request",
        "value": {
          "cardholderInformation": null,
          "contactDetails": null,
          "billingAddress": null,
          "paymentMethodData": {
            "paymentMethodType": "PERMANENT_TOKEN",
            "permanentToken": "HCUeCFtXJfEZSSUqvFRu9"
          },
          "customData": {
            "property1": "string"
          }
        }
      },
      "concurrentRequestErrorResponse": {
        "summary": "Concurrent Access Error",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "CONCURRENCY_ERROR",
          "status": 409,
          "detail": null,
          "instance": null,
          "category": "API_ERROR",
          "errors": []
        }
      },
      "matchingRefundRequest": {
        "summary": "Matching Refund",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "refundAmount": {
            "amount": 1600,
            "currency": "CAD"
          },
          "dynamicDescriptor": "moneris",
          "cofInformation": null,
          "ipv4": "104.75.173.179",
          "ipv6": "2600:1401:2::8a",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "reason": "Defective product",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "InvalidRefundErrorResponse": {
        "summary": "Invalid Matching Refund",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_PAYMENT",
          "status": 400,
          "detail": "Invalid payment Id or payment Id not found",
          "instance": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "category": "INVALID_REQUEST_ERROR"
        }
      },
      "exp-refundResponse_DeclineErrorResponse": {
        "summary": "Refund declined",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "EXPIRED CARD",
          "status": 400,
          "detail": "051-54 - Expired Card",
          "instance": "/refunds/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "DECLINED_ERROR",
          "errors": []
        }
      },
      "SucceededRefundResponse": {
        "summary": "Refund succeeded",
        "value": {
          "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "paymentMethod": {
            "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": {
              "phoneNumber": "1-866-319-7450",
              "email": "moneris@moneris.com"
            },
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2023,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": "2019-07-30T06:43:40.252Z",
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "refundAmount": {
            "amount": 1600,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "status": "SUCCEEDED",
          "statusDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 1,
            "responseCode": 1,
            "message": "SUCCESS",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "reason": "Defective product",
          "cardOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "DeclinedRefundResponse": {
        "summary": "Refund succeeded",
        "value": {
          "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "paymentMethod": {
            "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": {
              "phoneNumber": "1-866-319-7450",
              "email": "moneris@moneris.com"
            },
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2023,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": "2019-07-30T06:43:40.252Z",
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "refundAmount": {
            "amount": 1600,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "status": "DECLINED",
          "statusDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 51,
            "responseCode": 54,
            "message": "Expired Card",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "reason": "Defective product",
          "cardOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "validationRequestWithPaymentMethodId": {
        "summary": "With Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "storePaymentMethod": "DO_NOT_STORE",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "validationRequestWithPaymentMethodData": {
        "summary": "With Payment Method Details",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "Gallenkamp"
            },
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodData": {
              "paymentMethodType": "CARD",
              "card": {
                "cardNumber": "4444111122223333",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardSecurityCode": 123
              }
            }
          },
          "storePaymentMethod": "DO_NOT_STORE",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "exp-validationResponse_DeclineErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "EXCESS PIN TRIES",
          "status": 400,
          "detail": "052-38 - PIN retries exceeded",
          "instance": "/validations/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "DECLINED_ERROR",
          "errors": []
        }
      },
      "ValidationSucceededResponse": {
        "summary": "Successful Validation",
        "value": {
          "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": null,
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "validationStatus": "SUCCEEDED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 0,
            "responseCode": 1,
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "ValidationDeclinedRetryResponse": {
        "summary": "Validation Declined with Retry",
        "value": {
          "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": null,
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "validationStatus": "DECLINED_RETRY",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 416,
            "responseCode": 79,
            "message": "Life cycle declines.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "ValidationDeclinedResponse": {
        "summary": "Validation Declined",
        "value": {
          "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": null,
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "validationStatus": "DECLINED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 421,
            "responseCode": 43,
            "message": "Stolen card, pick up.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      }
    },
    "responses": {
      "invalidListbadRequest": {
        "description": "Mauvaise demande.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "idempotency_error": {
                "$ref": "#/components/examples/InvalidListRequestErrorResponse"
              }
            }
          }
        }
      },
      "unauthorized": {
        "description": "Non autoris√©. L‚Äôutilisateur ne dispose pas d‚Äôune cl√© API ou d‚Äôun jeton d‚Äôacc√®s valide.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "example": "Bearer, error=\"invalid_token\""
            }
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "UNAUTHORIZED_REQUEST",
              "status": 401,
              "detail": null,
              "instance": null,
              "category": "UNAUTHORIZED_ERROR",
              "errors": []
            }
          }
        }
      },
      "forbidden": {
        "description": "Interdit. L‚Äôutilisateur n‚Äôest pas autoris√© √† acc√©der √† la ressource demand√©e.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "example": "Bearer, error=\"insufficient_scope\""
            }
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "FORBIDDEN_REQUEST",
              "status": 403,
              "detail": null,
              "instance": null,
              "category": "UNAUTHORIZED_ERROR",
              "errors": []
            }
          }
        }
      },
      "tooManyRequests": {
        "description": "Trop de requ√™tes",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/rateLimitReset"
          },
          "Retry-After": {
            "$ref": "#/components/headers/rateLimitReset"
          }
        }
      },
      "internalServer": {
        "description": "Erreur inattendue.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "INTERNAL_SERVER_ERROR",
              "status": 500,
              "detail": null,
              "instance": null,
              "category": "INTERNAL_SERVER_ERROR",
              "errors": []
            }
          }
        }
      },
      "notFound": {
        "description": "Introuvable.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "NOT_FOUND",
              "status": 404,
              "detail": null,
              "instance": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "category": "INVALID_REQUEST_ERROR",
              "errors": []
            }
          }
        }
      },
      "conflict": {
        "description": "La demande n‚Äôa pas pu √™tre termin√©e en raison d‚Äôun conflit avec l‚Äô√©tat de la ressource ou la cl√© d‚Äôidempotence existante.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "idempotency_error": {
                "$ref": "#/components/examples/IdempotencyRequestErrorResponse"
              }
            }
          }
        }
      },
      "badRequest": {
        "description": "Mauvaise demande.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "concurrencyConflict": {
        "description": "La demande n‚Äôa pas pu √™tre compl√©t√©e en raison d‚Äôun probl√®me d‚Äôacc√®s simultan√©.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "concurrency_error": {
                "$ref": "#/components/examples/concurrentRequestErrorResponse"
              }
            }
          }
        }
      }
    }
  }
}