openapi: 3.0.0
info:
  version: 3.0.0
  title: Moneris API
  description: Moneris API Platform
  termsOfService: https://www.moneris.com/en/legal/terms-of-use
  contact:
    url: https://api-developer.moneris.com
    email: UnifiedAPI@moneris.com
  license:
    name: Moneris
    url: https://developer.moneris.com/Agreements/Terms%20of%20Use
  x-audience: external-public
servers:
  - url: https://api.moneris.io
    description: Production server (uses live data)
  - url: https://api.sb.moneris.io
    description: Sandbox server (uses test data)
tags:
  - name: Payments
    description: Perform and Manage payments
  - name: Payment Methods
    description: Create and Manage payment methods
  - name: Refunds
    description: Perform and Manage payment refunds
  - name: Validations
    description: Perform and Manage card validations
  - name: Customers
    description: Perform and Manage customers
  - name: 3D Secure
    description: Perform and 3D Secure authentications against payment methods
  - name: Kount
    description: Perform and Manage Kount risk assessment inquiries
paths:
  /payments:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/merchantId'
    get:
      summary: List Payments
      description: Returns a paginated list of payments.
      operationId: getPayments
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payments
      parameters:
        - $ref: '#/components/parameters/pageBeforeCursor'
        - $ref: '#/components/parameters/pageLimit'
        - $ref: '#/components/parameters/createdFrom'
        - $ref: '#/components/parameters/createdTo'
      responses:
        '200':
          description: List of all payments
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentResponseList'
              example:
                data:
                  - paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    merchantId: '0123456789101'
                    orderId: 1q2w3e4r5t6t78
                    invoiceNumber: 1a2s3d45v6
                    transactionDateTime: '2019-07-30T06:43:40.252Z'
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    amount:
                      amount: 16000
                      currency: CAD
                    authorizedAmount:
                      amount: 16000
                      currency: CAD
                    capturableAmount:
                      amount: 0
                      currency: CAD
                    amountDetails: null
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    paymentMethod:
                      paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation: null
                      contactDetails: null
                      billingAddress: null
                      paymentMethodInformation:
                        paymentMethodType: CARD
                        paymentMethodSource: CARD
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2028
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                        storePaymentMethod: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: null
                      customData:
                        property1: string
                        property2: string
                    paymentStatus: SUCCEEDED
                    transactionDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: '00'
                      responseCode: '000'
                      message: approved
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    verificationDetails:
                      addressVerificationServiceResultCode: FULL_MATCH
                      cardSecurityCodeResultCode: MATCH
                      threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
                    credentialOnFileResponse: null
                    refundDetails: null
                    customData:
                      property1: string
                      property2: string
                  - paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAZ
                    merchantId: '0123456789101'
                    orderId: 1q2w3e4r5t6t78
                    invoiceNumber: 1a2s3d45v6
                    transactionDateTime: '2019-07-30T06:43:40.252Z'
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    amount:
                      amount: 16000
                      currency: CAD
                    authorizedAmount:
                      amount: 16000
                      currency: CAD
                    capturableAmount:
                      amount: 0
                      currency: CAD
                    amountDetails: null
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    paymentMethod:
                      paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation: null
                      contactDetails: null
                      billingAddress: null
                      paymentMethodInformation:
                        paymentMethodType: CARD
                        paymentMethodSource: CARD
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2028
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                        storePaymentMethod: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: null
                      customData:
                        property1: string
                        property2: string
                    paymentStatus: CANCELED
                    transactionDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: '00'
                      responseCode: '000'
                      message: approved
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    verificationDetails:
                      addressVerificationServiceResultCode: FULL_MATCH
                      cardSecurityCodeResultCode: MATCH
                      threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
                    credentialOnFileResponse: null
                    refundDetails: null
                    customData:
                      property1: string
                      property2: string
                  - paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAX
                    merchantId: '0123456789101'
                    orderId: 1q2w3e4r5t6t78
                    invoiceNumber: 1a2s3d45v6
                    transactionDateTime: '2019-07-30T06:43:40.252Z'
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    amount:
                      amount: 16000
                      currency: CAD
                    authorizedAmount:
                      amount: 0
                      currency: CAD
                    capturableAmount:
                      amount: 0
                      currency: CAD
                    amountDetails: null
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    paymentMethod:
                      paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation: null
                      contactDetails: null
                      billingAddress: null
                      paymentMethodInformation:
                        paymentMethodType: CARD
                        paymentMethodSource: CARD
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2028
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                        storePaymentMethod: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: null
                      customData:
                        property1: string
                        property2: string
                    paymentStatus: DECLINED
                    transactionDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: '43'
                      responseCode: '421'
                      message: Stolen card, pick up.
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    verificationDetails:
                      addressVerificationServiceResultCode: FULL_MATCH
                      cardSecurityCodeResultCode: MATCH
                      threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
                    credentialOnFileResponse: null
                    refundDetails: null
                    customData:
                      property1: string
                      property2: string
                self: /payments?cursor=d41d8cd98f00b&limit=50
                first: /payments?cursor=d41d8cd98f00b&limit=50
                last: /payments?cursor=d41d8cd98f00b&limit=50
                next: null
                previous: null
        '400':
          $ref: '#/components/responses/invalidListbadRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
    post:
      summary: Create Payment
      description: This operation is used to initiate a Payment.
      operationId: createPayments
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPaymentRequest'
            examples:
              regularPurchaseWithPaymentMethodId:
                $ref: '#/components/examples/regularPurchaseWithPaymentMethodId'
              regularPurchaseWithCardPaymentMethod:
                $ref: '#/components/examples/regularPurchaseWithCardPaymentMethod'
              regularPurchaseWithTemporaryPaymentMethod:
                $ref: '#/components/examples/regularPurchaseWithTemporaryPaymentMethod'
              regularPurchaseWithPermanentPaymentMethod:
                $ref: '#/components/examples/regularPurchaseWithPermanentPaymentMethod'
              regularPurchaseWithApplePayEncryptedPaymentMethod:
                $ref: '#/components/examples/regularPurchaseWithApplePayEncryptedPaymentMethod'
              regularPurchaseWithApplePayDecryptedPaymentMethod:
                $ref: '#/components/examples/regularPurchaseWithApplePayDecryptedPaymentMethod'
              regularPurchaseWithGooglePayEncryptedPaymentMethod:
                $ref: '#/components/examples/regularPurchaseWithGooglePayEncryptedPaymentMethod'
              regularPurchaseWithGooglePayDecryptedPaymentMethod:
                $ref: '#/components/examples/regularPurchaseWithGooglePayDecryptedPaymentMethod'
              preAuthorizationWithPaymentMethodId:
                $ref: '#/components/examples/preAuthorizationWithPaymentMethodId'
              preAuthorizationWithCardPaymentMethod:
                $ref: '#/components/examples/preAuthorizationWithCardPaymentMethod'
              preAuthorizationWithTemporaryToken:
                $ref: '#/components/examples/preAuthorizationWithTemporaryToken'
              preAuthorizationWithPermanentToken:
                $ref: '#/components/examples/preAuthorizationWithPermanentToken'
      responses:
        '201':
          description: Payment operation created successfully.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentResponse'
              examples:
                PurchaseCompleted:
                  $ref: '#/components/examples/PurchaseCompletedResponse'
                PreauthorizationCompletedResponse:
                  $ref: '#/components/examples/PreauthorizationCompletedResponse'
        '400':
          description: Failed Payment operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                invalid_request:
                  $ref: '#/components/examples/InvalidRequestErrorResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          description: Failed Payment operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                declined:
                  $ref: '#/components/examples/DeclineErrorResponse'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /payments/{payment-id}:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/paymentId'
      - $ref: '#/components/parameters/merchantId'
    get:
      summary: Retrieve Payment
      description: Retrieve a payment by its payment Id
      operationId: getPayment
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payments
      responses:
        '200':
          description: The payment corresponding to the provided `payment-id`
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentResponse'
              examples:
                succeeded:
                  $ref: '#/components/examples/PurchaseCompletedResponse'
                authorized:
                  $ref: '#/components/examples/PreauthorizationCompletedResponse'
                declined:
                  $ref: '#/components/examples/PurchaseDeclinedResponse'
                declined_retry:
                  $ref: '#/components/examples/PurchaseDeclinedRetryResponse'
                canceled:
                  $ref: '#/components/examples/PurchaseCanceledResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /payments/{payment-id}/cancel:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/paymentId'
      - $ref: '#/components/parameters/merchantId'
    post:
      summary: Cancel Payment
      description: Cancel a payment. This operation may not be possible if the payment has gone through.
      operationId: cancelPayment
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cancelPaymentRequest'
      responses:
        '200':
          description: Payment canceled successfully.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentResponse'
              example:
                paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                merchantId: '0123456789101'
                orderId: 1q2w3e4r5t6t78
                invoiceNumber: 1a2s3d45v6
                transactionDateTime: '2019-07-30T06:43:40.252Z'
                createdAt: '2019-07-30T06:43:40.252Z'
                modifiedAt: '2019-07-30T06:43:40.252Z'
                amount:
                  amount: 16000
                  currency: CAD
                authorizedAmount:
                  amount: 16000
                  currency: CAD
                capturableAmount:
                  amount: 0
                  currency: CAD
                amountDetails: null
                customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                paymentMethod:
                  paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                  merchantId: '0123456789101'
                  cardholderInformation: null
                  contactDetails: null
                  billingAddress: null
                  paymentMethodInformation:
                    paymentMethodType: CARD
                    paymentMethodSource: CARD
                    cardInformation:
                      bankIdentificationNumber: '123456'
                      lastFour: '1234'
                      expiryMonth: 1
                      expiryYear: 2028
                      cardBrand: MASTERCARD
                      cardType: CREDIT
                      cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                      issuer: RBC
                    paymentAccountReference: '11112222333344445555666677778'
                    storePaymentMethod: DO_NOT_STORE
                  createdAt: '2019-07-30T06:43:40.252Z'
                  modifiedAt: null
                  customData:
                    property1: string
                    property2: string
                paymentStatus: CANCELED
                transactionDetails:
                  transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                  isoResponseCode: '00'
                  responseCode: '000'
                  message: approved
                  ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                verificationDetails:
                  addressVerificationServiceResultCode: FULL_MATCH
                  cardSecurityCodeResultCode: MATCH
                  threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
                credentialOnFileResponse: null
                refundDetails: null
                customData:
                  property1: string
                  property2: string
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          description: Failed to cancel Payment operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                declined:
                  $ref: '#/components/examples/DeclineErrorResponse'
                invalid_request:
                  $ref: '#/components/examples/InvalidPurchaseErrorResponse'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /payments/{payment-id}/complete:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/paymentId'
      - $ref: '#/components/parameters/merchantId'
    post:
      summary: Complete Payment
      description: This will effectively capture a payment that has been authorized.
      operationId: completePayment
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/completionRequest'
            example:
              idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
              invoiceNumber: 1a2s3d45v6
              customData:
                property1: string
                property2: string
              amount:
                amount: 16000
                currency: CAD
      responses:
        '200':
          description: Payment completed successfully.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentResponse'
              example:
                paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                merchantId: '0123456789101'
                orderId: 1q2w3e4r5t6t78
                invoiceNumber: 1a2s3d45v6
                transactionDateTime: '2019-07-30T06:43:40.252Z'
                createdAt: '2019-07-30T06:43:40.252Z'
                modifiedAt: '2019-07-30T06:43:40.252Z'
                amount:
                  amount: 16000
                  currency: CAD
                authorizedAmount:
                  amount: 16000
                  currency: CAD
                capturableAmount:
                  amount: 0
                  currency: CAD
                amountDetails: null
                customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                paymentMethod:
                  paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                  merchantId: '0123456789101'
                  cardholderInformation: null
                  contactDetails: null
                  billingAddress: null
                  paymentMethodInformation:
                    paymentMethodType: CARD
                    paymentMethodSource: CARD
                    cardInformation:
                      bankIdentificationNumber: '123456'
                      lastFour: '1234'
                      expiryMonth: 1
                      expiryYear: 2028
                      cardBrand: MASTERCARD
                      cardType: CREDIT
                      cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                      issuer: RBC
                    paymentAccountReference: '11112222333344445555666677778'
                    storePaymentMethod: DO_NOT_STORE
                  createdAt: '2019-07-30T06:43:40.252Z'
                  modifiedAt: null
                  customData:
                    property1: string
                    property2: string
                paymentStatus: SUCCEEDED
                transactionDetails:
                  transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                  isoResponseCode: '00'
                  responseCode: '000'
                  message: approved
                  ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                verificationDetails:
                  addressVerificationServiceResultCode: FULL_MATCH
                  cardSecurityCodeResultCode: MATCH
                  threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
                credentialOnFileResponse: null
                refundDetails: null
                customData: null
        '400':
          description: Failed to complete purchase
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                declined:
                  $ref: '#/components/examples/DeclineErrorResponse'
                invalid_request:
                  $ref: '#/components/examples/InvalidPurchaseErrorResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          description: Failed Payment operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                declined:
                  $ref: '#/components/examples/DeclineErrorResponse'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /payment-methods:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/merchantId'
    get:
      summary: List payment methods
      description: Retrieves a paginated list of payment methods.
      operationId: getPaymentMethods
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payment Methods
      parameters:
        - $ref: '#/components/parameters/pageBeforeCursor'
        - $ref: '#/components/parameters/pageLimit'
        - $ref: '#/components/parameters/createdFrom'
        - $ref: '#/components/parameters/createdTo'
      responses:
        '200':
          description: Paginated list of payment methods
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentMethodResponseList'
              example:
                data:
                  - paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    merchantId: '0123456789101'
                    cardholderInformation: null
                    contactDetails: null
                    billingAddress: null
                    paymentMethodInformation:
                      paymentMethodType: CARD
                      paymentMethodSource: CARD
                      cardInformation:
                        bankIdentificationNumber: '123456'
                        lastFour: '1234'
                        expiryMonth: 1
                        expiryYear: 2028
                        cardBrand: MASTERCARD
                        cardType: CREDIT
                        cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                        issuer: RBC
                      paymentAccountReference: '11112222333344445555666677778'
                      storePaymentMethod: DO_NOT_STORE
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    customData:
                      property1: string
                      property2: string
                  - paymentMethodId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    merchantId: '0123456789101'
                    cardholderInformation:
                      cardholderName: John Doe
                      companyName: SP Ltd
                    contactDetails:
                      phoneNumber: '+18663197450'
                      email: moneris@moneris.com
                    billingAddress:
                      unitNumber: 123A
                      streetNumber: '3300'
                      streetName: Bloor Street West
                      city: Toronto
                      province: 'ON'
                      postalCode: M8X 2X2
                      country: CA
                    paymentMethodInformation:
                      paymentMethodType: CARD
                      paymentMethodSource: TEMPORARY_TOKEN
                      cardInformation:
                        bankIdentificationNumber: '123456'
                        lastFour: '1234'
                        expiryMonth: 1
                        expiryYear: 2028
                        cardBrand: MASTERCARD
                        cardType: CREDIT
                        cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                        issuer: RBC
                      paymentAccountReference: '11112222333344445555666677778'
                      storePaymentMethod: DO_NOT_STORE
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    customData:
                      property1: string
                      property2: string
                self: /payment-methods?cursor=d41d8cd98f00b&limit=50
                first: /payment-methods?cursor=d41d8cd98f00b&limit=50
                last: /payment-methods?cursor=d41d8cd98f00b&limit=50
                next: null
                previous: null
        '400':
          $ref: '#/components/responses/invalidListbadRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
    post:
      summary: Create Payment Method
      description: Create a Payment Method.
      operationId: createPaymentMethod
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payment Methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPaymentMethodRequest'
            examples:
              card:
                $ref: '#/components/examples/cardPaymentMethodRequest'
              temporary_token:
                $ref: '#/components/examples/temporaryTokenPaymentMethodRequest'
              permanent_token:
                $ref: '#/components/examples/permanentTokenPaymentMethodRequest'
              apple_pay_encrypted:
                $ref: '#/components/examples/applePayEncryptedPaymentMethodRequest'
              apple_pay_decrypted:
                $ref: '#/components/examples/applePayDecryptedPaymentMethodRequest'
              google_pay_encrypted:
                $ref: '#/components/examples/googlePayEncryptedPaymentMethodRequest'
              google_pay_decrypted:
                $ref: '#/components/examples/googlePayDecryptedPaymentMethodRequest'
      responses:
        '201':
          description: |
            Payment method created successfully.  Response content contains the created payment method.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentMethodResponse'
              example:
                paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                merchantId: '0123456789101'
                cardholderInformation:
                  cardholderName: John Doe
                  companyName: SP Ltd
                contactDetails:
                  phoneNumber: '+18663197450'
                  email: moneris@moneris.com
                billingAddress:
                  unitNumber: 123A
                  streetNumber: '3300'
                  streetName: Bloor Street West
                  city: Toronto
                  province: 'ON'
                  postalCode: M8X 2X2
                  country: CA
                paymentMethodInformation:
                  paymentMethodType: CARD
                  paymentMethodSource: CARD
                  cardInformation:
                    bankIdentificationNumber: '123456'
                    lastFour: '1234'
                    expiryMonth: 1
                    expiryYear: 2028
                    cardBrand: MASTERCARD
                    cardType: CREDIT
                    cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                    issuer: RBC
                  paymentAccountReference: '11112222333344445555666677778'
                  storePaymentMethod: DO_NOT_STORE
                createdAt: '2019-07-30T06:43:40.252Z'
                modifiedAt: '2019-07-30T06:43:40.252Z'
                customData:
                  property1: string
                  property2: string
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/unprocessableContent'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /payment-methods/{payment-method-id}:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/paymentMethodId'
      - $ref: '#/components/parameters/merchantId'
    get:
      summary: Retrieve Payment Method
      description: Retrieve a Payment Method by Id
      operationId: getPaymentMethod
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payment Methods
      responses:
        '200':
          description: Payment method found and returned in the response.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentMethodResponse'
              example:
                paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                merchantId: '0123456789101'
                cardholderInformation:
                  cardholderName: John Doe
                  companyName: SP Ltd
                contactDetails:
                  phoneNumber: '+18663197450'
                  email: moneris@moneris.com
                billingAddress:
                  unitNumber: 123A
                  streetNumber: '3300'
                  streetName: Bloor Street West
                  city: Toronto
                  province: 'ON'
                  postalCode: M8X 2X2
                  country: CA
                paymentMethodInformation:
                  paymentMethodType: CARD
                  paymentMethodSource: CARD
                  cardInformation:
                    bankIdentificationNumber: '123456'
                    lastFour: '1234'
                    expiryMonth: 1
                    expiryYear: 2028
                    cardBrand: MASTERCARD
                    cardType: CREDIT
                    cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                    issuer: RBC
                  paymentAccountReference: '11112222333344445555666677778'
                  storePaymentMethod: DO_NOT_STORE
                createdAt: '2019-07-30T06:43:40.252Z'
                modifiedAt: '2019-07-30T06:43:40.252Z'
                customData:
                  property1: string
                  property2: string
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Payment method not found.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
    put:
      summary: Update Payment method
      description: |
        Update payment method referenced by its Id. 
        Certain details may not be updated if the payment method was used in a transaction.
      operationId: updatePaymentMethod
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payment Methods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePaymentMethodRequest'
            examples:
              card:
                $ref: '#/components/examples/updateCardPaymentMethodRequest'
              temporary_token:
                $ref: '#/components/examples/updateTemporaryTokenPaymentMethodRequest'
              permanent_token:
                $ref: '#/components/examples/updatePermanentTokenPaymentMethodRequest'
              apple_pay_encrypted:
                $ref: '#/components/examples/applePayEncryptedPaymentMethodRequest'
              apple_pay_decrypted:
                $ref: '#/components/examples/applePayDecryptedPaymentMethodRequest'
              google_pay_encrypted:
                $ref: '#/components/examples/googlePayEncryptedPaymentMethodRequest'
              google_pay_decrypted:
                $ref: '#/components/examples/googlePayDecryptedPaymentMethodRequest'
      responses:
        '200':
          description: Update payment method
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentMethodResponse'
              example:
                paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                merchantId: '0123456789101'
                cardholderInformation:
                  cardholderName: John Doe
                  companyName: SP Ltd
                contactDetails:
                  phoneNumber: '+18663197450'
                  email: moneris@moneris.com
                billingAddress:
                  unitNumber: 123A
                  streetNumber: '3300'
                  streetName: Bloor Street West
                  city: Toronto
                  province: 'ON'
                  postalCode: M8X 2X2
                  country: CA
                paymentMethodInformation:
                  paymentMethodType: CARD
                  paymentMethodSource: CARD
                  cardInformation:
                    bankIdentificationNumber: '123456'
                    lastFour: '1234'
                    expiryMonth: 1
                    expiryYear: 2028
                    cardBrand: MASTERCARD
                    cardType: CREDIT
                    cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                    issuer: RBC
                  paymentAccountReference: '11112222333344445555666677778'
                  storePaymentMethod: DO_NOT_STORE
                createdAt: '2019-07-30T06:43:40.252Z'
                modifiedAt: '2019-07-30T06:43:40.252Z'
                customData:
                  property1: string
                  property2: string
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Payment method not found.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '409':
          $ref: '#/components/responses/concurrencyConflict'
        '422':
          $ref: '#/components/responses/unprocessableContent'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
    delete:
      summary: Delete Payment Method
      description: Deletes a payment method.
      operationId: deletePaymentMethod
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Payment Methods
      responses:
        '204':
          description: |
            Payment method deleted successfully. 
            Response content contains the payment method details.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Payment method not found.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /refunds:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/merchantId'
    get:
      summary: List Refunds
      description: Returns a paginated list of refund operations.
      operationId: getRefunds
      security:
        - OAuth2:
            - refund.read
        - OAuth2:
            - refund.write
        - ApiKeyAuth: []
      tags:
        - Refunds
      parameters:
        - $ref: '#/components/parameters/pageBeforeCursor'
        - $ref: '#/components/parameters/pageLimit'
        - $ref: '#/components/parameters/createdFrom'
        - $ref: '#/components/parameters/createdTo'
      responses:
        '200':
          description: Refund list successfully returned.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refundResponseList'
              example:
                data:
                  - refundId: ri0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    payment:
                      paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    merchantId: '0123456789101'
                    paymentMethod:
                      paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation: null
                      contactDetails: null
                      billingAddress: null
                      paymentMethodInformation:
                        paymentMethodType: CARD
                        paymentMethodSource: CARD
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2028
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                        storePaymentMethod: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: null
                      customData:
                        property1: string
                        property2: string
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    refundAmount:
                      amount: 1600
                      currency: CAD
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    refundStatus: SUCCEEDED
                    transactionDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: '00'
                      responseCode: '000'
                      message: SUCCESS
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    reason: Defective product
                    credentialOnFileResponse: null
                    customData:
                      property1: string
                      property2: string
                  - refundId: ri0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    payment:
                      paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    merchantId: '0123456789101'
                    paymentMethod:
                      paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation: null
                      contactDetails: null
                      billingAddress: null
                      paymentMethodInformation:
                        paymentMethodType: CARD
                        paymentMethodSource: CARD
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2028
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                        storePaymentMethod: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: null
                      customData:
                        property1: string
                        property2: string
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: '2019-07-30T06:43:40.252Z'
                    refundAmount:
                      amount: 1600
                      currency: CAD
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    refundStatus: DECLINED
                    transactionDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: '51'
                      responseCode: '054'
                      message: Expired Card
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    reason: Defective product
                    credentialOnFileResponse: null
                    customData:
                      property1: string
                      property2: string
                self: /refunds?cursor=d41d8cd98f00b&limit=50
                first: /refunds?cursor=d41d8cd98f00b&limit=50
                last: /refunds?cursor=d41d8cd98f00b&limit=50
                next: null
                previous: null
        '400':
          $ref: '#/components/responses/invalidListbadRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
    post:
      summary: Create Refund
      description: |
        This operation is used to create a Refund. 
        For payment refunds, Payment Id is required while payment method is not required.
        For independent refunds, no payment Id is required, however payment method is required.
      operationId: createRefund
      security:
        - OAuth2:
            - refund.write
        - ApiKeyAuth: []
      tags:
        - Refunds
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createRefundRequest'
            examples:
              matching:
                $ref: '#/components/examples/matchingRefundRequest'
      responses:
        '201':
          description: Refund operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refundResponse'
              example:
                refundId: ri0105ARZ3NDEKTSV4RRFFQ69G5FAV
                payment:
                  paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                merchantId: '0123456789101'
                paymentMethod:
                  paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                  merchantId: '0123456789101'
                  cardholderInformation: null
                  contactDetails: null
                  billingAddress: null
                  paymentMethodInformation:
                    paymentMethodType: CARD
                    paymentMethodSource: CARD
                    cardInformation:
                      bankIdentificationNumber: '123456'
                      lastFour: '1234'
                      expiryMonth: 1
                      expiryYear: 2028
                      cardBrand: MASTERCARD
                      cardType: CREDIT
                      cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                      issuer: RBC
                    paymentAccountReference: '11112222333344445555666677778'
                    storePaymentMethod: DO_NOT_STORE
                  createdAt: '2019-07-30T06:43:40.252Z'
                  modifiedAt: null
                  customData:
                    property1: string
                    property2: string
                createdAt: '2019-07-30T06:43:40.252Z'
                modifiedAt: '2019-07-30T06:43:40.252Z'
                refundAmount:
                  amount: 1600
                  currency: CAD
                customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                refundStatus: SUCCEEDED
                transactionDetails:
                  transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                  isoResponseCode: '00'
                  responseCode: '000'
                  message: SUCCESS
                  ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                reason: Defective product
                credentialOnFileResponse: null
                customData:
                  property1: string
                  property2: string
        '400':
          description: Refund operation declined
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                invalid_request:
                  $ref: '#/components/examples/InvalidRefundErrorResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          description: Refund operation declined
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                declined:
                  $ref: '#/components/examples/exp-refundResponse_DeclineErrorResponse'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /refunds/{refund-id}:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/refundId'
      - $ref: '#/components/parameters/merchantId'
    get:
      summary: Retrieve Refund
      description: Retrieve a refund by its Id.
      operationId: getRefundById
      security:
        - OAuth2:
            - refund.read
        - OAuth2:
            - refund.write
        - ApiKeyAuth: []
      tags:
        - Refunds
      responses:
        '200':
          description: Successfully retrieved the refund corresponding to the provided `refund-id`
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refundResponse'
              examples:
                succeeded:
                  $ref: '#/components/examples/SucceededRefundResponse'
                declined:
                  $ref: '#/components/examples/DeclinedRefundResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Refund not found.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /refunds/ri0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /validations:
    description: |
      set up a payment method for future payments. 
      Similar to a payment, but no charge is created.
      Useful when onboarding customers but not charging them right away.
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/merchantId'
    get:
      summary: List Card Validations
      description: Returns a paginated list of the card validations the were executed.
      operationId: getValidations
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Validations
      parameters:
        - $ref: '#/components/parameters/pageBeforeCursor'
        - $ref: '#/components/parameters/pageLimit'
        - $ref: '#/components/parameters/createdFrom'
        - $ref: '#/components/parameters/createdTo'
      responses:
        '200':
          description: List of Card Validations
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationsResponseList'
              example:
                data:
                  - validationId: vi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    merchantId: '0123456789101'
                    orderId: 1q2w3e4r5t6t78
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: null
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    paymentMethod:
                      paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation:
                        cardholderName: John Doe
                        companyName: SP Ltd
                      contactDetails:
                        phoneNumber: '+18663197450'
                        email: moneris@moneris.com
                      billingAddress:
                        unitNumber: 123A
                        streetNumber: '3300'
                        streetName: Bloor Street West
                        city: Toronto
                        province: 'ON'
                        postalCode: M8X 2X2
                        country: CA
                      paymentMethodInformation:
                        paymentMethodType: CARD
                        paymentMethodSource: CARD
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2028
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                        storePaymentMethod: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: '2019-07-30T06:43:40.252Z'
                      customData:
                        property1: string
                        property2: string
                    validationStatus: SUCCEEDED
                    transactionDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: '00'
                      responseCode: '000'
                      message: approved
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    verificationDetails:
                      addressVerificationServiceResultCode: FULL_MATCH
                      cardSecurityCodeResultCode: MATCH
                    credentialOnFileResponse: null
                    customData:
                      property1: string
                      property2: string
                  - validationId: vi0105ARZ3NDEKTSV4RRFFQ69G5FAX
                    merchantId: '0123456789101'
                    orderId: 1q2w3e4r5t6t78
                    createdAt: '2019-07-30T06:43:40.252Z'
                    modifiedAt: null
                    customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                    paymentMethod:
                      paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
                      merchantId: '0123456789101'
                      cardholderInformation:
                        cardholderName: John Doe
                        companyName: SP Ltd
                      contactDetails:
                        phoneNumber: '+18663197450'
                        email: moneris@moneris.com
                      billingAddress:
                        unitNumber: 123A
                        streetNumber: '3300'
                        streetName: Bloor Street West
                        city: Toronto
                        province: 'ON'
                        postalCode: M8X 2X2
                        country: CA
                      paymentMethodInformation:
                        paymentMethodType: CARD
                        paymentMethodSource: CARD
                        cardInformation:
                          bankIdentificationNumber: '123456'
                          lastFour: '1234'
                          expiryMonth: 1
                          expiryYear: 2028
                          cardBrand: MASTERCARD
                          cardType: CREDIT
                          cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
                          issuer: RBC
                        paymentAccountReference: '11112222333344445555666677778'
                        storePaymentMethod: DO_NOT_STORE
                      createdAt: '2019-07-30T06:43:40.252Z'
                      modifiedAt: '2019-07-30T06:43:40.252Z'
                      customData:
                        property1: string
                        property2: string
                    validationStatus: DECLINED
                    transactionDetails:
                      transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
                      isoResponseCode: '43'
                      responseCode: '421'
                      message: Stolen card, pick up.
                      ecommerceIndicator: AUTHENTICATED_ECOMMERCE
                    verificationDetails:
                      addressVerificationServiceResultCode: FULL_MATCH
                      cardSecurityCodeResultCode: MATCH
                    credentialOnFileResponse: null
                    customData:
                      property1: string
                      property2: string
                self: /validations?cursor=d41d8cd98f00b&limit=50
                first: /validations?cursor=d41d8cd98f00b&limit=50
                last: /validations?cursor=d41d8cd98f00b&limit=50
                next: null
                previous: null
        '400':
          $ref: '#/components/responses/invalidListbadRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
    post:
      summary: Create Card Validation
      description: Initiate a new Card Validation request.
      operationId: createValidation
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Validations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createValidationRequest'
            examples:
              with_payment_method_id:
                $ref: '#/components/examples/validationWithPaymentMethodId'
              with_card_payment_method:
                $ref: '#/components/examples/validationWithCardPaymentMethod'
              with_temporary_token_payment_method:
                $ref: '#/components/examples/validationWithTemporaryTokenPaymentMethod'
              with_permanent_token_payment_method:
                $ref: '#/components/examples/validationWithPermanentTokenPaymentMethod'
              with_apple_pay_encrypted_payment_method:
                $ref: '#/components/examples/validationWithApplePayEncryptedPaymentMethod'
              with_apple_pay_decrypted_payment_method:
                $ref: '#/components/examples/validationWithApplePayDecryptedPaymentMethod'
              with_google_pay_encrypted_payment_method:
                $ref: '#/components/examples/validationWithGooglePayEncryptedPaymentMethod'
              with_google_pay_decrypted_payment_method:
                $ref: '#/components/examples/validationWithGooglePayDecryptedPaymentMethod'
      responses:
        '201':
          description: Validation request created successfully.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationResponse'
        '400':
          description: Failed Validation operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                invalid_request:
                  $ref: '#/components/examples/InvalidRequestErrorResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          description: Failed Validation operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                declined:
                  $ref: '#/components/examples/exp-validationResponse_DeclineErrorResponse'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /validations/{validation-id}:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/validationId'
      - $ref: '#/components/parameters/merchantId'
    get:
      summary: Retrieve Card Validation.
      description: Retrieve a Card Validation by Id.
      operationId: getValidation
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - Validations
      responses:
        '200':
          description: Retrieve a Card Validation by Id
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationResponse'
              examples:
                succeeded:
                  $ref: '#/components/examples/ValidationSucceededResponse'
                declined:
                  $ref: '#/components/examples/ValidationDeclinedRetryResponse'
                declined_retry:
                  $ref: '#/components/examples/ValidationDeclinedResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Card validation not found
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /validations/vi0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /customers:
    description: |
      This API allows to manage past and recurring customers.
      Very useful when tracking and managing charges belonging to the same customer.
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/merchantId'
    get:
      summary: List Customers
      description: Returns a paginated list of customers.
      operationId: getCustomers
      security:
        - OAuth2:
            - customer.read
        - OAuth2:
            - customer.write
        - ApiKeyAuth: []
      tags:
        - Customers
      parameters:
        - $ref: '#/components/parameters/pageBeforeCursor'
        - $ref: '#/components/parameters/pageLimit'
        - $ref: '#/components/parameters/createdFrom'
        - $ref: '#/components/parameters/createdTo'
      responses:
        '200':
          description: List of all customers
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerResponseList'
        '400':
          $ref: '#/components/responses/invalidListbadRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
    post:
      summary: Create Customer
      description: This operation is used to created a new customer.
      operationId: createCustomers
      security:
        - OAuth2:
            - customer.write
        - ApiKeyAuth: []
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCustomerRequest'
      responses:
        '201':
          description: Customer operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/unprocessableContent'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /customers/{customer-id}:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/customerId'
      - $ref: '#/components/parameters/merchantId'
    get:
      summary: Retrieve Customer
      description: Retrieve a customer by their Id.
      operationId: getCustomer
      security:
        - OAuth2:
            - customer.read
        - OAuth2:
            - customer.write
        - ApiKeyAuth: []
      tags:
        - Customers
      responses:
        '200':
          description: The customer corresponding to the provided `customerId`
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Customer not found
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
    put:
      summary: Update Customer
      description: Updates customer's details such as name, address etc...
      operationId: updateCustomer
      security:
        - OAuth2:
            - customer.write
        - ApiKeyAuth: []
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerRequest'
      responses:
        '200':
          description: Customer updated successfully.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Customer not found
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '409':
          $ref: '#/components/responses/concurrencyConflict'
        '422':
          $ref: '#/components/responses/unprocessableContent'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
    delete:
      summary: Delete Customer
      description: Delete a customer by their Id
      operationId: deleteCustomer
      security:
        - OAuth2:
            - customer.write
        - ApiKeyAuth: []
      tags:
        - Customers
      responses:
        '204':
          description: Customer deleted successfully.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: Customer not found
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                type: https://developer.moneris.com/en/More/Testing/Response%20Codes
                title: NOT_FOUND
                status: 404
                detail: null
                instance: /customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
                category: INVALID_REQUEST_ERROR
                errors: []
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /three-d-secure/authentications:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/merchantId'
    post:
      summary: Create Authentication
      description: |
        This operation is used to create an Authentication request. 
        The authentication request is used to start the validation process of the card. 
        The result of this request determines whether 3DS is supported by the card and what type of authentication is required.
      operationId: createAuthentication
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - 3D Secure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authenticationRequest'
            examples:
              threeDSecureBrowserChannelWithPaymentMethodId:
                $ref: '#/components/examples/threeDSecureBrowserChannelWithPaymentMethodId'
              threeDSecureBrowserChannelWithCardPaymentMethod:
                $ref: '#/components/examples/threeDSecureBrowserChannelWithCardPaymentMethod'
              threeDSecureBrowserChannelWithTemporaryToken:
                $ref: '#/components/examples/threeDSecureBrowserChannelWithTemporaryToken'
              threeDSecureBrowserChannelWithPermanentToken:
                $ref: '#/components/examples/threeDSecureBrowserChannelWithPermanentToken'
      responses:
        '201':
          description: 3DS Secure authentication was successfully created & executed.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authenticationResponse'
        '202':
          description: MPI Authentication operation resulted in a challenge.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authenticationResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/unprocessableContent'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /three-d-secure/authentications/{authentication-id}:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/merchantId'
      - $ref: '#/components/parameters/authenticationId'
    get:
      summary: Retrieve Authentication
      description: Retrieve an authentication by its authentication Id
      operationId: getAuthentication
      security:
        - OAuth2:
            - payment.read
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - 3D Secure
      responses:
        '200':
          description: The authentication corresponding to the provided `authentication-id`
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authenticationResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /three-d-secure/authentications/{authentication-id}/lookup:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/authenticationId'
      - $ref: '#/components/parameters/merchantId'
    post:
      summary: Authentication Value Lookup
      description: The point of the 3-D Secure flow is to verify that the true cardholder is a part of the authorization. The challenge flow is used to present a way of authenticating the cardholder using e.g. OTP or a federated identification method.
      operationId: authenticationValueLookup
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - 3D Secure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lookupRequest'
      responses:
        '200':
          description: MPI Authentication operation was successfully authenticated.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authenticationResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/unprocessableContent'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /three-d-secure/card-lookups:
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/merchantId'
    post:
      summary: 3DS Card Lookup
      operationId: cardLookup
      security:
        - OAuth2:
            - payment.write
        - ApiKeyAuth: []
      tags:
        - 3D Secure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cardLookupRequest'
      responses:
        '201':
          description: CAVV Lookup operation to read the challenge result.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cardLookupResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/unprocessableContent'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /kount-inquiries:
    parameters:
      - $ref: '#/components/parameters/merchantId'
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
    post:
      summary: Create Kount Inquiry
      operationId: createKountInquiry
      security:
        - OAuth2:
            - kount.write
        - ApiKeyAuth: []
      tags:
        - Kount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kountInquiryRequest'
      responses:
        '201':
          description: Kount Inquiry was successfully approved.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kountResponse'
        '202':
          description: Kount Inquiry accepted and is under review.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kountResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/unprocessableContent'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
    get:
      summary: List Kount Inquiries
      operationId: getKountInquiries
      security:
        - OAuth2:
            - kount.read
        - ApiKeyAuth: []
      tags:
        - Kount
      parameters:
        - $ref: '#/components/parameters/pageBeforeCursor'
        - $ref: '#/components/parameters/pageLimit'
        - $ref: '#/components/parameters/createdFrom'
        - $ref: '#/components/parameters/createdTo'
      responses:
        '200':
          description: Kount Inquiry operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kountInquiryList'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /kount-inquiries/{kount-inquiry-id}:
    parameters:
      - $ref: '#/components/parameters/merchantId'
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/kountInquiryId'
    get:
      summary: Get Kount Inquiry by Id
      operationId: getKountInquiryById
      security:
        - OAuth2:
            - kount.read
        - ApiKeyAuth: []
      tags:
        - Kount
      responses:
        '200':
          description: Kount Update operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kountResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
  /kount-inquiries/{kount-inquiry-id}/assert:
    parameters:
      - $ref: '#/components/parameters/merchantId'
      - $ref: '#/components/parameters/apiVersion'
      - $ref: '#/components/parameters/correlationId'
      - $ref: '#/components/parameters/kountInquiryId'
    post:
      summary: Kount Inquiry Assert
      operationId: kountInquiryAssert
      security:
        - OAuth2:
            - kount.write
        - ApiKeyAuth: []
      tags:
        - Kount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kountAssertRequest'
      responses:
        '200':
          description: Kount Update operation result response
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kountResponse'
        '202':
          description: Kount Inquiry updated and is under review.
          headers:
            Api-Version:
              $ref: '#/components/headers/apiVersion'
            X-Correlation-Id:
              $ref: '#/components/headers/correlationId'
            Sunset:
              $ref: '#/components/headers/sunset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kountResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/notFound'
        '409':
          $ref: '#/components/responses/conflict'
        '422':
          $ref: '#/components/responses/unprocessableContent'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalServer'
        '503':
          $ref: '#/components/responses/serviceUnavailable'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key
      description: |
        An API key is a token that a client provides when making API calls.

        API keys are supposed to be a secret that only the client and server know about.
    OAuth2:
      type: oauth2
      description: |
        OAuth 2.0 is an authorization protocol that gives an API client limited access to user data on a web server.

        OAuth relies on authentication scenarios, that allows the resource owner (user) to share the protected content from the server, hosting the resource, without sharing their credentials. For that purpose, an OAuth 2.0 server issues access tokens that the client applications can use to access protected resources on behalf of the resource owner.

        Moneris recommends the use of OAuth 2.0 as it provides fine grained authorization levels.
      flows:
        clientCredentials:
          tokenUrl: https://api.moneris.io/oauth2/token
          scopes:
            payment.read: Grants read access to payment related APIs
            payment.write: Grants read & write access to payment related APIs
            refund.read: Grants read access to refunds
            refund.write: Grants read & write access to refunds
            customer.read: Grants read access to customer data
            customer.write: Grants read & write access to customer data
            kount.read: Grants read access to Kount inquiries
            kount.write: Grants read & write access to Kount inquiries
  schemas:
    apiVersion:
      description: |
        The endpoint's API Version. 

        Must be provided through headers. 
      type: string
      example: 2024-04-17-preview
    merchantId:
      type: string
      description: |
        Thirteen character long identification provided to merchants by Moneris. 
      minLength: 13
      maxLength: 13
      example: '0123456789101'
    dateTime:
      type: string
      format: date-time
      example: '2019-07-30T06:43:40.252Z'
      description: Date & Time
    orderId:
      type: string
      description: |
        Indicates the merchant-defined transaction identifer or order ID. Identifiers are unique for every Purchase, Pre-Authorization and Independent Refund transaction

        **Note**: No two transactions of these types may have the same order ID.
      minLength: 1
      maxLength: 50
      example: 1q2w3e4r5t6t78
      pattern: ^[^\s]+$
      nullable: true
    invoiceNumber:
      type: string
      description: |
        Submits a unique value to identify a transaction that is logged by Moneris Solutions.
      minLength: 1
      maxLength: 17
      example: 1a2s3d45v6
      nullable: true
    transactionDateTime:
      description: Indicates the date and time of the transaction.
      type: string
      format: date-time
      example: '2019-07-30T06:43:40.252Z'
    createdAt:
      description: Time at which the object was created
      type: string
      format: date-time
      example: '2019-07-30T06:43:40.252Z'
    modifiedAt:
      nullable: true
      description: Time at which the object was modified
      type: string
      format: date-time
      example: '2019-07-30T06:43:40.252Z'
    amount:
      type: integer
      format: int32
      minimum: 0
      maximum: 999999999
      example: 10000
      description: Amount
    currency:
      type: string
      description: |
        Provides the three letter currency code according the ISO 4217 standard. 

        For a complete list of currency codes, visit: https://en.wikipedia.org/wiki/ISO_4217
      minLength: 3
      maxLength: 4
      example: CAD
      format: iso-4217
    subTotalAmount:
      type: object
      description: |
        Sub total amount for the transaction. 
        Note: The value must be in cents. Therefore $10.59 must be sent as 1059.
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
      nullable: true
      required:
        - amount
        - currency
      example:
        amount: 2000
        currency: CAD
    tipAmount:
      type: object
      description: |
        Total tip amount for the transaction. 
        Note: The value must be in cents. Therefore $10.59 must be sent as 1059
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
      required:
        - amount
        - currency
      nullable: true
      example:
        amount: 1200
        currency: CAD
    amountDetails:
      description: Amount Details breakdown
      type: object
      nullable: true
      properties:
        subTotalAmount:
          $ref: '#/components/schemas/subTotalAmount'
        tipAmount:
          $ref: '#/components/schemas/tipAmount'
    cardholderName:
      type: string
      description: Cardholder name
      minLength: 1
      maxLength: 60
      example: John Doe
    companyName:
      type: string
      description: Identifies the associated company name
      minLength: 1
      maxLength: 50
      example: SP Ltd
      nullable: true
    cardholderInformation:
      type: object
      description: Information about the holder of the card.
      nullable: true
      properties:
        cardholderName:
          $ref: '#/components/schemas/cardholderName'
        companyName:
          $ref: '#/components/schemas/companyName'
      required:
        - cardholderName
    contactDetails:
      type: object
      description: Contact details
      nullable: true
      properties:
        phoneNumber:
          nullable: true
          type: string
          description: Phone number.
          pattern: ^\+[1-9]\d{1,14}$
          minLength: 3
          maxLength: 16
          example: '+18663197450'
        email:
          nullable: true
          type: string
          format: email
          description: |
            Contains the customer's email address.

            For standard email protocols, visit: https://www.rfc-editor.org/rfc/rfc5322
          minLength: 1
          maxLength: 320
          example: moneris@moneris.com
      example:
        phoneNumber: '+18663197450'
        email: moneris@moneris.com
    expiryMonth:
      type: integer
      format: int32
      description: Card expiration month. Format must be MM
      minimum: 1
      maximum: 12
      example: 1
    expiryYear:
      type: integer
      format: int32
      description: 'Displays the card expiration year. Accepted format: YYYY'
      minimum: 2022
      maximum: 9999
      example: 2023
    cardBrand:
      type: string
      description: Displays the card brand name associated with the card type.
      enum:
        - MASTERCARD
        - VISA
        - AMERICAN_EXPRESS
        - JCB
        - DISCOVER
        - INTERAC
        - UNIONPAY
        - GIFT_MONERIS
        - GIFT_DATACANDY
        - GIFT_GIVEX
        - null
      nullable: true
      example: MASTERCARD
    cardFingerprint:
      type: string
      description: |
        Unique card identifier. 

        Fingerprinting randomly assigns identfiers for cards that share the same Primary Account Number (PAN) to easily identify when multiple payments methods are attached to the same underlying card, and assists merchants identify individual customers across various channels; i.e.  loyalty programs.
      maxLength: 255
      example: 1Q2W3E4r5t6rfwewerwewrrw
      nullable: true
    issuer:
      type: string
      description: Card issuer.
      minLength: 1
      maxLength: 100
      example: RBC
      nullable: true
    cardInformation:
      type: object
      description: Information about the card being used for the transaction
      properties:
        bankIdentificationNumber:
          nullable: true
          type: string
          description: |
            **BIN**: Bank Identification Number 

            Consists of the first six to eight digits of the Primary Account Number (PAN) and identifies the relevant payment network and the specific payment issuing institution.
          minLength: 6
          maxLength: 8
          example: '123456'
        lastFour:
          nullable: true
          type: string
          description: Last 4 digits of the card.
          minLength: 4
          maxLength: 4
          example: '1234'
        expiryMonth:
          $ref: '#/components/schemas/expiryMonth'
        expiryYear:
          $ref: '#/components/schemas/expiryYear'
        cardBrand:
          $ref: '#/components/schemas/cardBrand'
        cardType:
          nullable: true
          type: string
          description: Specifies the intended card use; i.e. debit or credit.
          enum:
            - CREDIT
            - DEBIT
            - DOMESTIC_DEBIT
            - PREPAID_RELOADABLE
            - PREPAID_NON_RELOADABLE
            - UNKNOWN
            - GIFT
            - LOYALTY
            - FLEET
            - CORPORATE
          example: CREDIT
        cardFingerprint:
          $ref: '#/components/schemas/cardFingerprint'
        issuer:
          $ref: '#/components/schemas/issuer'
    paymentAccountReference:
      type: string
      nullable: true
      description: |
        Used to link Primary Account Number (PAN) based transactions and transactions on associated payment tokens without using the PAN as the linking mechanism.
      minLength: 1
      maxLength: 29
      example: '11112222333344445555666677778'
    storePaymentMethod:
      description: |
        Store this payment method created through this payment for future use. 
        - DO_NOT_STORE: Payment method will not be stored.
        - CARDHOLDER_INITIATED: Payment method to be stored and can only re-used with cardholder's consent. Limited to store, pre-authorisation, and card validations."
        - MERCHANT_INITIATED: Payment method to be stored and can be reused without the cardholder's consent. For example, recurring payments.
      type: string
      default: DO_NOT_STORE
      enum:
        - DO_NOT_STORE
        - CARDHOLDER_INITIATED
        - MERCHANT_INITIATED
    cardPaymentMethodInformation:
      title: Card Payment Method Information
      description: Details about the card used in the payment method.
      type: object
      properties:
        paymentMethodType:
          type: string
          description: |
            The type of Payment Method being used. It can be:
              - Card.
          enum:
            - CARD
        paymentMethodSource:
          type: string
          description: |
            The source of Payment Method being used. It can be:
              - The Id of a Payment Method already created.
              - Permanent Token.
              - Temporary Token.
              - Card.
              - E-Wallet.
          enum:
            - CARD
            - TEMPORARY_TOKEN
            - PERMANENT_TOKEN
            - APPLE_PAY_ENCRYPTED
            - APPLE_PAY_DECRYPTED
            - GOOGLE_PAY_ENCRYPTED
            - GOOGLE_PAY_DECRYPTED
          example: TEMPORARY_TOKEN
        cardInformation:
          $ref: '#/components/schemas/cardInformation'
        paymentAccountReference:
          $ref: '#/components/schemas/paymentAccountReference'
        storePaymentMethod:
          $ref: '#/components/schemas/storePaymentMethod'
      required:
        - paymentMethodType
        - paymentMethodSource
        - cardInformation
        - storePaymentMethod
    customData:
      description: Merchant can send custom meta data with the transaction in this object. Moneris will echo these values back in response.
      type: object
      additionalProperties:
        type: string
        minLength: 1
        maxLength: 50
      maxProperties: 10
      nullable: true
    paymentMethodResponse:
      title: paymentMethodResponse
      description: Payment method response object
      type: object
      properties:
        paymentMethodId:
          description: Unique Identifier of the payment method
          type: string
          pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
          minLength: 30
          maxLength: 30
          example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId:
          $ref: '#/components/schemas/merchantId'
        cardholderInformation:
          $ref: '#/components/schemas/cardholderInformation'
        contactDetails:
          $ref: '#/components/schemas/contactDetails'
        billingAddress:
          nullable: true
          type: object
          description: |
            The postal address including street, town/city, province, and postal code.
            Optionally an unit number can be provided.
          properties:
            unitNumber:
              nullable: true
              type: string
              description: Unit number
              minLength: 1
              maxLength: 19
              example: 123A
            streetNumber:
              nullable: true
              type: string
              description: Street number
              minLength: 1
              maxLength: 19
              example: '3300'
            streetName:
              nullable: true
              type: string
              description: Street name
              minLength: 1
              maxLength: 100
              example: Bloor
            city:
              nullable: true
              type: string
              description: |
                Identifies the city.
              minLength: 1
              maxLength: 50
              example: Toronto
            province:
              nullable: true
              type: string
              description: 'Province or state ISO 3166-2 code '
              minLength: 1
              maxLength: 3
              example: 'ON'
            postalCode:
              nullable: true
              type: string
              description: Postal or zip code
              minLength: 1
              maxLength: 30
              example: M8X 2X2
            country:
              nullable: true
              type: string
              description: |
                Provides the two letter country code according the ISO 3166-1 alpha-2 standard. 
                For a complete list of country codes, visit: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
              minLength: 2
              maxLength: 2
              example: CA
              format: iso-3166
          example:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
        paymentMethodInformation:
          $ref: '#/components/schemas/cardPaymentMethodInformation'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        modifiedAt:
          $ref: '#/components/schemas/modifiedAt'
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - paymentMethodId
        - merchantId
        - paymentMethodInformation
        - createdAt
    paymentStatus:
      type: string
      description: Payment Status description.
      enum:
        - CANCELED
        - DECLINED
        - DECLINED_RETRY
        - AUTHORIZED
        - PROCESSING
        - SUCCEEDED
      example: SUCCEEDED
    iso:
      type: string
      description: Represents the Moneris response code for the equivalent International Organization for Standardization (ISO) response code.
      minLength: 2
      maxLength: 2
      example: '00'
    responseCode:
      type: string
      description: |
        "Details Transaction Response Codes:
        - **< 50**: Transaction approved
        - **> 50**: Transaction declined
        NULL: Transaction not sent for authorization
        For a complete list of definitions, refer to the Response Codes Table"
      minLength: 3
      maxLength: 3
      example: '001'
    message:
      type: string
      description: |
        Displays response description returned from issuing institution.

        **NOTE**: This message should not be displayed on any cardholder facing materials.  

        For receipt purposes, please refer to the Receipt Requirements"
      minLength: 1
      maxLength: 100
      example: SUCCESS
      nullable: true
    ecommerceIndicator:
      type: string
      description: |
        The ecommerce indicator (ECI) specifies the level of security that was used to obtain the cardholder's payment data. 
        It is sent by the merchant and returned by the issuer.
        When returned in the response, it can be different from the value sent in the request in case transaction was downgraded by the issuer.
      enum:
        - MAIL_TELEPHONE_ORDER_SINGLE
        - MAIL_TELEPHONE_ORDER_RECURRING
        - MAIL_TELEPHONE_ORDER_INSTALMENT
        - MAIL_TELEPHONE_ORDER_UNKNOWN
        - AUTHENTICATED_ECOMMERCE
        - NON_AUTHENTICATED_ECOMMERCE
        - SSL_MERCHANT
      example: AUTHENTICATED_ECOMMERCE
      default: SSL_MERCHANT
    statusDetails:
      type: object
      description: Additional details about the transaction outcome.
      properties:
        transactionUniqueId:
          type: string
          description: Realtime transaction identifier from the host.
          nullable: true
        isoResponseCode:
          $ref: '#/components/schemas/iso'
        responseCode:
          $ref: '#/components/schemas/responseCode'
        message:
          $ref: '#/components/schemas/message'
        ecommerceIndicator:
          $ref: '#/components/schemas/ecommerceIndicator'
      required:
        - isoResponseCode
        - responseCode
        - ecommerceIndicator
    addressVerificationServiceResultCode:
      title: AVS Result Description
      type: string
      nullable: true
      description: |
        Indicates the address verification result. 
      enum:
        - FULL_MATCH
        - PARTIAL_MATCH
        - NO_MATCH
        - UNAVAILABLE
        - null
      example: FULL_MATCH
    cardSecurityCodeResult:
      type: string
      nullable: true
      description: |
        Indicates the Card Security Code validation result.
        - **MATCH**
        - **NO_MATCH**
        - **NOT_PROCESSED**
        - **CVD_NOT_PRESENT**
        - **NOT_CVD_PRESENT**
        - **AMEX_JCB_MATCH**
        - **AMEX_JCB_INVALID**
        - **OTHER**"
      enum:
        - MATCH
        - NO_MATCH
        - NOT_PROCESSED
        - CVD_NOT_PRESENT
        - NOT_CVD_PARTICIPANT
        - AMEX_JCB_MATCH
        - AMEX_JCB_INVALID
        - OTHER
        - null
      example: MATCH
    threeDSecureAuthenticationValueResult:
      type: string
      nullable: true
      description: |
        The Cardholder Authentication Verification Value (CAVV), the Account holder Authentication Value (AAV), and the American Express Verification Value (AEVV),  are the values that allows Visa, Mastercard and American Express to validate the integrity of the Visa Secure,  Mastercard Identity Check and American Express SafeKey transaction data.  These values are passed back from the issuer to the merchant after the authentication has taken place.  The merchant then integrates the CAVV/AAV/AEVV value into the authorization request using the Payment request with 3-D Secure transaction data.
      enum:
        - AMEX_AEVV_FAILED_ATTEMPT_ISSUER_KEY
        - AMEX_AEVV_FAILED_ATTEMPT_ISSUER_NOT_PARTICIPATING_NETWORK_KEY
        - AMEX_AEVV_FAILED_ATTEMPT_PARTICIPATING_NOT_AVAILABLE_NETWORK_KEY
        - AMEX_AEVV_FAILED_AUTHENTICATION_ISSUER_KEY
        - AMEX_AEVV_PASSED_ATTEMPT_ISSUER_KEY
        - AMEX_AEVV_PASSED_ATTEMPT_ISSUER_NOT_PARTICIPATING_NETWORK_KEY
        - AMEX_AEVV_PASSED_ATTEMPT_PARTICIPATING_NOT_AVAILABLE_NETWORK_KEY
        - AMEX_AEVV_PASSED_AUTHENTICATION_ISSUER_KEY
        - AMEX_AEVV_UNCHECKED
        - ISA_CAVV_NOT_PRESENT_OR_NOT_VERIFIED
        - MASTERCARD_AUTHENTICATION_ATTEMPTED
        - MASTERCARD_AUTHENTICATION_FAILED
        - MASTERCARD_AUTHENTICATION_SUCCESSFUL
        - VISA_CAVV_AUTHENTICATION_RESULTS_INVALID
        - VISA_CAVV_FAILED_VALIDATION_ATTEMPTED
        - VISA_CAVV_FAILED_VALIDATION_AUTHENTICATION
        - VISA_CAVV_NOT_VALIDATED_ISSUER_NOT_PARTICIPATING
        - VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        - VISA_CAVV_PASSED_VALIDATION_AUTHENTICATION
        - VISA_CAVV_PASSED_VALIDATION_INFO_ONLY
        - VISA_CAVV_WAS_NOT_VALIDATED_ATTEMPTED
        - VISA_CAVV_WAS_NOT_VALIDATED_AUTHENTICATION
        - null
      example: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
    verificationDetails:
      description: Result Codes for CVD, AVS, 3DS
      type: object
      properties:
        addressVerificationServiceResultCode:
          $ref: '#/components/schemas/addressVerificationServiceResultCode'
        cardSecurityCodeResultCode:
          $ref: '#/components/schemas/cardSecurityCodeResult'
        threeDSecureAuthenticationValueResultCode:
          $ref: '#/components/schemas/threeDSecureAuthenticationValueResult'
    originalAmount:
      type: object
      nullable: true
      description: |
        Original amount for the first transaction in the series. 
        Note: The value must be in cents. Therefore $10.59 must be sent as 1059
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
      required:
        - amount
        - currency
      example:
        amount: 15000
        currency: CAD
    issuerId:
      type: string
      description: |
        Displays a unique identifier for the card holder's stored credentials. 

        This information is returned from the card brand when processing a Credential on File transaction.
      minLength: 1
      maxLength: 15
      example: A
      nullable: true
    credentialOnFileResponse:
      type: object
      nullable: true
      description: 'Contains fields related to the Credential on File (CoF) '
      properties:
        originalAmount:
          $ref: '#/components/schemas/originalAmount'
        issuerId:
          $ref: '#/components/schemas/issuerId'
    resourceId:
      type: string
      description: Used to identify API resources which may be required for future follow-on transactions; i.e. Refunds, Corrections, Completions, Reversals, etc.
      pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
      minLength: 30
      maxLength: 30
      example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
    refundReference:
      description: Refund reference.
      type: object
      nullable: true
      properties:
        refundId:
          $ref: '#/components/schemas/resourceId'
      required:
        - refundId
    transactionAmount:
      type: object
      description: |
        The amount for the transaction. 
        Note: The value must be in cents. Therefore $10.59 must be sent as 1059.
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
      required:
        - amount
        - currency
      example:
        amount: 16000
        currency: CAD
    refundDetails:
      description: Refund details if any has occured.
      type: object
      nullable: true
      properties:
        refunds:
          description: List of Refunds associated with this Payment
          type: array
          items:
            $ref: '#/components/schemas/refundReference'
        refundedAmount:
          $ref: '#/components/schemas/transactionAmount'
      required:
        - refundedAmount
    paymentResponse:
      title: paymentResponse
      type: object
      description: Returns a processed payment
      properties:
        paymentId:
          description: The unique identifier of the payment.
          type: string
          pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
          minLength: 30
          maxLength: 30
          example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId:
          $ref: '#/components/schemas/merchantId'
        orderId:
          $ref: '#/components/schemas/orderId'
        invoiceNumber:
          $ref: '#/components/schemas/invoiceNumber'
        transactionDateTime:
          $ref: '#/components/schemas/transactionDateTime'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        modifiedAt:
          $ref: '#/components/schemas/modifiedAt'
        amount:
          description: This amount excludes surcharge, application and convenience fee.
          type: object
          properties:
            amount:
              $ref: '#/components/schemas/amount'
            currency:
              $ref: '#/components/schemas/currency'
          required:
            - amount
            - currency
          example:
            amount: 16000
            currency: CAD
        authorizedAmount:
          description: This represents the funds that are held by the authorization on the payment method.
          type: object
          properties:
            amount:
              $ref: '#/components/schemas/amount'
            currency:
              $ref: '#/components/schemas/currency'
          required:
            - amount
            - currency
          example:
            amount: 16000
            currency: CAD
        capturableAmount:
          description: Remaining amount that can still be captured.
          type: object
          properties:
            amount:
              $ref: '#/components/schemas/amount'
            currency:
              $ref: '#/components/schemas/currency'
          required:
            - amount
            - currency
          example:
            amount: 16000
            currency: CAD
        amountDetails:
          $ref: '#/components/schemas/amountDetails'
        customerId:
          nullable: true
          description: The unique identifier of the customer.
          type: string
          pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
          minLength: 30
          maxLength: 30
          example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodResponse'
        paymentStatus:
          $ref: '#/components/schemas/paymentStatus'
        transactionDetails:
          $ref: '#/components/schemas/statusDetails'
        verificationDetails:
          $ref: '#/components/schemas/verificationDetails'
        credentialOnFileResponse:
          $ref: '#/components/schemas/credentialOnFileResponse'
        refundDetails:
          $ref: '#/components/schemas/refundDetails'
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - paymentId
        - merchantId
        - transactionDateTime
        - createdAt
        - amount
        - authorizedAmount
        - capturableAmount
        - paymentMethod
        - paymentStatus
        - transactionDetails
        - verificationDetails
    self:
      description: Pagination link pointing to the current page.
      type: string
      format: uri-reference
      nullable: true
    first:
      description: Pagination link pointing to the first page.
      type: string
      format: uri-reference
      nullable: true
    last:
      description: Pagination link pointing to the last page.
      type: string
      format: uri-reference
      nullable: true
    next:
      description: Pagination link pointing to the next page.
      type: string
      format: uri-reference
      nullable: true
    previous:
      description: Pagination link pointing to the previous page.
      type: string
      format: uri-reference
      nullable: true
    paymentResponseList:
      title: paymentResponseList
      type: object
      description: Response body, returns a paginated list of payments
      properties:
        data:
          description: Payments list.
          type: array
          items:
            type: object
            $ref: '#/components/schemas/paymentResponse'
        self:
          $ref: '#/components/schemas/self'
        first:
          $ref: '#/components/schemas/first'
        last:
          $ref: '#/components/schemas/last'
        next:
          $ref: '#/components/schemas/next'
        previous:
          $ref: '#/components/schemas/previous'
    parameterError:
      title: Parameter error
      description: Request property or header related error.
      type: object
      properties:
        parameterName:
          type: string
          description: Property or header name. Can contain nested path separated by '.'
          example: address.postalCode
        parameterValue:
          type: string
          nullable: true
          description: Property or header value string representation.
          example: MAP3J8
        reasonCode:
          type: string
          description: Reason that triggered the error.
          enum:
            - INVALID_FORMAT
            - REQUIRED_FIELD
            - INVALID_VALUE
          example: INVALID_FORMAT
        errorMessage:
          type: string
          description: Human readable description of the error.
          nullable: true
          example: String 'MAP3J8' does not match the postal code pattern.
      required:
        - parameterName
        - reasonCode
    error:
      description: Error response details.
      properties:
        type:
          description: |
            A URI reference that identifies the problem type.  Ideally it should be a stable URL to the documentation of the details about this type of error but it also can be a URN.  If nothing can be provided, a "about:blank" value is returned.
          type: string
          format: uri
          example: https://api-developer.moneris.com/responsehandling
        title:
          description: |
            A short, human-readable summary of the problem type.   It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization
          type: string
          example: INSUFFICIENT_FUNDS
          nullable: true
        status:
          description: |
            it conveys the HTTP status code used for the convenience of the consumer.
          type: integer
          format: int32
          minimum: 100
          maximum: 505
          nullable: true
        detail:
          description: |
            A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
          type: string
          example: Funds are insufficient to execute the operation.
          nullable: true
        instance:
          description: |
            A URI reference that identifies the specific occurrence of the problem. Typically, this resolves to a resource that might include more details about the problem.
          type: string
          example: /payments/12f3e0a8-1d68-2b86-dd30-4ca51bb66e10
          format: uri-reference
          nullable: true
        category:
          description: |
            The type of error returned. 
             - `API_ERROR`: This occurs due to an intermittent issue.  
             - `IDEMPOTENCY_ERROR`: The idempotency key has already been used.
             - `INVALID_REQUEST_ERROR`: The data provided in the request is invalid.
             - `DECLINED_ERROR`: Transaction was declined by the issuer.
             - `UNAUTHORIZED_ERROR`: Caller not authenticated, or not allowed to execute the current operation.
             - `INTERNAL_SERVER_ERROR`: An internal issue with our servers has occured.
          enum:
            - API_ERROR
            - IDEMPOTENCY_ERROR
            - INVALID_REQUEST_ERROR
            - DECLINED_ERROR
            - UNAUTHORIZED_ERROR
            - INTERNAL_SERVER_ERROR
            - null
          type: string
          nullable: true
          example: DECLINED_ERROR
        errors:
          type: array
          description: List of validation errors when error category is INVALID_REQUEST_ERROR.
          items:
            type: object
            $ref: '#/components/schemas/parameterError'
          example:
            - parameterName: address.postalCode
              parameterValue: MAP3J8
              errorMessage: address.Postal code does not match regular expression
              reasonCode: INVALID_FORMAT
      title: API Error
      type: object
      required:
        - type
    idempotencyKey:
      type: string
      description: |
        A Unique Identifier that is required for handling idempotent requests. 

        Note: Moneris encourages the use of UUID Version 4 in APIs as an idempotency key."    
      minLength: 1
      maxLength: 36
      example: 6q5w4e7r8t9y
    paymentMethodRequestSource:
      type: string
      description: |
        The source of Payment Method being used. It can be:
          - The Id of a Payment Method already created.
          - Permanent Token.
          - Temporary Token.
          - Card.
          - E-Wallet.
      enum:
        - PAYMENT_METHOD_ID
        - CARD
        - TEMPORARY_TOKEN
        - PERMANENT_TOKEN
        - APPLE_PAY_ENCRYPTED
        - APPLE_PAY_DECRYPTED
        - GOOGLE_PAY_ENCRYPTED
        - GOOGLE_PAY_DECRYPTED
    paymentMethodWithId:
      title: paymentMethodWithId
      description: Use existing unique payment method identifier.
      properties:
        paymentMethodSource:
          $ref: '#/components/schemas/paymentMethodRequestSource'
        paymentMethodId:
          $ref: '#/components/schemas/resourceId'
      required:
        - paymentMethodSource
        - paymentMethodId
    paymentIndicator:
      type: string
      description: |
        Indicates the current or intended use of the credentials
        - **UNSCHEDULED_CREDENTIAL_ON_FILE**: unscheduled Credential on File (first transactions only)
        - **RECURRING**: recurring transaction
        - **MERCHANT_INITIATED**: unscheduled merchant-initiated transaction
        - **VARIABLE_RECURRING**: recurring variable payment transaction
        - **CUSTOMER_INITIATED**: unscheduled customer-initiated transaction
      enum:
        - UNSCHEDULED_CREDENTIAL_ON_FILE
        - RECURRING
        - MERCHANT_INITIATED
        - VARIABLE_RECURRING
        - CUSTOMER_INITIATED
      example: UNSCHEDULED_CREDENTIAL_ON_FILE
    paymentInformation:
      type: string
      description: Describes whether the transaction is the first or subsequent in the series
      enum:
        - FIRST
        - SUBSEQUENT
      example: FIRST
    storePaymentMethodIdRequest:
      title: storePaymentMethodIdRequest
      allOf:
        - $ref: '#/components/schemas/paymentMethodWithId'
        - type: object
          properties:
            storePaymentMethod:
              $ref: '#/components/schemas/storePaymentMethod'
            credentialOnFileInformation:
              nullable: true
              type: object
              description: 'Contains fields related to the Credential on File (CoF) '
              properties:
                paymentIndicator:
                  $ref: '#/components/schemas/paymentIndicator'
                paymentInformation:
                  $ref: '#/components/schemas/paymentInformation'
                issuerId:
                  $ref: '#/components/schemas/issuerId'
                originalAmount:
                  $ref: '#/components/schemas/originalAmount'
              required:
                - paymentIndicator
                - paymentInformation
              example:
                paymentIndicator: CUSTOMER_INITIATED
                paymentInformation: FIRST
                issuerId: 123asd
    cardNumber:
      type: string
      description: Identifies the customer's credit or debit card number (Primary Account Number).
      minLength: 13
      maxLength: 19
      example: '4444111122223333'
    cardSecurityCode:
      type: string
      pattern: '[0-9]*'
      description: CVD value located on credit card. The CVD value (supplied by the cardholder) must only be passed to the payment gateway. Under no circumstances may it be stored for subsequent use or displayed as part of the receipt information.
      minLength: 3
      maxLength: 4
      example: '123'
    card:
      type: object
      description: Card details
      properties:
        cardNumber:
          $ref: '#/components/schemas/cardNumber'
        expiryMonth:
          $ref: '#/components/schemas/expiryMonth'
        expiryYear:
          $ref: '#/components/schemas/expiryYear'
        cardSecurityCode:
          $ref: '#/components/schemas/cardSecurityCode'
      required:
        - cardNumber
        - expiryMonth
        - expiryYear
        - cardSecurityCode
    paymentMethodRequestBase:
      description: |
        Payment Method details.

        Note: If defined, this will result in the creation of Payment Method as defined in the Payment Method API.
      type: object
      properties:
        cardholderInformation:
          $ref: '#/components/schemas/cardholderInformation'
        contactDetails:
          $ref: '#/components/schemas/contactDetails'
        billingAddress:
          nullable: true
          type: object
          description: |
            The postal address including street, town/city, province, and postal code.
            Optionally an unit number can be provided.
          properties:
            unitNumber:
              nullable: true
              type: string
              description: Unit number
              minLength: 1
              maxLength: 19
              example: 123A
            streetNumber:
              nullable: true
              type: string
              description: Street number
              minLength: 1
              maxLength: 19
              example: '3300'
            streetName:
              nullable: true
              type: string
              description: Street name
              minLength: 1
              maxLength: 100
              example: Bloor
            city:
              nullable: true
              type: string
              description: |
                Identifies the city.
              minLength: 1
              maxLength: 50
              example: Toronto
            province:
              nullable: true
              type: string
              description: 'Province or state ISO 3166-2 code '
              minLength: 1
              maxLength: 3
              example: 'ON'
            postalCode:
              nullable: true
              type: string
              description: Postal or zip code
              minLength: 1
              maxLength: 30
              example: M8X 2X2
            country:
              nullable: true
              type: string
              description: |
                Provides the two letter country code according the ISO 3166-1 alpha-2 standard. 
                For a complete list of country codes, visit: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
              minLength: 2
              maxLength: 2
              example: CA
              format: iso-3166
          example:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
        paymentMethodSource:
          $ref: '#/components/schemas/paymentMethodRequestSource'
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - paymentMethodSource
    paymentMethodCard:
      title: paymentMethodCard
      description: Credit/Debit/Gift Card payment method details.
      allOf:
        - type: object
          properties:
            card:
              $ref: '#/components/schemas/card'
          required:
            - card
        - $ref: '#/components/schemas/paymentMethodRequestBase'
      required:
        - paymentMethodSource
        - card
    storePaymentMethodCardRequest:
      title: storePaymentMethodCardRequest
      allOf:
        - $ref: '#/components/schemas/paymentMethodCard'
        - type: object
          properties:
            storePaymentMethod:
              $ref: '#/components/schemas/storePaymentMethod'
            credentialOnFileInformation:
              nullable: true
              type: object
              description: 'Contains fields related to the Credential on File (CoF) '
              properties:
                paymentIndicator:
                  $ref: '#/components/schemas/paymentIndicator'
                paymentInformation:
                  $ref: '#/components/schemas/paymentInformation'
                issuerId:
                  $ref: '#/components/schemas/issuerId'
                originalAmount:
                  $ref: '#/components/schemas/originalAmount'
              required:
                - paymentIndicator
                - paymentInformation
              example:
                paymentIndicator: CUSTOMER_INITIATED
                paymentInformation: FIRST
                issuerId: 123asd
    token:
      type: string
      description: Created when a temporary token is created and returned. This acts as a unique profile identifier, and is a required value for temporary token transactions.
      minLength: 25
      maxLength: 28
      example: ot-HCUeCFtXJfEZSSUqvUJkS0
    paymentMethodTemporaryToken:
      title: paymentMethodTemporaryToken
      description: |
        A Temporary Token is issued by Moneris to the merchant and represents the card details. Please review the Hosted Tokenization feature documentation to learn how to issue such a token.
      allOf:
        - type: object
          properties:
            temporaryToken:
              $ref: '#/components/schemas/token'
          required:
            - paymentMethodSource
            - temporaryToken
        - $ref: '#/components/schemas/paymentMethodRequestBase'
      required:
        - paymentMethodSource
        - temporaryToken
    storePaymentMethodTemporaryTokenRequest:
      title: storePaymentMethodTemporaryTokenRequest
      allOf:
        - $ref: '#/components/schemas/paymentMethodTemporaryToken'
        - type: object
          properties:
            storePaymentMethod:
              $ref: '#/components/schemas/storePaymentMethod'
            credentialOnFileInformation:
              nullable: true
              type: object
              description: 'Contains fields related to the Credential on File (CoF) '
              properties:
                paymentIndicator:
                  $ref: '#/components/schemas/paymentIndicator'
                paymentInformation:
                  $ref: '#/components/schemas/paymentInformation'
                issuerId:
                  $ref: '#/components/schemas/issuerId'
                originalAmount:
                  $ref: '#/components/schemas/originalAmount'
              required:
                - paymentIndicator
                - paymentInformation
              example:
                paymentIndicator: CUSTOMER_INITIATED
                paymentInformation: FIRST
                issuerId: 123asd
    paymentMethodPermanentToken:
      title: paymentMethodPermanentToken
      description: |
        A Permanent Token is issued by Moneris to the merchant and represents the card details. This option is used for legacy purposes.
      allOf:
        - type: object
          properties:
            permanentToken:
              $ref: '#/components/schemas/token'
          required:
            - permanentToken
        - $ref: '#/components/schemas/paymentMethodRequestBase'
      required:
        - paymentMethodSource
        - permanentToken
    storePermanentToken:
      description: |
        Store this payment method created through this payment for future use. 
        - CARDHOLDER_INITIATED: Payment method to be stored and can only re-used with cardholder's consent. Limited to store, pre-authorisation, and card validations."
        - MERCHANT_INITIATED: Payment method to be stored and can be reused without the cardholder's consent. For example, recurring payments.
      type: string
      default: MERCHANT_INITIATED
      enum:
        - CARDHOLDER_INITIATED
        - MERCHANT_INITIATED
    credentialOnFileInformation:
      type: object
      description: 'Contains fields related to the Credential on File (CoF) '
      properties:
        paymentIndicator:
          $ref: '#/components/schemas/paymentIndicator'
        paymentInformation:
          $ref: '#/components/schemas/paymentInformation'
        issuerId:
          $ref: '#/components/schemas/issuerId'
        originalAmount:
          $ref: '#/components/schemas/originalAmount'
      required:
        - paymentIndicator
        - paymentInformation
      example:
        paymentIndicator: CUSTOMER_INITIATED
        paymentInformation: FIRST
        issuerId: 123asd
    storePaymentMethodPermanentTokenRequest:
      title: storePaymentMethodPermanentTokenRequest
      allOf:
        - $ref: '#/components/schemas/paymentMethodPermanentToken'
        - type: object
          properties:
            storePaymentMethod:
              $ref: '#/components/schemas/storePermanentToken'
            credentialOnFileInformation:
              $ref: '#/components/schemas/credentialOnFileInformation'
          required:
            - credentialOnFileInformation
    walletIndicator:
      type: string
      description: |
        Only available to Canada integrations.
        Applies to merchants using their own API for transaction payload encryptions for Apple Pay and Google Pay transactions.
        **NOTE**: This field is mandatory for wallet transactions and is case senstive."
      enum:
        - IN_APPLICATION
        - IN_BROWSER
    applePayEncryptedWallet:
      title: applePayEncryptedWallet
      description: Apple Pay encrypted wallet details.
      allOf:
        - $ref: '#/components/schemas/paymentMethodRequestBase'
        - type: object
          properties:
            displayName:
              type: string
              description: Display Name
              example: MasterCard 4079
            cardBrand:
              type: string
              description: Card Brand.
              enum:
                - MASTERCARD
                - VISA
                - AMERICAN_EXPRESS
                - INTERAC
                - DISCOVER
              example: MASTERCARD
            applePayVersion:
              type: string
              description: |
                Version information about the payment token.
                  - EC_V1: For ECC-encrypted data
                  - RSA_V1: For RSA-encrypted data
              enum:
                - EC_V1
                - RSA_V1
              example: EC_V1
            data:
              type: string
              description: |
                Encrypted payment data. Base64 encoded as a string.
              format: byte
              example: MTIzNDU2Njc4OQ==
            signature:
              type: string
              description: |
                Signature of the payment and header data, Base64 encoded as a string. The signature includes the signing certificate, its intermediate CA certificate, and information about the signing algorithm. Can be a detached PKCS #7 signature, Base64 encoded as a string
            publicKeyHash:
              type: string
              description: |
                Hash of the X.509 encoded public key bytes of the merchant’s certificate. Can be either a base64 encoded or SHA-256 Hash string.
            ephemeralPublicKey:
              type: string
              description: |
                Ephemeral public key bytes. Only for RSA_v1. Can be either a base64 encoded string or X.509 bytes.
              format: byte
            applePayTransactionId:
              type: string
              description: The Apple Pay unique identifier for a transaction such as an in-app purchase, restored in-app purchase, or subscription renewal.
            walletIndicator:
              $ref: '#/components/schemas/walletIndicator'
          required:
            - displayName
            - cardBrand
            - applePayVersion
            - data
            - signature
            - publicKeyHash
            - ephemeralPublicKey
            - applePayTransactionId
            - walletIndicator
      required:
        - paymentMethodSource
    storeApplePayEncryptedWalletRequest:
      title: storeApplePayEncryptedWalletRequest
      allOf:
        - $ref: '#/components/schemas/applePayEncryptedWallet'
        - type: object
          properties:
            storePaymentMethod:
              $ref: '#/components/schemas/storePaymentMethod'
            credentialOnFileInformation:
              nullable: true
              type: object
              description: 'Contains fields related to the Credential on File (CoF) '
              properties:
                paymentIndicator:
                  $ref: '#/components/schemas/paymentIndicator'
                paymentInformation:
                  $ref: '#/components/schemas/paymentInformation'
                issuerId:
                  $ref: '#/components/schemas/issuerId'
                originalAmount:
                  $ref: '#/components/schemas/originalAmount'
              required:
                - paymentIndicator
                - paymentInformation
              example:
                paymentIndicator: CUSTOMER_INITIATED
                paymentInformation: FIRST
                issuerId: 123asd
    deviceManufacturerIdentifier:
      type: string
      description: Hex-encoded device manufacturer identifier
      nullable: true
    dataType:
      type: string
      description: |
        Only available to Canada integrations.

        Applies to merchants using their own API for transaction payload encryptions and is mandatory for INTERAC® e-Commerce Apple Pay and Google Pay transactions.
      enum:
        - THREE_D_SECURE
        - EMV
    walletCryptogram:
      type: string
      description: Token cryptogram or encoded Base64 for Interac Wallets.
      maxLength: 500
      example: 8YGKgiD0iJic84fBLVj3QuwuclqLp7QvizbKnGRYAMVfVwBobYMBAIQBAIUBAIZTWgpQdgQQKZkZFHGfXySDKRAxXyoCASSfAgYAAAAQAABfIAIgL58ZBgSSSSSSSL9JIoEgAAMj1qj1U9jsORa1qxqAEAHOBAAEAECKALEAAAADEACHCAAAAAAAAAAAkAA=
    walletEcommerceIndicator:
      type: string
      description: ECI Indicator as provided by the Wallet.
      nullable: true
    applePayDecryptedWallet:
      title: applePayDecryptedWallet
      description: Apple Pay wallet details after decrypting the token.
      allOf:
        - $ref: '#/components/schemas/paymentMethodRequestBase'
        - type: object
          properties:
            applicationPrimaryAccountNumber:
              description: The unique identifier for the primary account number for the payment card.
              type: string
              minLength: 13
              maxLength: 19
              example: '4444111122223333'
            expiryMonth:
              $ref: '#/components/schemas/expiryMonth'
            expiryYear:
              $ref: '#/components/schemas/expiryYear'
            deviceManufacturerIdentifier:
              $ref: '#/components/schemas/deviceManufacturerIdentifier'
            dataType:
              $ref: '#/components/schemas/dataType'
            cryptogram:
              $ref: '#/components/schemas/walletCryptogram'
            cardBrand:
              type: string
              description: Card Brand.
              enum:
                - MASTERCARD
                - VISA
                - AMERICAN_EXPRESS
                - INTERAC
                - DISCOVER
            walletEcommerceIndicator:
              $ref: '#/components/schemas/walletEcommerceIndicator'
            walletIndicator:
              $ref: '#/components/schemas/walletIndicator'
          required:
            - applicationPrimaryAccountNumber
            - expiryMonth
            - expiryYear
            - dataType
            - cryptogram
            - cardBrand
            - walletIndicator
      required:
        - paymentMethodSource
    storeApplePayDecryptedWalletRequest:
      title: storeApplePayDecryptedWalletRequest
      allOf:
        - $ref: '#/components/schemas/applePayDecryptedWallet'
        - type: object
          properties:
            storePaymentMethod:
              $ref: '#/components/schemas/storePaymentMethod'
            credentialOnFileInformation:
              nullable: true
              type: object
              description: 'Contains fields related to the Credential on File (CoF) '
              properties:
                paymentIndicator:
                  $ref: '#/components/schemas/paymentIndicator'
                paymentInformation:
                  $ref: '#/components/schemas/paymentInformation'
                issuerId:
                  $ref: '#/components/schemas/issuerId'
                originalAmount:
                  $ref: '#/components/schemas/originalAmount'
              required:
                - paymentIndicator
                - paymentInformation
              example:
                paymentIndicator: CUSTOMER_INITIATED
                paymentInformation: FIRST
                issuerId: 123asd
    googlePayEncryptedWallet:
      title: googlePayEncryptedWallet
      description: Apple Pay encrypted wallet details.
      allOf:
        - $ref: '#/components/schemas/paymentMethodRequestBase'
        - type: object
          properties:
            cardBrand:
              type: string
              description: Card Brand.
              enum:
                - MASTERCARD
                - VISA
                - AMERICAN_EXPRESS
                - INTERAC
              example: INTERAC
            signature:
              type: string
              description: |
                Verifies that the message came from Google.  It's base64-encoded, and created with ECDSA by the intermediate signing key.
            googlePayProtocolVersion:
              type: string
              description: |
                Identifies the encryption or signing scheme under which the message is created. 
                It allows the protocol to evolve over time, if needed.
                Must be fowarded as provided by Google Pay.
              example: ECv1
            signedMessage:
              type: string
              description: |
                A JSON object serialized as an HTML-safe string that contains the encryptedMessage, ephemeralPublicKey, and tag.  It's serialized to simplify the signature verification process.
            walletIndicator:
              $ref: '#/components/schemas/walletIndicator'
          required:
            - cardBrand
            - signature
            - googlePayProtocolVersion
            - signedMessage
            - walletIndicator
      required:
        - paymentMethodSource
    storeGooglePayEncryptedWalletRequest:
      title: storeGooglePayEncryptedWalletRequest
      allOf:
        - $ref: '#/components/schemas/googlePayEncryptedWallet'
        - type: object
          properties:
            storePaymentMethod:
              $ref: '#/components/schemas/storePaymentMethod'
            credentialOnFileInformation:
              nullable: true
              type: object
              description: 'Contains fields related to the Credential on File (CoF) '
              properties:
                paymentIndicator:
                  $ref: '#/components/schemas/paymentIndicator'
                paymentInformation:
                  $ref: '#/components/schemas/paymentInformation'
                issuerId:
                  $ref: '#/components/schemas/issuerId'
                originalAmount:
                  $ref: '#/components/schemas/originalAmount'
              required:
                - paymentIndicator
                - paymentInformation
              example:
                paymentIndicator: CUSTOMER_INITIATED
                paymentInformation: FIRST
                issuerId: 123asd
    googlePayDecryptedCardDetails:
      description: |
        The payment credential itself.  The format of this object is determined by the paymentMethod
      type: object
      properties:
        personalAccountNumber:
          description: The personal account number charged. This string contains only digits.
          type: string
          minLength: 13
          maxLength: 19
          example: '4444111122223333'
        expiryMonth:
          $ref: '#/components/schemas/expiryMonth'
        expiryYear:
          $ref: '#/components/schemas/expiryYear'
        authenticationMethod:
          description: |
            The authentication method of the card transaction.
            Must be forwarded as provided by Google Pay.
          type: string
          nullable: true
        cryptogram:
          nullable: true
          type: string
          description: Token cryptogram or encoded Base64 for Interac Wallets.
          maxLength: 500
          example: 8YGKgiD0iJic84fBLVj3QuwuclqLp7QvizbKnGRYAMVfVwBobYMBAIQBAIUBAIZTWgpQdgQQKZkZFHGfXySDKRAxXyoCASSfAgYAAAAQAABfIAIgL58ZBgSSSSSSSL9JIoEgAAMj1qj1U9jsORa1qxqAEAHOBAAEAECKALEAAAADEACHCAAAAAAAAAAAkAA=
        walletEcommerceIndicator:
          $ref: '#/components/schemas/walletEcommerceIndicator'
      required:
        - personalAccountNumber
        - expiryMonth
        - expiryYear
    googlePayDecryptedWallet:
      title: googlePayDecryptedWallet
      description: Google Pay wallet details after decrypting the token.
      allOf:
        - $ref: '#/components/schemas/paymentMethodRequestBase'
        - type: object
          properties:
            gatewayMerchantId:
              nullable: true
              type: string
              description: Gateway unique store id
              example: cagw123456
            messageExpiration:
              type: string
              nullable: true
              format: date-time
              description: |
                Date and time at which the message expires. Integrators should reject any message that's expired.
              example: '2024-09-19T00:00:00Z'
            messageId:
              type: string
              nullable: true
              description: A unique ID that identifies the message in case it needs to be revoked or located at a later time.
            walletSource:
              type: string
              description: |
                The type of the payment credential. Supported values are:
                  - CARD
                  - TOKENIZED_CARD
              enum:
                - CARD
                - TOKENIZED_CARD
            cardBrand:
              type: string
              description: Card Network.
              enum:
                - MASTERCARD
                - VISA
                - AMERICAN_EXPRESS
                - INTERAC
            walletIndicator:
              $ref: '#/components/schemas/walletIndicator'
            cardDetails:
              $ref: '#/components/schemas/googlePayDecryptedCardDetails'
          required:
            - walletSource
            - cardBrand
            - cardDetails
            - walletIndicator
      required:
        - paymentMethodSource
    storeGooglePayDecryptedWalletRequest:
      title: storeGooglePayDecryptedWalletRequest
      allOf:
        - $ref: '#/components/schemas/googlePayDecryptedWallet'
        - type: object
          properties:
            storePaymentMethod:
              $ref: '#/components/schemas/storePaymentMethod'
            credentialOnFileInformation:
              nullable: true
              type: object
              description: 'Contains fields related to the Credential on File (CoF) '
              properties:
                paymentIndicator:
                  $ref: '#/components/schemas/paymentIndicator'
                paymentInformation:
                  $ref: '#/components/schemas/paymentInformation'
                issuerId:
                  $ref: '#/components/schemas/issuerId'
                originalAmount:
                  $ref: '#/components/schemas/originalAmount'
              required:
                - paymentIndicator
                - paymentInformation
              example:
                paymentIndicator: CUSTOMER_INITIATED
                paymentInformation: FIRST
                issuerId: 123asd
    storePaymentMethodRequest:
      title: storePaymentMethodRequest
      description: |
        Used to collect payment data needed to execute the transaction. 
        Can also be used to collect and save customer payment instruments on file. 
      oneOf:
        - $ref: '#/components/schemas/storePaymentMethodIdRequest'
        - $ref: '#/components/schemas/storePaymentMethodCardRequest'
        - $ref: '#/components/schemas/storePaymentMethodTemporaryTokenRequest'
        - $ref: '#/components/schemas/storePaymentMethodPermanentTokenRequest'
        - $ref: '#/components/schemas/storeApplePayDecryptedWalletRequest'
        - $ref: '#/components/schemas/storeApplePayEncryptedWalletRequest'
        - $ref: '#/components/schemas/storeGooglePayDecryptedWalletRequest'
        - $ref: '#/components/schemas/storeGooglePayEncryptedWalletRequest'
      discriminator:
        propertyName: paymentMethodSource
        mapping:
          PAYMENT_METHOD_ID: '#/components/schemas/storePaymentMethodIdRequest'
          CARD: '#/components/schemas/storePaymentMethodCardRequest'
          TEMPORARY_TOKEN: '#/components/schemas/storePaymentMethodTemporaryTokenRequest'
          PERMANENT_TOKEN: '#/components/schemas/storePaymentMethodPermanentTokenRequest'
          APPLE_PAY_ENCRYPTED: '#/components/schemas/storeApplePayEncryptedWalletRequest'
          APPLE_PAY_DECRYPTED: '#/components/schemas/storeApplePayDecryptedWalletRequest'
          GOOGLE_PAY_ENCRYPTED: '#/components/schemas/storeGooglePayEncryptedWalletRequest'
          GOOGLE_PAY_DECRYPTED: '#/components/schemas/storeGooglePayDecryptedWalletRequest'
      required:
        - paymentMethodSource
    automaticCapture:
      type: boolean
      description: |
        - **true**: (Default) will prompt Moneris to capture the payment when it is authorized. This performs a Purchase transaction.
        - **false**: will prompt Moneris to place a hold on the funds when the payment is authorized. This performs a Pre-Authorization transaction.
      default: true
    threeDSecureWithAuthenticationId:
      title: Three DS Authentication Id
      type: object
      properties:
        threeDSecureAuthenticationId:
          $ref: '#/components/schemas/resourceId'
      required:
        - threeDSecureAuthenticationId
    threeDSecureAuthenticationValue:
      type: string
      description: |
        **CAVV**: Cardholder Authentication Verification Value
        Provided during a payment request to authenticate the card user.
      maxLength: 50
      example: '00000109260000719349'
      nullable: true
    threeDSecureVersion:
      type: string
      description: Required when sending a 3-D Secure version 2.0+ transaction. If no value is provided, default to V1.
      maxLength: 10
      example: '2.2'
    threeDSecureServerTransactionId:
      type: string
      description: "Indicates information required when sending a version 3-D Secure 2.0+ transaction. \n\nThis data is obtained from a CAVV Lookup Request or MPI\_3DS\_Authentication Request transaction.\n"
      format: uuid
      example: ad9b0eda-bf9b-4288-b188-9467993603e1
    threeDSecureDirectoryServerTransactionId:
      type: string
      description: Universally unique transaction identifier assigned by the 3DS Directory Server (DS) to identify a single transaction.
      format: uuid
      example: ad9b0eda-bf9b-4288-b188-9467993603e1
    threeDSecureWithAuthenticationData:
      type: object
      title: Three DS Authentication Data
      properties:
        threeDSecureAuthenticationValue:
          $ref: '#/components/schemas/threeDSecureAuthenticationValue'
        threeDSecureVersion:
          $ref: '#/components/schemas/threeDSecureVersion'
        threeDSecureServerTransactionId:
          $ref: '#/components/schemas/threeDSecureServerTransactionId'
        threeDSecureDirectoryServerTransactionId:
          $ref: '#/components/schemas/threeDSecureDirectoryServerTransactionId'
      required:
        - threeDSecureAuthenticationValue
        - threeDSecureVersion
        - threeDSecureServerTransactionId
        - threeDSecureDirectoryServerTransactionId
    threeDSecureData:
      description: Data related to 3-D Secure
      type: object
      nullable: true
      oneOf:
        - $ref: '#/components/schemas/threeDSecureWithAuthenticationId'
        - $ref: '#/components/schemas/threeDSecureWithAuthenticationData'
    ipv4:
      type: string
      format: ipv4
      description: Internet Protocol version 4 (IPv4).
      example: 104.75.173.179
      nullable: true
    ipv6:
      type: string
      format: ipv6
      description: Internet Protocol version 6 (IPv6).
      example: 2600:1401:2::8a
      nullable: true
    createPaymentRequest:
      title: paymentRequest
      type: object
      description: Request body, used to initiate a payment
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        orderId:
          $ref: '#/components/schemas/orderId'
        invoiceNumber:
          $ref: '#/components/schemas/invoiceNumber'
        amount:
          description: This amount excludes surcharge, application and converience fee.
          type: object
          properties:
            amount:
              $ref: '#/components/schemas/amount'
            currency:
              $ref: '#/components/schemas/currency'
          required:
            - amount
            - currency
          example:
            amount: 16000
            currency: CAD
        amountDetails:
          $ref: '#/components/schemas/amountDetails'
        customerId:
          nullable: true
          description: The unique identifier of the customer.
          type: string
          pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
          minLength: 30
          maxLength: 30
          example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          $ref: '#/components/schemas/storePaymentMethodRequest'
        ecommerceIndicator:
          description: Describes the category of e-commerce transaction being processed.
          type: string
          enum:
            - MAIL_TELEPHONE_ORDER_SINGLE
            - MAIL_TELEPHONE_ORDER_RECURRING
            - MAIL_TELEPHONE_ORDER_INSTALMENT
            - MAIL_TELEPHONE_ORDER_UNKNOWN
            - AUTHENTICATED_ECOMMERCE
            - NON_AUTHENTICATED_ECOMMERCE
            - SSL_MERCHANT
          example: AUTHENTICATED_ECOMMERCE
          default: SSL_MERCHANT
        automaticCapture:
          $ref: '#/components/schemas/automaticCapture'
        customData:
          nullable: true
          description: Merchant can send custom meta data with the transaction in this object. Moneris will echo these values back in response.
          type: object
          additionalProperties:
            type: string
            minLength: 1
            maxLength: 50
          maxProperties: 10
        dynamicDescriptor:
          nullable: true
          type: string
          description: |
            Merchant defined description sent on a per-transaction basis that will appear on the credit card statement.  

            Dependent on the card Issuer, the statement will typically show the dynamic descriptor appended to the merchant's existing business name separated by the '/' character.  

            **Note**: The combined length of the merchant's business name, forward slash '/' character, and the dynamic descriptor may not exceed 22 characters.
          minLength: 1
          maxLength: 20
          example: moneris
        threeDSecureData:
          $ref: '#/components/schemas/threeDSecureData'
        ipv4:
          $ref: '#/components/schemas/ipv4'
        ipv6:
          $ref: '#/components/schemas/ipv6'
      required:
        - idempotencyKey
        - paymentMethod
        - amount
    cancelPaymentRequest:
      title: cancelPaymentRequest
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        customData:
          $ref: '#/components/schemas/customData'
        reason:
          nullable: true
          description: |
            Reason for canceling the payment.

            Note: This is a notational field.
          type: string
          minLength: 1
          maxLength: 100
          example: Defective product
      required:
        - idempotencyKey
    completionRequest:
      title: completionRequest
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        invoiceNumber:
          $ref: '#/components/schemas/invoiceNumber'
        customData:
          $ref: '#/components/schemas/customData'
        amount:
          nullable: true
          title: completionAmount
          type: object
          description: |
            The amount for the transaction. 
            Note: The value must be in cents. Therefore $10.59 must be sent as 1059.
          properties:
            amount:
              $ref: '#/components/schemas/amount'
            currency:
              $ref: '#/components/schemas/currency'
          required:
            - amount
            - currency
          example:
            amount: 16000
            currency: CAD
      required:
        - idempotencyKey
    paymentMethodResponseList:
      description: List of Payment Methods
      type: object
      title: paymentMethodResponseList
      properties:
        data:
          description: Payment Method list
          type: array
          items:
            type: object
            $ref: '#/components/schemas/paymentMethodResponse'
        self:
          $ref: '#/components/schemas/self'
        first:
          $ref: '#/components/schemas/first'
        last:
          $ref: '#/components/schemas/last'
        next:
          $ref: '#/components/schemas/next'
        previous:
          $ref: '#/components/schemas/previous'
    createCardPaymentMethodRequest:
      title: createCardPaymentMethodRequest
      allOf:
        - type: object
          properties:
            idempotencyKey:
              $ref: '#/components/schemas/idempotencyKey'
          required:
            - idempotencyKey
        - $ref: '#/components/schemas/paymentMethodCard'
    createTemporaryTokenPaymentMethodRequest:
      title: createTemporaryTokenPaymentMethodRequest
      allOf:
        - type: object
          properties:
            idempotencyKey:
              $ref: '#/components/schemas/idempotencyKey'
          required:
            - idempotencyKey
        - $ref: '#/components/schemas/paymentMethodTemporaryToken'
    createPermanentTokenPaymentMethodRequest:
      title: createPermanentTokenPaymentMethodRequest
      allOf:
        - type: object
          properties:
            idempotencyKey:
              $ref: '#/components/schemas/idempotencyKey'
          required:
            - idempotencyKey
        - $ref: '#/components/schemas/paymentMethodPermanentToken'
    createApplePayEncryptedWalletPaymentMethodRequest:
      title: createApplePayEncryptedWalletPaymentMethodRequest
      allOf:
        - type: object
          properties:
            idempotencyKey:
              $ref: '#/components/schemas/idempotencyKey'
          required:
            - idempotencyKey
        - $ref: '#/components/schemas/applePayEncryptedWallet'
    createApplePayDecryptedWalletPaymentMethodRequest:
      title: createApplePayDecryptedWalletPaymentMethodRequest
      allOf:
        - type: object
          properties:
            idempotencyKey:
              $ref: '#/components/schemas/idempotencyKey'
          required:
            - idempotencyKey
        - $ref: '#/components/schemas/applePayDecryptedWallet'
    createGooglePayEncryptedWalletPaymentMethodRequest:
      title: createGooglePayEncryptedWalletPaymentMethodRequest
      allOf:
        - type: object
          properties:
            idempotencyKey:
              $ref: '#/components/schemas/idempotencyKey'
          required:
            - idempotencyKey
        - $ref: '#/components/schemas/googlePayEncryptedWallet'
    createGooglePayDecryptedWalletPaymentMethodRequest:
      title: createGooglePayDecryptedWalletPaymentMethodRequest
      allOf:
        - type: object
          properties:
            idempotencyKey:
              $ref: '#/components/schemas/idempotencyKey'
          required:
            - idempotencyKey
        - $ref: '#/components/schemas/googlePayDecryptedWallet'
    createPaymentMethodRequest:
      title: createPaymentMethodRequest
      oneOf:
        - $ref: '#/components/schemas/createCardPaymentMethodRequest'
        - $ref: '#/components/schemas/createTemporaryTokenPaymentMethodRequest'
        - $ref: '#/components/schemas/createPermanentTokenPaymentMethodRequest'
        - $ref: '#/components/schemas/createApplePayEncryptedWalletPaymentMethodRequest'
        - $ref: '#/components/schemas/createApplePayDecryptedWalletPaymentMethodRequest'
        - $ref: '#/components/schemas/createGooglePayEncryptedWalletPaymentMethodRequest'
        - $ref: '#/components/schemas/createGooglePayDecryptedWalletPaymentMethodRequest'
      discriminator:
        propertyName: paymentMethodSource
        mapping:
          CARD: '#/components/schemas/createCardPaymentMethodRequest'
          TEMPORARY_TOKEN: '#/components/schemas/createTemporaryTokenPaymentMethodRequest'
          PERMANENT_TOKEN: '#/components/schemas/createPermanentTokenPaymentMethodRequest'
          APPLE_PAY_ENCRYPTED: '#/components/schemas/createApplePayEncryptedWalletPaymentMethodRequest'
          APPLE_PAY_DECRYPTED: '#/components/schemas/createApplePayDecryptedWalletPaymentMethodRequest'
          GOOGLE_PAY_ENCRYPTED: '#/components/schemas/createGooglePayEncryptedWalletPaymentMethodRequest'
          GOOGLE_PAY_DECRYPTED: '#/components/schemas/createGooglePayDecryptedWalletPaymentMethodRequest'
      required:
        - paymentMethodSource
    updatePaymentMethodRequest:
      title: updatePaymentMethodRequest
      oneOf:
        - $ref: '#/components/schemas/paymentMethodCard'
        - $ref: '#/components/schemas/paymentMethodTemporaryToken'
        - $ref: '#/components/schemas/paymentMethodPermanentToken'
        - $ref: '#/components/schemas/applePayEncryptedWallet'
        - $ref: '#/components/schemas/applePayDecryptedWallet'
        - $ref: '#/components/schemas/googlePayEncryptedWallet'
        - $ref: '#/components/schemas/googlePayDecryptedWallet'
      discriminator:
        propertyName: paymentMethodSource
        mapping:
          CARD: '#/components/schemas/paymentMethodCard'
          TEMPORARY_TOKEN: '#/components/schemas/paymentMethodTemporaryToken'
          PERMANENT_TOKEN: '#/components/schemas/paymentMethodPermanentToken'
          APPLE_PAY_ENCRYPTED: '#/components/schemas/applePayEncryptedWallet'
          APPLE_PAY_DECRYPTED: '#/components/schemas/applePayDecryptedWallet'
          GOOGLE_PAY_ENCRYPTED: '#/components/schemas/googlePayEncryptedWallet'
          GOOGLE_PAY_DECRYPTED: '#/components/schemas/googlePayDecryptedWallet'
      required:
        - paymentMethodSource
    paymentReference:
      description: Payment reference. Can be expanded into full payment details using the expand query parameter.
      type: object
      nullable: true
      properties:
        paymentId:
          $ref: '#/components/schemas/resourceId'
      required:
        - paymentId
    refundAmount:
      type: object
      description: |
        Refund amount for the transaction. 
        Note: The value must be in cents. Therefore $10.59 must be sent as 1059
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
      required:
        - amount
        - currency
      example:
        amount: 17500
        currency: CAD
    refundStatus:
      type: string
      description: Refund Status description.
      enum:
        - DECLINED
        - DECLINED_RETRY
        - PROCESSING
        - SUCCEEDED
      example: SUCCEEDED
    reason:
      type: string
      description: Reason for the refund.
      minLength: 1
      maxLength: 100
      example: Defective product
      nullable: true
    refundResponse:
      title: refundResponse
      type: object
      properties:
        refundId:
          description: The unique identifier of the refund
          type: string
          pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
          minLength: 30
          maxLength: 30
          example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        payment:
          $ref: '#/components/schemas/paymentReference'
        orderId:
          $ref: '#/components/schemas/orderId'
        merchantId:
          $ref: '#/components/schemas/merchantId'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodResponse'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        modifiedAt:
          $ref: '#/components/schemas/modifiedAt'
        refundAmount:
          $ref: '#/components/schemas/refundAmount'
        customerId:
          nullable: true
          description: Unique Customer Identifier.
          type: string
          pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
          minLength: 30
          maxLength: 30
          example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        refundStatus:
          $ref: '#/components/schemas/refundStatus'
        transactionDetails:
          $ref: '#/components/schemas/statusDetails'
        reason:
          $ref: '#/components/schemas/reason'
        credentialOnFileResponse:
          $ref: '#/components/schemas/credentialOnFileResponse'
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - refundId
        - merchantId
        - paymentMethod
        - createdAt
        - refundAmount
        - refundStatus
        - transactionDetails
    refundResponseList:
      title: refundResponseList
      type: object
      properties:
        data:
          description: List of refunds.
          type: array
          items:
            type: object
            $ref: '#/components/schemas/refundResponse'
        self:
          $ref: '#/components/schemas/self'
        first:
          $ref: '#/components/schemas/first'
        last:
          $ref: '#/components/schemas/last'
        next:
          $ref: '#/components/schemas/next'
        previous:
          $ref: '#/components/schemas/previous'
    dynamicDescriptor:
      type: string
      description: |
        Merchant defined description sent on a per-transaction basis that will appear on the credit card statement.  

        Dependent on the card Issuer, the statement will typically show the dynamic descriptor appended to the merchant's existing business name separated by the '/' character.  

        **Note**: The combined length of the merchant's business name, forward slash '/' character, and the dynamic descriptor may not exceed 22 characters.
      minLength: 1
      maxLength: 20
      example: moneris
      nullable: true
    createRefundRequestBase:
      title: Create Refund Request Base
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        invoiceNumber:
          $ref: '#/components/schemas/invoiceNumber'
        refundAmount:
          $ref: '#/components/schemas/refundAmount'
        customerId:
          nullable: true
          description: Unique Customer Identifier.
          type: string
          pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
          minLength: 30
          maxLength: 30
          example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        customData:
          $ref: '#/components/schemas/customData'
        dynamicDescriptor:
          $ref: '#/components/schemas/dynamicDescriptor'
        ipv4:
          $ref: '#/components/schemas/ipv4'
        ipv6:
          $ref: '#/components/schemas/ipv6'
        ecommerceIndicator:
          $ref: '#/components/schemas/ecommerceIndicator'
        reason:
          $ref: '#/components/schemas/reason'
      required:
        - idempotencyKey
        - refundAmount
    createMatchingRefundRequest:
      title: Matching Refund
      description: Matching Refund
      allOf:
        - type: object
          properties:
            paymentId:
              $ref: '#/components/schemas/resourceId'
          required:
            - paymentId
        - $ref: '#/components/schemas/createRefundRequestBase'
    createIndependentRefundRequest:
      title: Independent Refund
      description: Independent Refund
      allOf:
        - type: object
          properties:
            orderId:
              $ref: '#/components/schemas/orderId'
            paymentMethod:
              $ref: '#/components/schemas/storePaymentMethodRequest'
          required:
            - paymentMethod
        - $ref: '#/components/schemas/createRefundRequestBase'
    createRefundRequest:
      title: Create Refund Request
      oneOf:
        - $ref: '#/components/schemas/createMatchingRefundRequest'
        - $ref: '#/components/schemas/createIndependentRefundRequest'
    validationStatus:
      type: string
      description: Validation Status description.
      enum:
        - DECLINED
        - DECLINED_RETRY
        - PROCESSING
        - SUCCEEDED
      example: SUCCEEDED
    validationVerificationDetails:
      description: CVD, AVS, 3DS, ITD Result Codes
      type: object
      properties:
        addressVerificationServiceResultCode:
          $ref: '#/components/schemas/addressVerificationServiceResultCode'
        cardSecurityCodeResultCode:
          $ref: '#/components/schemas/cardSecurityCodeResult'
    validationResponse:
      title: createValidationResponse
      type: object
      properties:
        validationId:
          description: The unique identifier of the Validation
          type: string
          pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
          minLength: 30
          maxLength: 30
          example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId:
          $ref: '#/components/schemas/merchantId'
        orderId:
          $ref: '#/components/schemas/orderId'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        modifiedAt:
          $ref: '#/components/schemas/modifiedAt'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodResponse'
        validationStatus:
          $ref: '#/components/schemas/validationStatus'
        transactionDetails:
          $ref: '#/components/schemas/statusDetails'
        verificationDetails:
          $ref: '#/components/schemas/validationVerificationDetails'
        credentialOnFileResponse:
          $ref: '#/components/schemas/credentialOnFileResponse'
        customerId:
          nullable: true
          description: Unique Customer Identifier.
          type: string
          pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
          minLength: 30
          maxLength: 30
          example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - validationId
        - merchantId
        - createdAt
        - paymentMethod
        - validationStatus
        - transactionDetails
        - verificationDetails
    validationsResponseList:
      title: validationsResponseList
      type: object
      properties:
        data:
          description: List of validations.
          type: array
          items:
            type: object
            $ref: '#/components/schemas/validationResponse'
        self:
          $ref: '#/components/schemas/self'
        first:
          $ref: '#/components/schemas/first'
        last:
          $ref: '#/components/schemas/last'
        next:
          $ref: '#/components/schemas/next'
        previous:
          $ref: '#/components/schemas/previous'
    createValidationRequest:
      title: Creates a Validation Request
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        orderId:
          $ref: '#/components/schemas/orderId'
        paymentMethod:
          $ref: '#/components/schemas/storePaymentMethodRequest'
        customerId:
          nullable: true
          description: Unique Customer Identifier.
          type: string
          pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
          minLength: 30
          maxLength: 30
          example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        dynamicDescriptor:
          $ref: '#/components/schemas/dynamicDescriptor'
        ecommerceIndicator:
          description: Describes the category of e-commerce transaction being processed.
          type: string
          enum:
            - MAIL_TELEPHONE_ORDER_SINGLE
            - MAIL_TELEPHONE_ORDER_RECURRING
            - MAIL_TELEPHONE_ORDER_INSTALMENT
            - MAIL_TELEPHONE_ORDER_UNKNOWN
            - AUTHENTICATED_ECOMMERCE
            - NON_AUTHENTICATED_ECOMMERCE
            - SSL_MERCHANT
          example: AUTHENTICATED_ECOMMERCE
          default: SSL_MERCHANT
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - idempotencyKey
        - paymentMethod
    firstName:
      type: string
      description: First name.
      minLength: 1
      maxLength: 30
      example: John
      nullable: true
    middleName:
      type: string
      description: Customer's middle name.
      minLength: 1
      maxLength: 30
      example: J.
      nullable: true
    lastName:
      type: string
      description: Last name.
      minLength: 1
      maxLength: 30
      example: Doe
      nullable: true
    customerResponse:
      title: customerResponse
      type: object
      properties:
        merchantId:
          $ref: '#/components/schemas/merchantId'
        customerId:
          $ref: '#/components/schemas/resourceId'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        modifiedAt:
          $ref: '#/components/schemas/modifiedAt'
        firstName:
          $ref: '#/components/schemas/firstName'
        middleName:
          $ref: '#/components/schemas/middleName'
        lastName:
          $ref: '#/components/schemas/lastName'
        companyName:
          $ref: '#/components/schemas/companyName'
        address:
          nullable: true
          type: object
          description: |
            The postal address including street, town/city, province, and postal code.
            Optionally an unit number can be provided.
          properties:
            unitNumber:
              nullable: true
              type: string
              description: Unit number
              minLength: 1
              maxLength: 19
              example: 123A
            streetNumber:
              nullable: true
              type: string
              description: Street number
              minLength: 1
              maxLength: 19
              example: '3300'
            streetName:
              nullable: true
              type: string
              description: Street name
              minLength: 1
              maxLength: 100
              example: Bloor
            city:
              nullable: true
              type: string
              description: |
                Identifies the city.
              minLength: 1
              maxLength: 50
              example: Toronto
            province:
              nullable: true
              type: string
              description: 'Province or state ISO 3166-2 code '
              minLength: 1
              maxLength: 3
              example: 'ON'
            postalCode:
              nullable: true
              type: string
              description: Postal or zip code
              minLength: 1
              maxLength: 30
              example: M8X 2X2
            country:
              nullable: true
              type: string
              description: |
                Provides the two letter country code according the ISO 3166-1 alpha-2 standard. 
                For a complete list of country codes, visit: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
              minLength: 2
              maxLength: 2
              example: CA
              format: iso-3166
          example:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
        shippingAddress:
          nullable: true
          type: object
          description: |
            The postal address including street, town/city, province, and postal code.
            Optionally an unit number can be provided.
          properties:
            unitNumber:
              nullable: true
              type: string
              description: Unit number
              minLength: 1
              maxLength: 19
              example: 123A
            streetNumber:
              nullable: true
              type: string
              description: Street number
              minLength: 1
              maxLength: 19
              example: '3300'
            streetName:
              nullable: true
              type: string
              description: Street name
              minLength: 1
              maxLength: 100
              example: Bloor
            city:
              nullable: true
              type: string
              description: |
                Identifies the city.
              minLength: 1
              maxLength: 50
              example: Toronto
            province:
              nullable: true
              type: string
              description: 'Province or state ISO 3166-2 code '
              minLength: 1
              maxLength: 3
              example: 'ON'
            postalCode:
              nullable: true
              type: string
              description: Postal or zip code
              minLength: 1
              maxLength: 30
              example: M8X 2X2
            country:
              nullable: true
              type: string
              description: |
                Provides the two letter country code according the ISO 3166-1 alpha-2 standard. 
                For a complete list of country codes, visit: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
              minLength: 2
              maxLength: 2
              example: CA
              format: iso-3166
          example:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
        phoneNumber:
          nullable: true
          type: string
          description: Phone number.
          pattern: ^\+[1-9]\d{1,14}$
          minLength: 3
          maxLength: 16
          example: '+18663197450'
        email:
          nullable: true
          type: string
          format: email
          description: |
            Contains the customer's email address.

            For standard email protocols, visit: https://www.rfc-editor.org/rfc/rfc5322
          minLength: 1
          maxLength: 320
          example: moneris@moneris.com
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - customerId
        - merchantId
        - createdAt
    customerResponseList:
      title: customerResponseList
      properties:
        data:
          description: List of customers.
          type: array
          items:
            type: object
            $ref: '#/components/schemas/customerResponse'
        self:
          $ref: '#/components/schemas/self'
        first:
          $ref: '#/components/schemas/first'
        last:
          $ref: '#/components/schemas/last'
        next:
          $ref: '#/components/schemas/next'
        previous:
          $ref: '#/components/schemas/previous'
    createCustomerRequest:
      title: customerRequest
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        firstName:
          $ref: '#/components/schemas/firstName'
        middleName:
          $ref: '#/components/schemas/middleName'
        lastName:
          $ref: '#/components/schemas/lastName'
        companyName:
          $ref: '#/components/schemas/companyName'
        address:
          nullable: true
          title: customerAddress
          type: object
          description: |
            The postal address including street, town/city, province, and postal code.
            Optionally an unit number can be provided.
          properties:
            unitNumber:
              nullable: true
              type: string
              description: Unit number
              minLength: 1
              maxLength: 19
              example: 123A
            streetNumber:
              nullable: true
              type: string
              description: Street number
              minLength: 1
              maxLength: 19
              example: '3300'
            streetName:
              nullable: true
              type: string
              description: Street name
              minLength: 1
              maxLength: 100
              example: Bloor
            city:
              nullable: true
              type: string
              description: |
                Identifies the city.
              minLength: 1
              maxLength: 50
              example: Toronto
            province:
              nullable: true
              type: string
              description: 'Province or state ISO 3166-2 code '
              minLength: 1
              maxLength: 3
              example: 'ON'
            postalCode:
              nullable: true
              type: string
              description: Postal or zip code
              minLength: 1
              maxLength: 30
              example: M8X 2X2
            country:
              nullable: true
              type: string
              description: |
                Provides the two letter country code according the ISO 3166-1 alpha-2 standard. 
                For a complete list of country codes, visit: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
              minLength: 2
              maxLength: 2
              example: CA
              format: iso-3166
          example:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
        shippingAddress:
          nullable: true
          type: object
          description: |
            The postal address including street, town/city, province, and postal code.
            Optionally an unit number can be provided.
          properties:
            unitNumber:
              nullable: true
              type: string
              description: Unit number
              minLength: 1
              maxLength: 19
              example: 123A
            streetNumber:
              nullable: true
              type: string
              description: Street number
              minLength: 1
              maxLength: 19
              example: '3300'
            streetName:
              nullable: true
              type: string
              description: Street name
              minLength: 1
              maxLength: 100
              example: Bloor
            city:
              nullable: true
              type: string
              description: |
                Identifies the city.
              minLength: 1
              maxLength: 50
              example: Toronto
            province:
              nullable: true
              type: string
              description: 'Province or state ISO 3166-2 code '
              minLength: 1
              maxLength: 3
              example: 'ON'
            postalCode:
              nullable: true
              type: string
              description: Postal or zip code
              minLength: 1
              maxLength: 30
              example: M8X 2X2
            country:
              nullable: true
              type: string
              description: |
                Provides the two letter country code according the ISO 3166-1 alpha-2 standard. 
                For a complete list of country codes, visit: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
              minLength: 2
              maxLength: 2
              example: CA
              format: iso-3166
          example:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
        phoneNumber:
          nullable: true
          type: string
          description: Phone number.
          pattern: ^\+[1-9]\d{1,14}$
          minLength: 3
          maxLength: 16
          example: '+18663197450'
        email:
          nullable: true
          type: string
          format: email
          description: |
            Contains the customer's email address.

            For standard email protocols, visit: https://www.rfc-editor.org/rfc/rfc5322
          minLength: 1
          maxLength: 320
          example: moneris@moneris.com
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - idempotencyKey
    customerRequest:
      title: customerRequest
      type: object
      properties:
        firstName:
          $ref: '#/components/schemas/firstName'
        middleName:
          $ref: '#/components/schemas/middleName'
        lastName:
          $ref: '#/components/schemas/lastName'
        companyName:
          $ref: '#/components/schemas/companyName'
        address:
          nullable: true
          title: customerAddress
          type: object
          description: |
            The postal address including street, town/city, province, and postal code.
            Optionally an unit number can be provided.
          properties:
            unitNumber:
              nullable: true
              type: string
              description: Unit number
              minLength: 1
              maxLength: 19
              example: 123A
            streetNumber:
              nullable: true
              type: string
              description: Street number
              minLength: 1
              maxLength: 19
              example: '3300'
            streetName:
              nullable: true
              type: string
              description: Street name
              minLength: 1
              maxLength: 100
              example: Bloor
            city:
              nullable: true
              type: string
              description: |
                Identifies the city.
              minLength: 1
              maxLength: 50
              example: Toronto
            province:
              nullable: true
              type: string
              description: 'Province or state ISO 3166-2 code '
              minLength: 1
              maxLength: 3
              example: 'ON'
            postalCode:
              nullable: true
              type: string
              description: Postal or zip code
              minLength: 1
              maxLength: 30
              example: M8X 2X2
            country:
              nullable: true
              type: string
              description: |
                Provides the two letter country code according the ISO 3166-1 alpha-2 standard. 
                For a complete list of country codes, visit: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
              minLength: 2
              maxLength: 2
              example: CA
              format: iso-3166
          example:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
        shippingAddress:
          nullable: true
          type: object
          description: |
            The postal address including street, town/city, province, and postal code.
            Optionally an unit number can be provided.
          properties:
            unitNumber:
              nullable: true
              type: string
              description: Unit number
              minLength: 1
              maxLength: 19
              example: 123A
            streetNumber:
              nullable: true
              type: string
              description: Street number
              minLength: 1
              maxLength: 19
              example: '3300'
            streetName:
              nullable: true
              type: string
              description: Street name
              minLength: 1
              maxLength: 100
              example: Bloor
            city:
              nullable: true
              type: string
              description: |
                Identifies the city.
              minLength: 1
              maxLength: 50
              example: Toronto
            province:
              nullable: true
              type: string
              description: 'Province or state ISO 3166-2 code '
              minLength: 1
              maxLength: 3
              example: 'ON'
            postalCode:
              nullable: true
              type: string
              description: Postal or zip code
              minLength: 1
              maxLength: 30
              example: M8X 2X2
            country:
              nullable: true
              type: string
              description: |
                Provides the two letter country code according the ISO 3166-1 alpha-2 standard. 
                For a complete list of country codes, visit: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
              minLength: 2
              maxLength: 2
              example: CA
              format: iso-3166
          example:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
        phoneNumber:
          nullable: true
          type: string
          description: Phone number.
          pattern: ^\+[1-9]\d{1,14}$
          minLength: 3
          maxLength: 16
          example: '+18663197450'
        email:
          nullable: true
          type: string
          format: email
          description: |
            Contains the customer's email address.

            For standard email protocols, visit: https://www.rfc-editor.org/rfc/rfc5322
          minLength: 1
          maxLength: 320
          example: moneris@moneris.com
        customData:
          $ref: '#/components/schemas/customData'
    email:
      type: string
      format: email
      description: |
        Contains the customer's email address.

        For standard email protocols, visit: https://www.rfc-editor.org/rfc/rfc5322
      minLength: 1
      maxLength: 320
      example: moneris@moneris.com
    phoneNumber:
      type: string
      description: Phone number.
      pattern: ^\+[1-9]\d{1,14}$
      minLength: 3
      maxLength: 16
      example: '+18663197450'
    streetNumber:
      type: string
      description: Street number
      minLength: 1
      maxLength: 19
      example: '3300'
    streetName:
      type: string
      description: Street name
      minLength: 1
      maxLength: 100
      example: Bloor
    city:
      type: string
      description: |
        Identifies the city.
      minLength: 1
      maxLength: 50
      example: Toronto
    province:
      type: string
      description: 'Province or state ISO 3166-2 code '
      minLength: 1
      maxLength: 3
      example: 'ON'
    postalCode:
      type: string
      description: Postal or zip code
      minLength: 1
      maxLength: 30
      example: M8X 2X2
    country:
      type: string
      description: |
        Provides the two letter country code according the ISO 3166-1 alpha-2 standard. 
        For a complete list of country codes, visit: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
      minLength: 2
      maxLength: 2
      example: CA
      format: iso-3166
    paymentMethodRequest:
      title: paymentMethodRequest
      description: Payment method details
      oneOf:
        - $ref: '#/components/schemas/paymentMethodWithId'
        - $ref: '#/components/schemas/paymentMethodCard'
        - $ref: '#/components/schemas/paymentMethodTemporaryToken'
        - $ref: '#/components/schemas/paymentMethodPermanentToken'
        - $ref: '#/components/schemas/applePayDecryptedWallet'
        - $ref: '#/components/schemas/applePayEncryptedWallet'
        - $ref: '#/components/schemas/googlePayDecryptedWallet'
        - $ref: '#/components/schemas/googlePayEncryptedWallet'
      discriminator:
        propertyName: paymentMethodSource
        mapping:
          PAYMENT_METHOD_ID: '#/components/schemas/paymentMethodWithId'
          CARD: '#/components/schemas/paymentMethodCard'
          TEMPORARY_TOKEN: '#/components/schemas/paymentMethodTemporaryToken'
          PERMANENT_TOKEN: '#/components/schemas/paymentMethodPermanentToken'
          APPLE_PAY_ENCRYPTED: '#/components/schemas/applePayEncryptedWallet'
          APPLE_PAY_DECRYPTED: '#/components/schemas/applePayDecryptedWallet'
          GOOGLE_PAY_ENCRYPTED: '#/components/schemas/googlePayEncryptedWallet'
          GOOGLE_PAY_DECRYPTED: '#/components/schemas/googlePayDecryptedWallet'
      required:
        - paymentMethodSource
    threeDSecureMessageCategory:
      type: string
      description: Identifies the category of the message for a specific use case.
      enum:
        - PAYMENT
        - NON_PAYMENT
      example: PAYMENT
    threeDSecureDeviceChannel:
      type: string
      description: Indicates the type of channel interface being used to initiate the transaction.
      enum:
        - BROWSER
        - THREE_D_SECURE_REQUESTOR_INITIATED
      example: BROWSER
    threeDSecureRequestType:
      type: string
      nullable: true
      description: |
        Type of payment that triggered the verification.
          - **CARDHOLDER**: Cardholder initiated payment.
          - **RECURRING**: Recurring payment.
      enum:
        - CARDHOLDER
        - RECURRING
        - null
      example: CARDHOLDER
    threeDSecureRecurringFrequency:
      type: integer
      format: int32
      description: Indicates the minimum number of days between authorisations.
      minimum: 1
      maximum: 9999
      example: 1
      nullable: true
    threeDSecureRecurringExpiry:
      type: string
      description: Date after which no further authorisations shall be performed. This is a required field for recurring transactions, we suggest setting it at a reasonably high value if you don't have a defined expiry date.
      format: date
      example: '2019-07-30'
      nullable: true
    threeDSecureRequestorInitiatedIndicator:
      type: string
      description: Indicates the type of 3RI request. This data element provides additional information to the ACS to determine the best approach for handing a 3RI request.
      enum:
        - RECURRING_TRANSACTION
        - INSTALMENT_TRANSACTION
        - ADD_CARD
        - MAINTAIN_CARD_INFORMATION
        - ACCOUNT_VERIFICATION
        - SPLIT_DELAYED_SHIPMENT
        - TOP_UP
        - MAIL_ORDER
        - TELEPHONE_ORDER
        - WHITELIST_STATUS_CHECK
        - OTHER_PAYMENT
        - null
      example: RECURRING_TRANSACTION
      nullable: true
    threeDSecurePriorAuthenticationData:
      type: string
      description: Data that documents and supports a specific authentication process. In the current version of the specification this data element is not defined in detail, however the intention is that for each 3DS Requestor Authentication Method, this field carry data that the ACS can use to verify the authentication process. In future versions of the specification, these details are expected to be included.
      maxLength: 2048
      example: '12345678'
      nullable: true
    threeDSecurePriorAuthenticationMethod:
      type: string
      description: Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor.
      enum:
        - FRICTIONLESS_AUTHENTICATION_OCCURRED_BY_ACS
        - CARDHOLDER_CHALLENGE_OCCURRED_BY_ACS
        - AVS_VERIFIED
        - OTHER_ISSUER_METHODS
        - null
      example: AVS_VERIFIED
      nullable: true
    threeDSecurePriorAuthenticationTimestamp:
      type: string
      description: Date and time in UTC of the prior cardholder authentication.
      format: date-time
      example: '2019-07-30T06:43:40.252Z'
      nullable: true
    threeDSecurePriorAuthenticationReference:
      type: string
      description: This data element provides additional information to the ACS to determine the best approach for handing a request.
      maxLength: 36
      example: '12345678'
      nullable: true
    threeDSecurePriorAuthenticationInformation:
      type: object
      description: Information about how the 3DS Requestor authenticated the cardholder as part of a previous 3DS transaction.
      nullable: true
      properties:
        threeDSecurePriorAuthenticationData:
          $ref: '#/components/schemas/threeDSecurePriorAuthenticationData'
        threeDSecurePriorAuthenticationMethod:
          $ref: '#/components/schemas/threeDSecurePriorAuthenticationMethod'
        threeDSecurePriorAuthenticationTimestamp:
          $ref: '#/components/schemas/threeDSecurePriorAuthenticationTimestamp'
        threeDSecurePriorAuthenticationReference:
          $ref: '#/components/schemas/threeDSecurePriorAuthenticationReference'
    threeDSecureCompletionIndicator:
      type: string
      description: |
        Indicates whether 3DS Card Lookup was successfully completed.  A successful Card Lookup increases the chances of a frictionless card authentication.
          - **SUCCESS**: Successfully completed.
          - **FAILURE**: 3DS Card Lookup attempted, but failed.
          - **UNAVAILABLE**: Unavailable or not attempted.
      enum:
        - SUCCESS
        - FAILURE
        - UNAVAILABLE
        - null
      example: SUCCESS
      nullable: true
    threeDSecureChallengeRequested:
      type: string
      description: Indicates whether a browser-based challenge is requested for this transaction. Standard is 'No Preference'
      enum:
        - NO_PREFERENCE
        - NO_CHALLENGE_REQUESTED
        - CHALLENGE_REQUESTED_MANDATE
        - null
      example: NO_PREFERENCE
      nullable: true
      default: NO_PREFERENCE
    threeDSecureChallengeWindowSize:
      type: string
      description: |
        Relates to the rendering of the challenge within the browser.
          - **X_SMALL**: 250 x 400
          - **SMALL**: 390 x 400
          - **MEDIUM**: 500 x 600
          - **LARGE**: 600 x 400
          - **FULL_SCREEN**: Full Screen
      enum:
        - X_SMALL
        - SMALL
        - MEDIUM
        - LARGE
        - FULL_SCREEN
        - null
      example: FULL_SCREEN
      nullable: true
    browserUserAgent:
      type: string
      description: |
        Exact content of the HTTP user-agent header.
        Note, when total length exceeds 2048 characters, truncate the excess portion.
      maxLength: 2048
      example: Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})
      nullable: true
    browserJavaEnabled:
      type: boolean
      description: Indicates whether Java is enabled in the browser
      example: true
    browserJavascriptEnabled:
      type: boolean
      description: Indicates whether Javascript is enabled in the browser
      example: true
    browserScreenHeight:
      type: integer
      format: int32
      description: Defines the pixel height of the cardholder's screen.
      minimum: 0
      maximum: 999999
      example: 1080
    browserScreenWidth:
      type: integer
      format: int32
      description: Defines the pixel width of the cardholder's screen.
      minimum: 0
      maximum: 999999
      example: 1920
    authenticationRequest:
      title: authenticationRequest
      description: Use the 3DS Authentication request to start the validation process of the card and cardholder identity. This request supports all 3DS authentication methods, including 3DS Requestor Initiated (3RI) and Decoupled Authentication. The fields device_channel and message_category control the type of 3DS request made. To perform a standard 3DS Authentication with a cardholder browser experience, send device_channel = 02 for BRW. The result of this request determines whether the card supports 3DS features and, if supported, whether the transaction uses a frictionless or challenge flow. To perform a 3DS Requestor Initiated Authentication without a cardholder browser experience, send device_channel = 03 for 3RI. Any fields related to the browser’s challenge prompt are no longer required, but other conditional fields for 3RI become mandatory.
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        cardLookupId:
          nullable: true
          type: string
          description: Used to identify API resources which may be required for future follow-on transactions; i.e. Refunds, Corrections, Completions, Reversals, etc.
          pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
          minLength: 30
          maxLength: 30
          example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        orderId:
          $ref: '#/components/schemas/orderId'
        amount:
          $ref: '#/components/schemas/transactionAmount'
        cardholderName:
          $ref: '#/components/schemas/cardholderName'
        cardholderEmail:
          $ref: '#/components/schemas/email'
        cardholderPhoneNumber:
          $ref: '#/components/schemas/phoneNumber'
        shippingAddress:
          nullable: true
          type: object
          description: |
            The postal address including street, town/city, province, and postal code.
            Optionally an unit number can be provided.
          properties:
            unitNumber:
              nullable: true
              type: string
              description: Unit number
              minLength: 1
              maxLength: 19
              example: 123A
            streetNumber:
              nullable: true
              type: string
              description: Street number
              minLength: 1
              maxLength: 19
              example: '3300'
            streetName:
              nullable: true
              type: string
              description: Street name
              minLength: 1
              maxLength: 100
              example: Bloor
            city:
              nullable: true
              type: string
              description: |
                Identifies the city.
              minLength: 1
              maxLength: 50
              example: Toronto
            province:
              nullable: true
              type: string
              description: 'Province or state ISO 3166-2 code '
              minLength: 1
              maxLength: 3
              example: 'ON'
            postalCode:
              nullable: true
              type: string
              description: Postal or zip code
              minLength: 1
              maxLength: 30
              example: M8X 2X2
            country:
              nullable: true
              type: string
              description: |
                Provides the two letter country code according the ISO 3166-1 alpha-2 standard. 
                For a complete list of country codes, visit: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
              minLength: 2
              maxLength: 2
              example: CA
              format: iso-3166
          example:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
        billingAddress:
          type: object
          title: authenticationRequestBillingAddress
          description: The postal address including street, town/city, province, and postal code.
          properties:
            unitNumber:
              nullable: true
              type: string
              description: Unit number
              minLength: 1
              maxLength: 19
              example: 123A
            streetNumber:
              $ref: '#/components/schemas/streetNumber'
            streetName:
              $ref: '#/components/schemas/streetName'
            city:
              $ref: '#/components/schemas/city'
            province:
              $ref: '#/components/schemas/province'
            postalCode:
              $ref: '#/components/schemas/postalCode'
            country:
              $ref: '#/components/schemas/country'
          example:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
          required:
            - streetNumber
            - streetName
            - city
            - province
            - postalCode
            - country
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodRequest'
        threeDSecureMessageCategory:
          $ref: '#/components/schemas/threeDSecureMessageCategory'
        threeDSecureDeviceChannel:
          $ref: '#/components/schemas/threeDSecureDeviceChannel'
        threeDSecureRequestType:
          $ref: '#/components/schemas/threeDSecureRequestType'
        threeDSecureRecurringFrequency:
          $ref: '#/components/schemas/threeDSecureRecurringFrequency'
        threeDSecureRecurringExpiry:
          $ref: '#/components/schemas/threeDSecureRecurringExpiry'
        threeDSecureRequestorInitiatedIndicator:
          $ref: '#/components/schemas/threeDSecureRequestorInitiatedIndicator'
        threeDSecurePriorAuthenticationInformation:
          $ref: '#/components/schemas/threeDSecurePriorAuthenticationInformation'
        threeDSecureNotificationUrl:
          nullable: true
          type: string
          description: Fully qualified Encode URL of the system that receives the Response message or Error Message.
          minLength: 1
          maxLength: 256
          example: https%3A%2F%2Fdeveloper.moneris.com%2F
        threeDSecureCompletionIndicator:
          $ref: '#/components/schemas/threeDSecureCompletionIndicator'
        threeDSecureChallengeRequested:
          $ref: '#/components/schemas/threeDSecureChallengeRequested'
        threeDSecureChallengeWindowSize:
          $ref: '#/components/schemas/threeDSecureChallengeWindowSize'
        browserIpAddress:
          description: IP address the browser is connecting from.
          type: string
          format: ipv4
          example: 104.75.173.179
          nullable: true
        browserUserAgent:
          $ref: '#/components/schemas/browserUserAgent'
        browserJavaEnabled:
          $ref: '#/components/schemas/browserJavaEnabled'
        browserJavascriptEnabled:
          $ref: '#/components/schemas/browserJavascriptEnabled'
        browserScreenHeight:
          $ref: '#/components/schemas/browserScreenHeight'
        browserScreenWidth:
          $ref: '#/components/schemas/browserScreenWidth'
        browserLanguage:
          nullable: true
          type: string
          format: iso-639
          description: |
            Provides the two letter language code according the ISO 639-1 standard. 

            For a complete list of language codes, visit: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes.
          minLength: 2
          maxLength: 2
          example: en
      required:
        - amount
        - billingAddress
        - browserIpAddress
        - browserScreenHeight
        - browserScreenWidth
        - cardholderEmail
        - cardholderName
        - cardholderPhoneNumber
        - idempotencyKey
        - threeDSecureDeviceChannel
        - threeDSecureMessageCategory
    threeDSecureMessageType:
      type: string
      description: Indicates the response type in 3DS flow.
      nullable: true
      enum:
        - AUTHENTICATION_RESPONSE_MESSAGE
        - AUTHENTICATION_REQUEST_MESSAGE
        - PREPARATION_RESPONSE_MESSAGE
        - PREPARATION_REQUEST_MESSAGE
        - CHALLENGE_RESPONSE_MESSAGE
        - CHALLENGE_REQUEST_MESSAGE
        - RESULTS_REQUEST_MESSAGE
        - RESULTS_RESPONSE_MESSAGE
        - ERROR_MESSAGE
        - null
      example: CHALLENGE_RESPONSE_MESSAGE
    threeDSecureTransactionStatus:
      type: string
      description: |
        Indicates the Transaction result.  For more information about this field, please review https://docs.3dsecure.io/3dsv2/specification_220.html#attr-ARes-transStatus
          - **AUTHENTICATED**: Authentication/ Account Verification Successful.
          - **AUTHENTICATION_ATTEMPTED**: Attempts Processing Performed; Not Authenticated/Verified , but a proof of attempted authentication/verification is provided.
          - **CHALLENGE_AUTHENTICATION_REQUIRED**: Challenge Required; Additional authentication is required using the `challengeUrl` and `challengeData`.
          - **CHALLENGE_DECOUPLED_AUTHENTICATION_CONFIRMED**: Challenge Required; Decoupled Authentication confirmed. 
          - **TECHNICAL_ISSUE**: Authentication/ Account Verification Could Not Be Performed; Technical or other problem.
          - **NOT_AUTHENTICATED**: Not Authenticated /Account Not Verified; Transaction denied.
          - **REJECTED**: Authentication/ Account Verification Rejected; Issuer is rejecting authentication/verification and request that authorisation not be attempted.
          - **CHALLENGE_PREFERENCE_ACKNOWLEDGED**: Informational Only; 3DS Requestor challenge preference acknowledged.
      enum:
        - AUTHENTICATED
        - AUTHENTICATION_ATTEMPTED
        - CHALLENGE_AUTHENTICATION_REQUIRED
        - CHALLENGE_DECOUPLED_AUTHENTICATION_CONFIRMED
        - TECHNICAL_ISSUE
        - NOT_AUTHENTICATED
        - REJECTED
        - CHALLENGE_PREFERENCE_ACKNOWLEDGED
    threeDSecureTransactionStatusReason:
      type: string
      nullable: true
      description: |
        Provides information on why the Transaction Status field has the specified value.
      example: 01 - Card authentication failed
    threeDSecureChallengeUrl:
      type: string
      description: If the transStatus is “C” this field will be populated with the URL to POST the challengeData to create the cardholder challenge screen
      format: uri
      minLength: 1
      maxLength: 2048
      example: https://developer.moneris.com/
      nullable: true
    threeDSecureChallengeData:
      type: string
      description: String that must be POSTed to the Challenge URL to create challenge screen
      minLength: 1
      maxLength: 2048
      nullable: true
    threeDSecureChallengeCompletionIndicator:
      type: string
      nullable: true
      description: |
        Indicates if Challenge was completed. This is returned in CAVV Lookup Request.
      enum:
        - 'YES'
        - 'NO'
        - null
    threeDSecureAuthenticationType:
      type: string
      nullable: true
      description: Indicates the type of authentication method the Issuer will use to challenge the Cardholder, whether in the ARes message or what was used by the ACS when in the RReq message.
      enum:
        - STATIC
        - DYNAMIC
        - OUT_OF_BAND
        - DECOUPLED
        - null
      example: DYNAMIC
    threeDSecureAuthenticationTimestamp:
      type: string
      description: Date and time in UTC of the cardholder authentication.
      format: date-time
      example: '2019-07-30T06:43:40.252Z'
      nullable: true
    authenticationResponse:
      title: authenticationResponse
      type: object
      properties:
        threeDSecureAuthenticationId:
          $ref: '#/components/schemas/resourceId'
        cardLookupId:
          nullable: true
          type: string
          description: Used to identify API resources which may be required for future follow-on transactions; i.e. Refunds, Corrections, Completions, Reversals, etc.
          pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
          minLength: 30
          maxLength: 30
          example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId:
          $ref: '#/components/schemas/merchantId'
        orderId:
          $ref: '#/components/schemas/orderId'
        threeDSecureMessageType:
          $ref: '#/components/schemas/threeDSecureMessageType'
        threeDSecureTransactionStatus:
          $ref: '#/components/schemas/threeDSecureTransactionStatus'
        threeDSecureTransactionStatusReason:
          $ref: '#/components/schemas/threeDSecureTransactionStatusReason'
        ecommerceIndicator:
          $ref: '#/components/schemas/ecommerceIndicator'
        threeDSecureChallengeUrl:
          $ref: '#/components/schemas/threeDSecureChallengeUrl'
        threeDSecureChallengeData:
          $ref: '#/components/schemas/threeDSecureChallengeData'
        threeDSecureAuthenticationValue:
          $ref: '#/components/schemas/threeDSecureAuthenticationValue'
        threeDSecureChallengeCompletionIndicator:
          $ref: '#/components/schemas/threeDSecureChallengeCompletionIndicator'
        threeDSecureServerTransactionId:
          nullable: true
          type: string
          description: "Indicates information required when sending a version 3-D Secure 2.0+ transaction. \n\nThis data is obtained from a CAVV Lookup Request or MPI\_3DS\_Authentication Request transaction.\n"
          format: uuid
          example: ad9b0eda-bf9b-4288-b188-9467993603e1
        threeDSecureDirectoryServerTransactionId:
          nullable: true
          type: string
          description: Universally unique transaction identifier assigned by the 3DS Directory Server (DS) to identify a single transaction.
          format: uuid
          example: ad9b0eda-bf9b-4288-b188-9467993603e1
        threeDSecureAccessControlServerTransactionId:
          nullable: true
          type: string
          description: "Required if sending a version 3-D Secure 2.0+ transaction. Data is obtained from a Cavv Lookup Request or MPI\_3DS\_Authentication Request transaction"
          format: uuid
          example: ad9b0eda-bf9b-4288-b188-9467993603e1
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodResponse'
        threeDSecureCardholderInformation:
          nullable: true
          type: string
          description: Text provided by the ACS/Issuer to Cardholder during a Frictionless or Decoupled transaction. The Issuer can provide information to Cardholder.
          maxLength: 128
          example: Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx.
        threeDSecureVersion:
          $ref: '#/components/schemas/threeDSecureVersion'
        threeDSecureAuthenticationType:
          $ref: '#/components/schemas/threeDSecureAuthenticationType'
        threeDSecureAuthenticationTimestamp:
          $ref: '#/components/schemas/threeDSecureAuthenticationTimestamp'
      required:
        - threeDSecureAuthenticationId
        - merchantId
        - threeDSecureTransactionStatus
        - ecommerceIndicator
        - paymentMethod
        - threeDSecureVersion
    threeDSecureChallengeResponseData:
      type: string
      description: Provides the response data from the challenge.
      example: TBD
    lookupRequest:
      title: challengeFlowRequest
      description: The point of the 3-D Secure flow is to verify that the true cardholder is a part of the authorization. The challenge flow is used to present a way of authenticating the cardholder using e.g. OTP or a federated identification method.
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        threeDSecureChallengeResponseData:
          $ref: '#/components/schemas/threeDSecureChallengeResponseData'
      required:
        - idempotencyKey
        - threeDSecureChallengeResponseData
    threeDSecureNotificationUrl:
      type: string
      description: Fully qualified Encode URL of the system that receives the Response message or Error Message.
      minLength: 1
      maxLength: 256
      example: https%3A%2F%2Fdeveloper.moneris.com%2F
    cardLookupRequest:
      title: cardLookupRequest
      description: The card_lookup request verifies the applicability of 3DS on the card and returns the 3DS version supported by the card. It also returns the 3DS Method URL and 3DS Method Data for submitting a device fingerprinting POST to issuer’s ACS.
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        orderId:
          $ref: '#/components/schemas/orderId'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodRequest'
        threeDSecureNotificationUrl:
          $ref: '#/components/schemas/threeDSecureNotificationUrl'
      required:
        - idempotencyKey
        - paymentMethod
        - threeDSecureNotificationUrl
    threeDSecureMethodUrl:
      type: string
      format: uri
      description: Returns the URL for the Device Fingerprinting step.
      minLength: 1
      maxLength: 256
      example: https://developer.moneris.com/
    threeDSecureMethodData:
      type: string
      description: Data that must be posted to 3DS Method URL for the Device Fingerprinting step.
      minLength: 1
      maxLength: 254
    cardLookupResponse:
      title: cardLookupResponse
      type: object
      properties:
        cardLookupId:
          $ref: '#/components/schemas/resourceId'
        merchantId:
          $ref: '#/components/schemas/merchantId'
        orderId:
          $ref: '#/components/schemas/orderId'
        threeDSecureServerTransactionId:
          $ref: '#/components/schemas/threeDSecureServerTransactionId'
        paymentMethod:
          $ref: '#/components/schemas/paymentMethodResponse'
        threeDSecureVersion:
          $ref: '#/components/schemas/threeDSecureVersion'
        threeDSecureMethodUrl:
          $ref: '#/components/schemas/threeDSecureMethodUrl'
        threeDSecureMethodData:
          $ref: '#/components/schemas/threeDSecureMethodData'
      required:
        - cardLookupId
        - merchantId
        - paymentMethod
        - threeDSecureServerTransactionId
        - threeDSecureVersion
        - threeDSecureMethodUrl
        - threeDSecureMethodData
    kountResult:
      description: Auto-decision response
      type: string
      enum:
        - APPROVED
        - DECLINED
        - UNDER_REVIEW
    fraudScore:
      description: Final risk score returned from Kount system
      type: integer
      format: int32
      maxLength: 3
      example: 99
      nullable: true
    kountTransactionId:
      description: Kount Transaction ID
      type: string
      maxLength: 12
      example: '123456789012'
    kountTriggeredCounter:
      type: object
      description: Kount Counter that was triggered
      properties:
        name:
          type: string
          description: Counter Name
          maxLength: 64
        value:
          type: number
          format: double
          description: The sum of the number of times a counter was triggered.
          nullable: true
      required:
        - name
    kountPiercedAddress:
      type: object
      description: Pierced IP Address details.
      nullable: true
      properties:
        latitude:
          description: Latitude of pierced IP address
          type: number
          format: double
          example: -90.1922
          nullable: true
        longitude:
          description: Longitude of pierced IP address
          type: number
          format: double
          example: 38.6312
          nullable: true
        city:
          nullable: true
          type: string
          description: |
            Identifies the city.
          minLength: 1
          maxLength: 50
          example: Toronto
        region:
          description: State/Region of pierced IP address
          type: string
          example: Ontario
          maxLength: 255
          nullable: true
        owner:
          description: Owner of pierced IP address or address block
          type: string
          maxLength: 64
          nullable: true
        country:
          nullable: true
          type: string
          description: |
            Provides the two letter country code according the ISO 3166-1 alpha-2 standard. 
            For a complete list of country codes, visit: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
          minLength: 2
          maxLength: 2
          example: CA
          format: iso-3166
    kountTriggeredRule:
      type: object
      description: Kount rule that was triggered
      properties:
        id:
          description: Rule ID associated with merchant-created rules
          type: integer
          format: int64
          example: 8
        description:
          description: Rule descriptions associated with the Id
          type: string
          maxLength: 255
          nullable: true
          example: Rule description example
    kountInfo:
      description: Object of Kount response parameters
      type: object
      properties:
        browser:
          description: Web Browser
          type: string
          maxLength: 64
          example: Google Chrome
          nullable: true
        cardBrand:
          nullable: true
          type: string
          description: Displays the card brand name associated with the card type.
          enum:
            - MASTERCARD
            - VISA
            - AMERICAN_EXPRESS
            - JCB
            - DISCOVER
            - INTERAC
            - UNIONPAY
            - GIFT_MONERIS
            - GIFT_DATACANDY
            - GIFT_GIVEX
            - null
          example: MASTERCARD
        associatedCardCount:
          description: Total number of credit cards associated to persona as seen by Kount
          type: integer
          format: int32
          example: 3
          nullable: true
        cookiesEnabled:
          description: A flag to indicate if device placing order has cookies enabled or not
          type: boolean
          example: true
          nullable: true
        countersTriggered:
          type: array
          description: Counters triggered during rules evaluation
          items:
            $ref: '#/components/schemas/kountTriggeredCounter'
        country:
          description: Two-character ISO country code associated with the physical device
          nullable: true
          type: string
          minLength: 2
          maxLength: 2
          example: CA
          format: iso-3166
        deviceFirstSeenAt:
          description: Date device first seen
          nullable: true
          type: string
          format: date
          example: '2019-07-30'
        deviceLayers:
          description: 5 device layers that comprise the device's fingerprint, representing OS, browser, Javascript, cookies and Flash settings
          type: string
          maxLength: 55
          minLength: 55
          nullable: true
        deviceCount:
          description: Total number of unique devices associated to persona as seen by Kount
          type: integer
          format: int32
          example: 2
          nullable: true
        deviceScreenResolution:
          description: Device Screen Resolution
          type: string
          maxLength: 10
          example: 1920x1080
          nullable: true
        emailCount:
          description: Total number of unique email addresses associated to persona as seen by Kount
          type: integer
          format: int32
          example: 3
          nullable: true
        errorCount:
          description: Number of errors the Kount request generated
          type: integer
          format: int32
          example: 3
          nullable: true
        errorCode:
          description: Error Code displayed in Risk Inquiry Service response
          type: string
          maxLength: 4
          example: '1080'
          nullable: true
        kountFingerprint:
          description: The unique fingerprint of the device placing the order
          type: string
          maxLength: 32
          example: 123456789h123456789p123456789g12
          nullable: true
        flashEnabled:
          description: A flag to indicate if the device placing the order has Flash enabled
          type: boolean
          example: true
          nullable: true
        riskiestAssociatedCountry:
          description: |
            Persona related country with highest probability of fraud
            Refers to Kount's GEOX field.
          nullable: true
          type: string
          minLength: 2
          maxLength: 2
          example: CA
          format: iso-3166
        userDefinedHomeCountry:
          description: |
            User home country the device owner has set in the device's control panel
            Refers to Kount's HTTP_COUNTRY
          nullable: true
          type: string
          minLength: 2
          maxLength: 2
          example: CA
          format: iso-3166
        proxyAddress:
          description: IP address of proxy
          type: string
          format: ipv4
          example: 104.75.173.179
          nullable: true
        javascriptEnabled:
          description: A flag to indicate if the device placing order has JavaScript enabled
          type: boolean
          example: true
          nullable: true
        deviceDataCollectedByDataCollector:
          description: Flag indicating whether or not device data was collected by the Data Collector process
          type: boolean
          example: true
          nullable: true
        knowYourCustomerFlag:
          description: Know Your Customer Flag
          type: boolean
          example: true
          nullable: true
        deviceLanguage:
          description: The two-character ISO language the device owner has set in the device control panel
          nullable: true
          type: string
          format: iso-639
          minLength: 2
          maxLength: 2
          example: en
        localTime:
          description: The local time the device owner has set in the device control panel
          nullable: true
          type: string
          format: date-time
          example: '2019-07-30T06:43:40.252Z'
        isMobileDevice:
          description: Flag to indicate if the device placing the order is a mobile device
          type: boolean
          example: true
          nullable: true
        usesMobileForwarder:
          description: If device is mobile, is it using a forwarder to process the carriers service
          type: boolean
          example: true
          nullable: true
        mobileType:
          description: Type of mobile device, e.g., iPhone, Android, Blackberry, iPad, etc.
          type: string
          maxLength: 32
          example: iPhone
          nullable: true
        kountNetwork:
          description: 'Riskiest network type associated with persona within last 14 days:'
          type: string
          nullable: true
          enum:
            - ANONYMOUS
            - HIGH_SCHOOL
            - LIBRARY
            - NORMAL
            - OPEN_PROXY
            - PRISON
            - SATELLITE
            - null
        mode:
          nullable: true
          description: |
            Specifies the Risk Inquiry Service post mode type

            Risk Inquiry Service Modes

            Modes are used to specify what type of data is being submitted to Kount.
            Note that ALL FIELD NAMES for a RIS call must be UPPERCASE. They cannot be other case combinations
            such as sess, Merc, mOdE. However, the values for fields can be mixed case, such as
            SESS=UpperMixedCaseSessID95628.
            - QUERY = Mode Q
              Initial queries directed from the merchant to Kount that do not originate from a call center
              environment.
            - UPDATE = Mode U
              Update call to Kount, does not cause a reevaluation of the transaction but will update what is displayed
              in the Agent Web Console. This update call does not count towards the number of RIS transactions
              purchased. Only certain fields can be updated with MODE=U calls. The PTYP field can only be updated if
              the initial post to Kount was PTYP=NONE
          type: string
          enum:
            - QUERY
            - UPDATE
            - null
        operatingSystem:
          description: Operating system of the device
          type: string
          maxLength: 64
          example: macOS
          nullable: true
        pcRemoteEnabled:
          description: Flag indicating whether the device is enabled to use PC remote software
          type: boolean
          example: true
          nullable: true
        proxyEnabled:
          description: Flag indicating whether or not a proxy server is detected
          type: boolean
          example: true
          nullable: true
        piercedAddress:
          $ref: '#/components/schemas/kountPiercedAddress'
        reasonCode:
          description: Reason code associated with rule action
          type: string
          maxLength: 16
          example: Invalid Data
          nullable: true
        region:
          description: Region associated to device location
          type: string
          maxLength: 2
          example: CA
          nullable: true
        riskiestAssociatedRegion:
          description: |
            Indicates the riskiest geographical location associated with the Persona. 
            Refers to Kount's GEOX.
          type: string
          maxLength: 2
          example: CA
          nullable: true
        rulesTriggered:
          type: array
          description: Rules triggered by post to Kount
          items:
            $ref: '#/components/schemas/kountTriggeredRule'
        sessionId:
          nullable: true
          description: Unique Session ID; must be unique over a 30-day span
          type: string
          maxLength: 32
          example: xjudq804i1049jkjakdad
        websiteId:
          nullable: true
          description: Website identifier of where order originated
          type: string
          maxLength: 8
          example: DEFAULT
        timezone:
          description: The time zone of the device; In the ISO format of +|–hh:mm
          type: string
          maxLength: 6
          example: '-04:00'
          nullable: true
        deviceUserAgent:
          nullable: true
          type: string
          description: |
            Exact content of the HTTP user-agent header.
            Note, when total length exceeds 2048 characters, truncate the excess portion.
          maxLength: 2048
          example: Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})
        velocity:
          description: Quantity of orders seen from persona within last 14 days
          type: integer
          format: int64
          example: 8
          nullable: true
        maximumVelocity:
          description: Quantity of orders from persona within the most active 6 hour window in last 14 days; payment_response field must be equal to ‘A’
          type: integer
          format: int64
          example: 8
          nullable: true
        kountVersion:
          description: Specifies version of Kount system being used
          type: string
          maxLength: 4
          example: '1.0'
          nullable: true
        deviceVoiceActivated:
          description: If it is a mobile device, flag indicating whether the device is voice activated
          type: boolean
          example: true
          nullable: true
        warningCount:
          description: Number of warnings the Kount Inquiry Service has generated
          type: integer
          format: int32
          example: 8
          nullable: true
        warningCode:
          description: Warning code displayed in the Risk Inquiry Service response
          type: string
          maxLength: 4
          example: '180'
          nullable: true
        warningDetail:
          description: Warning details
          type: string
          nullable: true
    kountResponse:
      title: kountInquiryResponse
      allOf:
        - type: object
          properties:
            kountInquiryId:
              $ref: '#/components/schemas/resourceId'
            orderId:
              $ref: '#/components/schemas/orderId'
            kountResult:
              $ref: '#/components/schemas/kountResult'
            fraudScore:
              $ref: '#/components/schemas/fraudScore'
            kountTransactionId:
              $ref: '#/components/schemas/kountTransactionId'
          required:
            - kountInquiryId
            - kountResult
            - kountTransactionId
        - $ref: '#/components/schemas/kountInfo'
      required:
        - orderId
        - kountTransactionId
        - kountResult
    kountInquiryList:
      title: kountInquiryList
      type: object
      properties:
        data:
          description: Kount Inquiries list.
          type: array
          items:
            type: object
            $ref: '#/components/schemas/kountResponse'
        self:
          $ref: '#/components/schemas/self'
        first:
          $ref: '#/components/schemas/first'
        last:
          $ref: '#/components/schemas/last'
        next:
          $ref: '#/components/schemas/next'
        previous:
          $ref: '#/components/schemas/previous'
    kountAccountId:
      description: 6 digit  local identifier used by the merchant to identify the kount inquiry request
      type: string
      minLength: 6
      maxLength: 6
      example: '760000'
    kountApiKey:
      description: The API key for the associated with the Kount Merchant ID
      type: string
      maxLength: 256
      example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI3NjAwMDAiLCJhdWQiOiJLb3VudC4xIiwiaWF0IjoxNTU4MDQwODQ5LCJzY3AiOnsia2EiOm51bGwsImtjIjpmYWxzZSwiYXBpIjp0cnVlLCJyaXMiOnRydWV9fQ.y3_2yzd11-Y_F6_xzVsXI-NO1a7P6ldMjDnKzl5yBko
    originatedFromCallCenter:
      description: |
        Refers to Kount's Call center indicator. 

        Flag indicating whether risk inquiry request originates from a call center environment If the customer service agents navigate to a separate order entry page that does not collect iframe data: When sending the kount_inquiry request, set call_center_ind to Y If the customer service agents navigate to the same order entry page as the customer: When sending the kount_inquiry request, set call_center_ind to N If Risk Inquiry Service call does not originate from a call center environment, set call_center_ind to N

        True for YES, False fo NO
      type: boolean
    sessionId:
      description: Unique Session ID; must be unique over a 30-day span
      type: string
      maxLength: 32
      example: xjudq804i1049jkjakdad
    websiteId:
      description: Website identifier of where order originated
      type: string
      maxLength: 8
      example: DEFAULT
    kountPaymentId:
      title: Kount Payment Id
      type: object
      description: Payment Id
      properties:
        paymentId:
          $ref: '#/components/schemas/resourceId'
      required:
        - paymentId
    kountValidationId:
      title: Kount Validation Id
      type: object
      description: Validation Id
      properties:
        validationId:
          $ref: '#/components/schemas/resourceId'
        amount:
          $ref: '#/components/schemas/transactionAmount'
      required:
        - validationId
        - amount
    paymentToken:
      description: |
        Payment token submitted by merchant for order (credit card, payer ID, routing/transit, MICR, and account number).

        If paymentType is set to NONE then the paymentToken value should be left empty (NULL).

        If the credit card information is not available and Moneris Tokenization is used to process payment set paymentType = CARD and send the token in the paymentToken field.
      type: string
      maxLength: 32
      example: '4242424242424242'
    paymentType:
      description: |
        Payment Type submitted by merchant. 

        If the credit card information is not available and Moneris Tokenization is used to process payment set paymentType = CARD and send the token in the paymentToken field.
      type: string
      enum:
        - APPLE_PAY
        - CARD
        - PAYPAL
        - CHECK
        - NONE
        - GREEN_DOT_MONEY_PACK
        - BILL_ME_LATER
        - GIFT_CARD
        - BPAY
        - NETELLER
        - GIROPAY
        - ELV
        - MERCADE_PAGO
        - SINGLE_EURO_PAYMENT_AREA
        - INTERAC
        - CARTE_BLEUE
        - POLI
        - SKRILL_MONEY_BOOKERS
        - SOFORT
    kountPaymentData:
      title: Kount Payment Data
      description: Payment Data
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/transactionAmount'
        customerId:
          nullable: true
          type: string
          description: Used to identify API resources which may be required for future follow-on transactions; i.e. Refunds, Corrections, Completions, Reversals, etc.
          pattern: ^[A-Za-z]{2}\d{2}[A-Za-z0-9]{26}$
          minLength: 30
          maxLength: 30
          example: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        lastFour:
          nullable: true
          type: string
          description: Last 4 digits of the card.
          minLength: 4
          maxLength: 4
          example: '1234'
        paymentToken:
          $ref: '#/components/schemas/paymentToken'
        paymentType:
          $ref: '#/components/schemas/paymentType'
      required:
        - paymentToken
        - paymentType
        - amount
    kountPaymentDetails:
      title: kountPaymentDetails
      description: Payment Data
      oneOf:
        - $ref: '#/components/schemas/kountPaymentId'
        - $ref: '#/components/schemas/kountValidationId'
        - $ref: '#/components/schemas/kountPaymentData'
    itemId:
      type: string
      maxLength: 255
      description: Item unique identifier.
      example: e2ab873e-b295-11e9-9c02
    itemType:
      type: string
      description: High level description of an item
      maxLength: 255
      example: Phone
    kountProductItem:
      type: object
      description: Item part of the transaction
      properties:
        itemId:
          $ref: '#/components/schemas/itemId'
        itemType:
          $ref: '#/components/schemas/itemType'
        itemQuantity:
          type: integer
          format: int32
          description: Quantity invoiced for this line item.
          minimum: 0
          maximum: 999999999
          example: 82
          nullable: true
        itemName:
          nullable: true
          type: string
          description: Item Name
          minLength: 1
          maxLength: 50
          example: Canned Food
        itemAmount:
          title: kountProductItemamount
          nullable: true
          type: object
          description: Contains the individual item amount that is normally calculated as price multiplied by quantity. The value must be in cents. Therefore $10.59 must be sent as 1059
          properties:
            amount:
              $ref: '#/components/schemas/amount'
            currency:
              $ref: '#/components/schemas/currency'
          required:
            - amount
            - currency
          example:
            amount: 15000
            currency: CAD
      required:
        - itemId
        - itemType
    automaticNumberId:
      description: 'Automatic Number Identification (ANI) submitted with order If the ANI cannot be determined, merchant must pass 0123456789 as the ANID NOTE: This field is only valid for phone-to-web requests where customer service agents navigate to a separate order entry page that does not collect iframe data Risk Inquiry Service submissions'
      type: string
      maxLength: 32
      example: '0123456789'
      nullable: true
    gender:
      type: string
      nullable: true
      description: An individual's gender
      enum:
        - MALE
        - FEMALE
        - null
    fullName:
      type: string
      description: Customers full name
      minLength: 1
      maxLength: 64
      example: John Doe
      nullable: true
    financialOrderId:
      description: Unique identifier for transactions at Kount
      type: string
      maxLength: 32
      example: nqa-finorderid-1
      nullable: true
    shippingType:
      description: Shipping type. The following nomenclature is expected for shipping types to be passed to Kount. NOTE:These three attributes can be used to pass custom attribute data if you want to correlate some data with the returned response
      type: string
      nullable: true
      enum:
        - SAME_DAY
        - NEXT_DAY
        - SECOND_DAY
        - STANDARD
        - null
    kountInquiryRequest:
      title: kountInquiryRequest
      type: object
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/idempotencyKey'
        orderId:
          $ref: '#/components/schemas/orderId'
        kountAccountId:
          $ref: '#/components/schemas/kountAccountId'
        kountApiKey:
          $ref: '#/components/schemas/kountApiKey'
        originatedFromCallCenter:
          $ref: '#/components/schemas/originatedFromCallCenter'
        sessionId:
          $ref: '#/components/schemas/sessionId'
        websiteId:
          $ref: '#/components/schemas/websiteId'
        paymentDetails:
          $ref: '#/components/schemas/kountPaymentDetails'
        email:
          $ref: '#/components/schemas/email'
        products:
          type: array
          description: List of product items part of the transaction
          items:
            $ref: '#/components/schemas/kountProductItem'
        automaticNumberId:
          $ref: '#/components/schemas/automaticNumberId'
        billingAddress:
          nullable: true
          title: kountBillingAddress
          type: object
          description: |
            The postal address including street, town/city, province, and postal code.
            Optionally an unit number can be provided.
          properties:
            unitNumber:
              nullable: true
              type: string
              description: Unit number
              minLength: 1
              maxLength: 19
              example: 123A
            streetNumber:
              nullable: true
              type: string
              description: Street number
              minLength: 1
              maxLength: 19
              example: '3300'
            streetName:
              nullable: true
              type: string
              description: Street name
              minLength: 1
              maxLength: 100
              example: Bloor
            city:
              nullable: true
              type: string
              description: |
                Identifies the city.
              minLength: 1
              maxLength: 50
              example: Toronto
            province:
              nullable: true
              type: string
              description: 'Province or state ISO 3166-2 code '
              minLength: 1
              maxLength: 3
              example: 'ON'
            postalCode:
              nullable: true
              type: string
              description: Postal or zip code
              minLength: 1
              maxLength: 30
              example: M8X 2X2
            country:
              nullable: true
              type: string
              description: |
                Provides the two letter country code according the ISO 3166-1 alpha-2 standard. 
                For a complete list of country codes, visit: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
              minLength: 2
              maxLength: 2
              example: CA
              format: iso-3166
          example:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
        shippingAddress:
          nullable: true
          title: kountShippingAddress
          type: object
          description: |
            The postal address including street, town/city, province, and postal code.
            Optionally an unit number can be provided.
          properties:
            unitNumber:
              nullable: true
              type: string
              description: Unit number
              minLength: 1
              maxLength: 19
              example: 123A
            streetNumber:
              nullable: true
              type: string
              description: Street number
              minLength: 1
              maxLength: 19
              example: '3300'
            streetName:
              nullable: true
              type: string
              description: Street name
              minLength: 1
              maxLength: 100
              example: Bloor
            city:
              nullable: true
              type: string
              description: |
                Identifies the city.
              minLength: 1
              maxLength: 50
              example: Toronto
            province:
              nullable: true
              type: string
              description: 'Province or state ISO 3166-2 code '
              minLength: 1
              maxLength: 3
              example: 'ON'
            postalCode:
              nullable: true
              type: string
              description: Postal or zip code
              minLength: 1
              maxLength: 30
              example: M8X 2X2
            country:
              nullable: true
              type: string
              description: |
                Provides the two letter country code according the ISO 3166-1 alpha-2 standard. 
                For a complete list of country codes, visit: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
              minLength: 2
              maxLength: 2
              example: CA
              format: iso-3166
          example:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
        dateOfBirth:
          description: Date of Birth.
          nullable: true
          type: string
          format: date
          example: '2019-07-30'
        timestamp:
          description: This is timestamp associated with the creation of a user in Kount service.
          nullable: true
          type: string
          format: date-time
          example: '2019-07-30T06:43:40.252Z'
        gender:
          $ref: '#/components/schemas/gender'
        customerName:
          $ref: '#/components/schemas/fullName'
        financialOrderId:
          $ref: '#/components/schemas/financialOrderId'
        shippingType:
          $ref: '#/components/schemas/shippingType'
        ipv4:
          nullable: false
          type: string
          format: ipv4
          description: Internet Protocol version 4 (IPv4).
          example: 104.75.173.179
        customData:
          $ref: '#/components/schemas/customData'
      required:
        - idempotencyKey
        - kountAccountId
        - kountApiKey
        - paymentDetails
        - originatedFromCallCenter
        - sessionId
        - websiteId
        - ipv4
        - email
        - products
    kountRefundStatus:
      description: Refund/Chargeback status. R - Refund, C - Chargeback
      type: string
      nullable: true
      enum:
        - REFUND
        - CHARGEBACK
        - null
    evaluateKountResult:
      description: full re-evaluation will be performed with Kount. Default to false.
      type: boolean
      default: false
      example: false
    kountAssertRequest:
      title: kountAssertRequest
      type: object
      properties:
        kountAccountId:
          $ref: '#/components/schemas/kountAccountId'
        kountApiKey:
          $ref: '#/components/schemas/kountApiKey'
        paymentDetails:
          title: kountAssertPaymentDetails
          description: Kount Assert Payment Data
          oneOf:
            - $ref: '#/components/schemas/kountPaymentId'
            - type: object
              properties:
                validationId:
                  $ref: '#/components/schemas/resourceId'
              required:
                - validationId
            - type: object
              title: Kount Assert Payment Data
              description: Kount Assert Payment Data
              properties:
                lastFour:
                  nullable: true
                  type: string
                  description: Last 4 digits of the card.
                  minLength: 4
                  maxLength: 4
                  example: '1234'
                paymentToken:
                  nullable: true
                  description: |
                    Payment token submitted by merchant for order (credit card, payer ID, routing/transit, MICR, and account number).

                    If paymentType is set to NONE then the paymentToken value should be left empty (NULL).

                    If the credit card information is not available and Moneris Tokenization is used to process payment set paymentType = CARD and send the token in the paymentToken field.
                  type: string
                  maxLength: 32
                  example: '4242424242424242'
                paymentType:
                  $ref: '#/components/schemas/paymentType'
              required:
                - paymentType
        financialOrderId:
          nullable: true
          description: Unique identifier for transactions at Kount
          type: string
          maxLength: 32
          example: nqa-finorderid-1
        refundStatus:
          $ref: '#/components/schemas/kountRefundStatus'
        evaluateKountResult:
          $ref: '#/components/schemas/evaluateKountResult'
      required:
        - kountAccountId
        - kountApiKey
  parameters:
    apiVersion:
      in: header
      name: Api-Version
      required: true
      example: 2024-04-17-preview
      description: |
        The endpoint's API Version. 

        Must be provided through the headers section. 
      schema:
        $ref: '#/components/schemas/apiVersion'
    correlationId:
      in: header
      name: X-Correlation-Id
      example: 06f1e47b-a1b5-4902-be9c-bccc506127c4
      description: |
        Correlates a series of requests within the same flow.

        Note: This ID is generated by Moneris with every request or response, if it doesn't exist. 
        Merchants are to echo back the value with every request that is part of the call flow."
      required: false
      schema:
        type: string
        example: 06f1e47b-a1b5-4902-be9c-bccc506127c4
    merchantId:
      in: header
      name: X-Merchant-Id
      example: '0123456789101'
      description: |
        Thirteen character identification code. 

        Note: This code is provided by Moneris and is required to identify the Merchant executing the transaction."
      required: true
      schema:
        $ref: '#/components/schemas/merchantId'
    pageBeforeCursor:
      in: query
      name: cursor
      description: Pagination cursor to return items located after it.
      required: false
      example: d41d8cd98f00b204e9800998ecf8427e
      schema:
        type: string
        example: d41d8cd98f00b204e9800998ecf8427e
    pageLimit:
      in: query
      name: limit
      description: Maximum number of items to return in the response.
      example: 10
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 20
        example: 10
    createdFrom:
      name: created_from
      in: query
      description: Returns items created after the specified date, defaults to the current date starting from 12 AM.
      required: false
      example: '2024-05-16T04:00:00.000Z'
      schema:
        $ref: '#/components/schemas/dateTime'
    createdTo:
      name: created_to
      in: query
      description: |
        Returns items created before the specified date, up to one day earlier. 

        Defaults to current date and time, must be no more than 1 day later than `created_from` date. 
      required: false
      example: '2024-05-16T04:00:00.000Z'
      schema:
        $ref: '#/components/schemas/dateTime'
    paymentId:
      in: path
      name: payment-id
      description: The unique identifier of the payment
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    paymentMethodId:
      name: payment-method-id
      in: path
      description: Payment Method ID
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    refundId:
      in: path
      name: refund-id
      description: The unique identifier of the refund
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    validationId:
      in: path
      name: validation-id
      description: The unique identifier of the Validation
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    customerId:
      in: path
      name: customer-id
      description: The unique identifier of the customer
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    authenticationId:
      in: path
      name: authentication-id
      description: The unique identifier of the authentication
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    kountInquiryId:
      in: path
      name: kount-inquiry-id
      description: The unique identifier of the Kount Transaction.
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
  headers:
    apiVersion:
      description: The endpoint's API Version.
      example: 2024-03-28-preview
      schema:
        type: string
    correlationId:
      example: 06f1e47b-a1b5-4902-be9c-bccc506127c4
      description: |
        Correlates a series of requests within the same flow. 

        Note: This ID is generated by Moneris with every request or response, if it doesn't exist, and the Merchant is recommended to echo back the value."  
      schema:
        type: string
        example: 06f1e47b-a1b5-4902-be9c-bccc506127c4
    sunset:
      example: '2025-07-30T06:43:40.252Z'
      description: |
        Optional.

        Indicates that the resource URI will be decommissioned, and put out of service at the specified point in the future. 
        More details are available at [RFC 8594](https://www.rfc-editor.org/rfc/rfc8594.html)
      schema:
        type: string
        format: date-time
        example: '2025-07-30T06:43:40.252Z'
    rateLimitCount:
      description: The maximum number of requests that the client can make in this window.
      schema:
        type: integer
        format: int64
      example: 1000
    rateLimitRemaining:
      description: The number of requests allowed in the current window.
      schema:
        type: integer
        format: int64
      example: 0
    rateLimitReset:
      description: The relative time in seconds when the rate limit window will be reset.
      schema:
        type: integer
        format: int32
      example: 3600
    retryAfter:
      description: Indicates how long clients should wait before retrying.
      schema:
        type: integer
        format: int32
      example: 60
  examples:
    InvalidListRequestErrorResponse:
      summary: Invalid query parameter
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: INVALID_QUERY_PARAMETER
        status: 400
        detail: null
        instance: null
        category: INVALID_REQUEST_ERROR
        errors:
          - parameterName: created_from
            parameterValue: 2019/07/30
            reasonCode: INVALID_FORMAT
    regularPurchaseWithPaymentMethodId:
      summary: Regular Purchase With Payment Method Id
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: PAYMENT_METHOD_ID
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          storePaymentMethod: DO_NOT_STORE
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: true
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    regularPurchaseWithCardPaymentMethod:
      summary: Regular Purchase With Payment Method Details
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: CARD
          card:
            cardNumber: '4242424242424242'
            expiryMonth: 1
            expiryYear: 2028
            cardSecurityCode: '123'
          storePaymentMethod: DO_NOT_STORE
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: true
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    regularPurchaseWithTemporaryPaymentMethod:
      summary: Regular Purchase With Temporary Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: TEMPORARY_TOKEN
          temporaryToken: ot-y2mxjFqmqDisQQGB6hQ8xwQ2
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: true
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    regularPurchaseWithPermanentPaymentMethod:
      summary: Regular Purchase With Permanent Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: PERMANENT_TOKEN
          permanentToken: ot-y2mxjFqmqDisQQGB6hQ8xwQ2
          credentialOnFileInformation:
            paymentIndicator: UNSCHEDULED_CREDENTIAL_ON_FILE
            paymentInformation: FIRST
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: true
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    regularPurchaseWithApplePayEncryptedPaymentMethod:
      summary: Regular Purchase With Apple Pay Encrypted Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: APPLE_PAY_ENCRYPTED
          displayName: MasterCard 4079
          cardBrand: MASTERCARD
          applePayVersion: EC_V1
          data: ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh
          signature: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
          publicKeyHash: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
          ephemeralPublicKey: ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh
          applePayTransactionId: 22iWw1ySnzwiav6ToJ7KOhkY49
          walletIndicator: IN_BROWSER
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: true
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    regularPurchaseWithApplePayDecryptedPaymentMethod:
      summary: Regular Purchase With Apple Pay Decrypted Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: APPLE_PAY_DECRYPTED
          applicationPrimaryAccountNumber: '4444111122223333'
          expiryMonth: 1
          expiryYear: 2028
          deviceManufacturerIdentifier: r7tBjIbr4eaTCgs8bkU0w7hB7s
          dataType: THREE_D_SECURE
          cryptogram: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
          walletEcommerceIndicator: '07'
          cardBrand: VISA
          walletIndicator: IN_APPLICATION
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: true
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    regularPurchaseWithGooglePayEncryptedPaymentMethod:
      summary: Regular Purchase With Google Pay Encrypted Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: GOOGLE_PAY_ENCRYPTED
          cardBrand: MASTERCARD
          googlePayProtocolVersion: EC_V1
          signedMessage: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
          signature: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
          walletIndicator: IN_BROWSER
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: true
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    regularPurchaseWithGooglePayDecryptedPaymentMethod:
      summary: Regular Purchase With Google Pay Decrypted Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: GOOGLE_PAY_DECRYPTED
          cardBrand: VISA
          cardDetails:
            personalAccountNumber: '4444111122223333'
            expiryMonth: 1
            expiryYear: 2028
            authenticationMethod: CRYPTOGRAM_3DS
            cryptogram: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
            walletEcommerceIndicator: '07'
          walletIndicator: IN_BROWSER
          walletSource: CARD
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: true
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    preAuthorizationWithPaymentMethodId:
      summary: Pre-Authorization With Payment Method Id
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: PAYMENT_METHOD_ID
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: false
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    preAuthorizationWithCardPaymentMethod:
      summary: Pre-Authorization With Card Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: CARD
          card:
            cardNumber: '4242424242424242'
            expiryMonth: 1
            expiryYear: 2028
            cardSecurityCode: '123'
          storePaymentMethod: DO_NOT_STORE
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: false
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    preAuthorizationWithTemporaryToken:
      summary: Pre-Authorization With Temporary Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: TEMPORARY_TOKEN
          temporaryToken: ot-y2mxjFqmqDisQQGB6hQ8xwQ2
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: false
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    preAuthorizationWithPermanentToken:
      summary: Pre-Authorization With Permanent Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        amount:
          amount: 16000
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: PERMANENT_TOKEN
          permanentToken: ot-y2mxjFqmqDisQQGB6hQ8xwQ2
          credentialOnFileInformation:
            paymentIndicator: UNSCHEDULED_CREDENTIAL_ON_FILE
            paymentInformation: FIRST
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        automaticCapture: false
        dynamicDescriptor: moneris
        ipv4: 192.0.2.146
        ipv6: 2345:0425:2CA1:0000:0000:0567:5673:23b5
    PurchaseCompletedResponse:
      summary: Successful Purchase
      value:
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        transactionDateTime: '2019-07-30T06:43:40.252Z'
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        amount:
          amount: 16000
          currency: CAD
        authorizedAmount:
          amount: 16000
          currency: CAD
        capturableAmount:
          amount: 0
          currency: CAD
        amountDetails: null
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation: null
          contactDetails: null
          billingAddress: null
          paymentMethodInformation:
            paymentMethodType: CARD
            paymentMethodSource: CARD
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2028
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
            storePaymentMethod: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        paymentStatus: SUCCEEDED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: '00'
          responseCode: '000'
          message: approved
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        verificationDetails:
          addressVerificationServiceResultCode: FULL_MATCH
          cardSecurityCodeResultCode: MATCH
          threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        credentialOnFileResponse: null
        refundDetails: null
        customData: null
    PreauthorizationCompletedResponse:
      summary: Successful Pre-Authorization
      value:
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        transactionDateTime: '2019-07-30T06:43:40.252Z'
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        amount:
          amount: 16000
          currency: CAD
        authorizedAmount:
          amount: 16000
          currency: CAD
        capturableAmount:
          amount: 16000
          currency: CAD
        amountDetails: null
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation: null
          contactDetails: null
          billingAddress: null
          paymentMethodInformation:
            paymentMethodType: CARD
            paymentMethodSource: CARD
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2028
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
            storePaymentMethod: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        paymentStatus: AUTHORIZED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: '27'
          responseCode: '000'
          message: approved
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        verificationDetails:
          addressVerificationServiceResultCode: FULL_MATCH
          cardSecurityCodeResultCode: MATCH
          threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        credentialOnFileResponse: null
        refundDetails: null
        customData:
          property1: string
          property2: string
    InvalidRequestErrorResponse:
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: INVALID_ADDRESS
        status: 400
        detail: null
        instance: null
        category: INVALID_REQUEST_ERROR
        errors:
          - reasonCode: INVALID_FORMAT
            parameterName: address.postalCode
            parameterValue: MAP3J8
    IdempotencyRequestErrorResponse:
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: IDEMPOTENCY_KEY_ALREADY_EXISTS
        status: 409
        detail: null
        instance: null
        category: IDEMPOTENCY_ERROR
        errors: []
    DeclineErrorResponse:
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: EXCESS PIN TRIES
        status: 400
        detail: 052-38 - PIN retries exceeded
        instance: /payments/20c3ee41-2560-4645-b84f-631fb08819de
        category: DECLINED_ERROR
        errors: []
    PurchaseDeclinedResponse:
      summary: Purchase Declined
      value:
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        transactionDateTime: '2019-07-30T06:43:40.252Z'
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        amount:
          amount: 16000
          currency: CAD
        authorizedAmount:
          amount: 0
          currency: CAD
        capturableAmount:
          amount: 0
          currency: CAD
        amountDetails: null
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation: null
          contactDetails: null
          billingAddress: null
          paymentMethodInformation:
            paymentMethodType: CARD
            paymentMethodSource: CARD
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2028
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
            storePaymentMethod: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        paymentStatus: DECLINED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: '43'
          responseCode: '421'
          message: Stolen card, pick up.
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        verificationDetails:
          addressVerificationServiceResultCode: FULL_MATCH
          cardSecurityCodeResultCode: MATCH
          threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        credentialOnFileResponse: null
        refundDetails: null
        customData:
          property1: string
          property2: string
    PurchaseDeclinedRetryResponse:
      summary: Purchase Declined with Retry
      value:
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        transactionDateTime: '2019-07-30T06:43:40.252Z'
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        amount:
          amount: 16000
          currency: CAD
        authorizedAmount:
          amount: 0
          currency: CAD
        capturableAmount:
          amount: 0
          currency: CAD
        amountDetails: null
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation: null
          contactDetails: null
          billingAddress: null
          paymentMethodInformation:
            paymentMethodType: CARD
            paymentMethodSource: CARD
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2028
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
            storePaymentMethod: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        paymentStatus: DECLINED_RETRY
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: '79'
          responseCode: '416'
          message: Life cycle declines.
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        verificationDetails:
          addressVerificationServiceResultCode: FULL_MATCH
          cardSecurityCodeResultCode: MATCH
          threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        credentialOnFileResponse: null
        refundDetails: null
        customData:
          property1: string
          property2: string
    PurchaseCanceledResponse:
      summary: Purchase Canceled
      value:
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        transactionDateTime: '2019-07-30T06:43:40.252Z'
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        amount:
          amount: 16000
          currency: CAD
        authorizedAmount:
          amount: 16000
          currency: CAD
        capturableAmount:
          amount: 0
          currency: CAD
        amountDetails: null
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation: null
          contactDetails: null
          billingAddress: null
          paymentMethodInformation:
            paymentMethodType: CARD
            paymentMethodSource: CARD
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2028
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
            storePaymentMethod: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        paymentStatus: CANCELED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: '00'
          responseCode: '000'
          message: approved
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        verificationDetails:
          addressVerificationServiceResultCode: FULL_MATCH
          cardSecurityCodeResultCode: MATCH
          threeDSecureAuthenticationValueResultCode: VISA_CAVV_PASSED_VALIDATION_ATTEMPTED
        credentialOnFileResponse: null
        refundDetails: null
        customData:
          property1: string
          property2: string
    InvalidPurchaseErrorResponse:
      summary: Purchase already completed
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: INVALID_STATE
        status: 400
        detail: Invalid purchase state
        instance: /payments/20c3ee41-2560-4645-b84f-631fb08819de
        category: INVALID_REQUEST_ERROR
    cardPaymentMethodRequest:
      summary: Card Payment Method request
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        cardholderInformation:
          cardholderName: John Doe
          companyName: SP Ltd
        contactDetails:
          phoneNumber: '+18663197450'
          email: moneris@moneris.com
        billingAddress:
          unitNumber: 123A
          streetNumber: '3300'
          streetName: Bloor Street West
          city: Toronto
          province: 'ON'
          postalCode: M8X 2X2
          country: CA
        paymentMethodSource: CARD
        card:
          cardNumber: '4444111122223333'
          expiryMonth: 1
          expiryYear: 2028
          cardSecurityCode: '123'
        customData:
          property1: string
          property2: string
    temporaryTokenPaymentMethodRequest:
      summary: Temporary Token Payment Method request
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        paymentMethodSource: TEMPORARY_TOKEN
        temporaryToken: ot-y2mxjFqmqDisQQGB6hQ8xwQ2
        customData:
          property1: string
          property2: string
    permanentTokenPaymentMethodRequest:
      summary: Permanent Token Payment Method request
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        paymentMethodSource: PERMANENT_TOKEN
        permanentToken: ot-y2mxjFqmqDisQQGB6hQ8xwQ2
        customData:
          property1: string
          property2: string
    applePayEncryptedPaymentMethodRequest:
      summary: Apple Pay Encrypted Payment Method request
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        paymentMethodSource: APPLE_PAY_ENCRYPTED
        displayName: MasterCard 4079
        cardBrand: MASTERCARD
        applePayVersion: EC_V1
        data: ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh
        signature: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
        publicKeyHash: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
        ephemeralPublicKey: ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh
        applePayTransactionId: 22iWw1ySnzwiav6ToJ7KOhkY49
        walletIndicator: IN_BROWSER
        customData:
          property1: string
          property2: string
    applePayDecryptedPaymentMethodRequest:
      summary: Apple Pay Decrypted Payment Method request
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        paymentMethodSource: APPLE_PAY_DECRYPTED
        applicationPrimaryAccountNumber: '4444111122223333'
        expiryMonth: 1
        expiryYear: 2028
        deviceManufacturerIdentifier: r7tBjIbr4eaTCgs8bkU0w7hB7s
        dataType: THREE_D_SECURE
        cryptogram: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
        walletEcommerceIndicator: '07'
        cardBrand: VISA
        walletIndicator: IN_APPLICATION
        customData:
          property1: string
          property2: string
    googlePayEncryptedPaymentMethodRequest:
      summary: Google Pay Encrypted Payment Method request
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        paymentMethodSource: GOOGLE_PAY_ENCRYPTED
        cardBrand: MASTERCARD
        googlePayProtocolVersion: EC_V1
        signedMessage: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
        signature: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
        walletIndicator: IN_BROWSER
        customData:
          property1: string
          property2: string
    googlePayDecryptedPaymentMethodRequest:
      summary: Google Pay Decrypted Payment Method request
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        paymentMethodSource: GOOGLE_PAY_DECRYPTED
        cardBrand: VISA
        cardDetails:
          personalAccountNumber: '4444111122223333'
          expiryMonth: 1
          expiryYear: 2028
          authenticationMethod: CRYPTOGRAM_3DS
          cryptogram: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
          walletEcommerceIndicator: '07'
        walletIndicator: IN_BROWSER
        walletSource: CARD
        customData:
          property1: string
          property2: string
    updateCardPaymentMethodRequest:
      summary: Card Payment Method request
      value:
        cardholderInformation:
          cardholderName: John Doe
          companyName: SP Ltd
        contactDetails:
          phoneNumber: '+18663197450'
          email: moneris@moneris.com
        billingAddress:
          unitNumber: 123A
          streetNumber: '3300'
          streetName: Bloor Street West
          city: Toronto
          province: 'ON'
          postalCode: M8X 2X2
          country: CA
        paymentMethodSource: CARD
        card:
          cardNumber: '4444111122223333'
          expiryMonth: 1
          expiryYear: 2028
          cardSecurityCode: '123'
        customData:
          property1: string
          property2: string
    updateTemporaryTokenPaymentMethodRequest:
      summary: Temporary Token Payment Method request
      value:
        paymentMethodSource: TEMPORARY_TOKEN
        temporaryToken: ot-y2mxjFqmqDisQQGB6hQ8xwQ2
        customData:
          property1: string
          property2: string
    updatePermanentTokenPaymentMethodRequest:
      summary: Permanent Token Payment Method request
      value:
        paymentMethodSource: PERMANENT_TOKEN
        permanentToken: ot-y2mxjFqmqDisQQGB6hQ8xwQ2
        customData:
          property1: string
          property2: string
    concurrentRequestErrorResponse:
      summary: Concurrent Access Error
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: CONCURRENCY_ERROR
        status: 409
        detail: null
        instance: null
        category: API_ERROR
        errors: []
    matchingRefundRequest:
      summary: Matching Refund
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        orderId: 1q2w3e4r5t6t78
        invoiceNumber: 1a2s3d45v6
        refundAmount:
          amount: 1600
          currency: CAD
        dynamicDescriptor: moneris
        ipv4: 104.75.173.179
        ipv6: 2600:1401:2::8a
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        reason: Defective product
        customData:
          property1: string
          property2: string
    InvalidRefundErrorResponse:
      summary: Invalid Matching Refund
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: INVALID_PAYMENT
        status: 400
        detail: Invalid payment Id or payment Id not found
        instance: /payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        category: INVALID_REQUEST_ERROR
    exp-refundResponse_DeclineErrorResponse:
      summary: Refund declined
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: EXPIRED CARD
        status: 400
        detail: 051-54 - Expired Card
        instance: /refunds/20c3ee41-2560-4645-b84f-631fb08819de
        category: DECLINED_ERROR
        errors: []
    SucceededRefundResponse:
      summary: Refund succeeded
      value:
        refundId: ri0105ARZ3NDEKTSV4RRFFQ69G5FAV
        payment:
          paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation: null
          contactDetails: null
          billingAddress: null
          paymentMethodInformation:
            paymentMethodType: CARD
            paymentMethodSource: CARD
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2028
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
            storePaymentMethod: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        refundAmount:
          amount: 1600
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        refundStatus: SUCCEEDED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: '00'
          responseCode: '000'
          message: SUCCESS
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        reason: Defective product
        credentialOnFileResponse: null
        customData:
          property1: string
          property2: string
    DeclinedRefundResponse:
      summary: Refund succeeded
      value:
        refundId: ri0105ARZ3NDEKTSV4RRFFQ69G5FAV
        payment:
          paymentId: pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation: null
          contactDetails: null
          billingAddress: null
          paymentMethodInformation:
            paymentMethodType: CARD
            paymentMethodSource: CARD
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2028
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
            storePaymentMethod: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: null
          customData:
            property1: string
            property2: string
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: '2019-07-30T06:43:40.252Z'
        refundAmount:
          amount: 1600
          currency: CAD
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        refundStatus: DECLINED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: '51'
          responseCode: '054'
          message: Expired Card
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        reason: Defective product
        credentialOnFileResponse: null
        customData:
          property1: string
          property2: string
    validationWithPaymentMethodId:
      summary: Validation With Payment Method Id
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: PAYMENT_METHOD_ID
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          storePaymentMethod: DO_NOT_STORE
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
    validationWithCardPaymentMethod:
      summary: Validation With Payment Method Details
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: CARD
          card:
            cardNumber: '4444111122223333'
            expiryMonth: 1
            expiryYear: 2028
            cardSecurityCode: '123'
          storePaymentMethod: DO_NOT_STORE
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
    validationWithTemporaryTokenPaymentMethod:
      summary: Validation With Temporary Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: TEMPORARY_TOKEN
          temporaryToken: ot-y2mxjFqmqDisQQGB6hQ8xwQ2
          credentialOnFileInformation:
            paymentIndicator: CUSTOMER_INITIATED
            paymentInformation: FIRST
            issuerId: 123asd
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
    validationWithPermanentTokenPaymentMethod:
      summary: Validation With Permanent Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: PERMANENT_TOKEN
          permanentToken: ot-y2mxjFqmqDisQQGB6hQ8xwQ2
          credentialOnFileInformation:
            paymentIndicator: UNSCHEDULED_CREDENTIAL_ON_FILE
            paymentInformation: FIRST
            issuerId: null
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
    validationWithApplePayEncryptedPaymentMethod:
      summary: Validation With Apple Pay Encrypted Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: APPLE_PAY_ENCRYPTED
          displayName: MasterCard 4079
          cardBrand: MASTERCARD
          applePayVersion: EC_V1
          data: ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh
          signature: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
          publicKeyHash: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
          ephemeralPublicKey: ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh
          applePayTransactionId: 22iWw1ySnzwiav6ToJ7KOhkY49
          walletIndicator: IN_BROWSER
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
    validationWithApplePayDecryptedPaymentMethod:
      summary: Validation With Apple Pay Decrypted Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: APPLE_PAY_DECRYPTED
          applicationPrimaryAccountNumber: '4444111122223333'
          expiryMonth: 1
          expiryYear: 2028
          deviceManufacturerIdentifier: r7tBjIbr4eaTCgs8bkU0w7hB7s
          dataType: THREE_D_SECURE
          cryptogram: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
          walletEcommerceIndicator: '07'
          cardBrand: VISA
          walletIndicator: IN_APPLICATION
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
    validationWithGooglePayEncryptedPaymentMethod:
      summary: Validation With Google Pay Encrypted Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: GOOGLE_PAY_ENCRYPTED
          cardBrand: MASTERCARD
          googlePayProtocolVersion: EC_V1
          signedMessage: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
          signature: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
          walletIndicator: IN_BROWSER
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
    validationWithGooglePayDecryptedPaymentMethod:
      summary: Validation With Google Pay Decrypted Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac1
        orderId: 1q2w3e4r5t6t78
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodSource: GOOGLE_PAY_DECRYPTED
          cardBrand: VISA
          cardDetails:
            personalAccountNumber: '4444111122223333'
            expiryMonth: 1
            expiryYear: 2028
            authenticationMethod: CRYPTOGRAM_3DS
            cryptogram: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva
            walletEcommerceIndicator: '07'
          walletIndicator: IN_BROWSER
          walletSource: CARD
        ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        customData:
          property1: string
          property2: string
        dynamicDescriptor: moneris
    exp-validationResponse_DeclineErrorResponse:
      value:
        type: https://developer.moneris.com/en/More/Testing/Response%20Codes
        title: EXCESS PIN TRIES
        status: 400
        detail: 052-38 - PIN retries exceeded
        instance: /validations/20c3ee41-2560-4645-b84f-631fb08819de
        category: DECLINED_ERROR
        errors: []
    ValidationSucceededResponse:
      summary: Successful Validation
      value:
        validationId: vi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: null
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation:
            cardholderName: John Doe
            companyName: SP Ltd
          contactDetails:
            phoneNumber: '+18663197450'
            email: moneris@moneris.com
          billingAddress:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
          paymentMethodInformation:
            paymentMethodType: CARD
            paymentMethodSource: CARD
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2028
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
            storePaymentMethod: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: '2019-07-30T06:43:40.252Z'
          customData:
            property1: string
            property2: string
        validationStatus: SUCCEEDED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: '00'
          responseCode: '000'
          message: approved
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        verificationDetails:
          addressVerificationServiceResultCode: FULL_MATCH
          cardSecurityCodeResultCode: MATCH
        credentialOnFileResponse: null
        customData:
          property1: string
          property2: string
    ValidationDeclinedRetryResponse:
      summary: Validation Declined with Retry
      value:
        validationId: vi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: null
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation:
            cardholderName: John Doe
            companyName: SP Ltd
          contactDetails:
            phoneNumber: '+18663197450'
            email: moneris@moneris.com
          billingAddress:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
          paymentMethodInformation:
            paymentMethodType: CARD
            paymentMethodSource: CARD
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2028
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
            storePaymentMethod: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: '2019-07-30T06:43:40.252Z'
          customData:
            property1: string
            property2: string
        validationStatus: DECLINED_RETRY
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: '79'
          responseCode: '416'
          message: Life cycle declines.
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        verificationDetails:
          addressVerificationServiceResultCode: FULL_MATCH
          cardSecurityCodeResultCode: MATCH
        credentialOnFileResponse: null
        customData:
          property1: string
          property2: string
    ValidationDeclinedResponse:
      summary: Validation Declined
      value:
        validationId: vi0105ARZ3NDEKTSV4RRFFQ69G5FAV
        merchantId: '0123456789101'
        orderId: 1q2w3e4r5t6t78
        createdAt: '2019-07-30T06:43:40.252Z'
        modifiedAt: null
        customerId: ci0105ARZ3NDEKTSV4RRFFQ69G5FAV
        paymentMethod:
          paymentMethodId: pm0105ARZ3NDEKTSV4RRFFQ69G5FAV
          merchantId: '0123456789101'
          cardholderInformation:
            cardholderName: John Doe
            companyName: SP Ltd
          contactDetails:
            phoneNumber: '+18663197450'
            email: moneris@moneris.com
          billingAddress:
            unitNumber: 123A
            streetNumber: '3300'
            streetName: Bloor Street West
            city: Toronto
            province: 'ON'
            postalCode: M8X 2X2
            country: CA
          paymentMethodInformation:
            paymentMethodType: CARD
            paymentMethodSource: CARD
            cardInformation:
              bankIdentificationNumber: '123456'
              lastFour: '1234'
              expiryMonth: 1
              expiryYear: 2028
              cardBrand: MASTERCARD
              cardType: CREDIT
              cardFingerprint: 1Q2W3E4r5t6rfwewerwewrrw
              issuer: RBC
            paymentAccountReference: '11112222333344445555666677778'
            storePaymentMethod: DO_NOT_STORE
          createdAt: '2019-07-30T06:43:40.252Z'
          modifiedAt: '2019-07-30T06:43:40.252Z'
          customData:
            property1: string
            property2: string
        validationStatus: DECLINED
        transactionDetails:
          transactionUniqueId: 938c2cc0dcc05f2b68c4287040cfcf71
          isoResponseCode: '43'
          responseCode: '421'
          message: Stolen card, pick up.
          ecommerceIndicator: AUTHENTICATED_ECOMMERCE
        verificationDetails:
          addressVerificationServiceResultCode: FULL_MATCH
          cardSecurityCodeResultCode: MATCH
        credentialOnFileResponse: null
        customData:
          property1: string
          property2: string
    threeDSecureBrowserChannelWithPaymentMethodId:
      summary: 3D-Secure Browser channel, with Payment Method Id
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        amount:
          amount: 16000
          currency: CAD
        browserIpAddress: 104.75.173.179
        browserScreenHeight: 1080
        browserScreenWidth: 1920
        cardholderEmail: moneris@moneris.com
        cardholderName: John Doe
        cardholderPhoneNumber: '+18663197450'
        threeDSecureDeviceChannel: BROWSER
        threeDSecureMessageCategory: PAYMENT
        billingAddress:
          unitNumber: 123A
          streetNumber: '3300'
          streetName: Bloor
          city: Toronto
          province: 'ON'
          postalCode: M8X 2X2
          country: CA
        paymentMethod:
          paymentMethodSource: PAYMENT_METHOD_ID
          paymentMethodId: pm0001J7HZZHPB20VCHWN8PEEPXZYH
        threeDSecureRequestType: CARDHOLDER
        threeDSecureNotificationUrl: https%3A%2F%2Fputsreq.com%2FnMhp2fzHDgfzSs4GiNTD
        threeDSecureCompletionIndicator: SUCCESS
        threeDSecureChallengeWindowSize: FULL_SCREEN
        browserUserAgent: Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})
        browserJavaEnabled: true
        browserJavascriptEnabled: true
        browserLanguage: en
    threeDSecureBrowserChannelWithCardPaymentMethod:
      summary: 3D-Secure Browser channel, with Card Payment Method
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        amount:
          amount: 16000
          currency: CAD
        browserIpAddress: 104.75.173.179
        browserScreenHeight: 1080
        browserScreenWidth: 1920
        cardholderEmail: moneris@moneris.com
        cardholderName: John Doe
        cardholderPhoneNumber: '+18663197450'
        threeDSecureDeviceChannel: BROWSER
        threeDSecureMessageCategory: PAYMENT
        billingAddress:
          unitNumber: 123A
          streetNumber: '3300'
          streetName: Bloor
          city: Toronto
          province: 'ON'
          postalCode: M8X 2X2
          country: CA
        paymentMethod:
          paymentMethodSource: CARD
          card:
            cardNumber: '4365729291041247'
            expiryMonth: 1
            expiryYear: 2028
            cardSecurityCode: '123'
        threeDSecureRequestType: CARDHOLDER
        threeDSecureNotificationUrl: https%3A%2F%2Fputsreq.com%2FnMhp2fzHDgfzSs4GiNTD
        threeDSecureCompletionIndicator: SUCCESS
        threeDSecureChallengeWindowSize: FULL_SCREEN
        browserUserAgent: Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})
        browserJavaEnabled: true
        browserJavascriptEnabled: true
        browserLanguage: en
    threeDSecureBrowserChannelWithTemporaryToken:
      summary: 3D-Secure Browser channel, with Temporary Token
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        amount:
          amount: 16000
          currency: CAD
        browserIpAddress: 104.75.173.179
        browserScreenHeight: 1080
        browserScreenWidth: 1920
        cardholderEmail: moneris@moneris.com
        cardholderName: John Doe
        cardholderPhoneNumber: '+18663197450'
        threeDSecureDeviceChannel: BROWSER
        threeDSecureMessageCategory: PAYMENT
        billingAddress:
          unitNumber: 123A
          streetNumber: '3300'
          streetName: Bloor
          city: Toronto
          province: 'ON'
          postalCode: M8X 2X2
          country: CA
        paymentMethod:
          paymentMethodSource: TEMPORARY_TOKEN
          temporaryToken: ot-y2mxjFqmqDisQQGB6hQ8xwQ2
        threeDSecureRequestType: CARDHOLDER
        threeDSecureNotificationUrl: https%3A%2F%2Fputsreq.com%2FnMhp2fzHDgfzSs4GiNTD
        threeDSecureCompletionIndicator: SUCCESS
        threeDSecureChallengeWindowSize: FULL_SCREEN
        browserUserAgent: Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})
        browserJavaEnabled: true
        browserJavascriptEnabled: true
        browserLanguage: en
    threeDSecureBrowserChannelWithPermanentToken:
      summary: 3D-Secure Browser channel, with Permanent Token
      value:
        idempotencyKey: 5d8f812e-9969-4885-85bb-d03948eccac2
        amount:
          amount: 16000
          currency: CAD
        browserIpAddress: 104.75.173.179
        browserScreenHeight: 1080
        browserScreenWidth: 1920
        cardholderEmail: moneris@moneris.com
        cardholderName: John Doe
        cardholderPhoneNumber: '+18663197450'
        threeDSecureDeviceChannel: BROWSER
        threeDSecureMessageCategory: PAYMENT
        billingAddress:
          unitNumber: 123A
          streetNumber: '3300'
          streetName: Bloor
          city: Toronto
          province: 'ON'
          postalCode: M8X 2X2
          country: CA
        paymentMethod:
          paymentMethodSource: PERMANENT_TOKEN
          permanentToken: ot-y2mxjFqmqDisQQGB6hQ8xwQ2
        threeDSecureRequestType: CARDHOLDER
        threeDSecureNotificationUrl: https%3A%2F%2Fputsreq.com%2FnMhp2fzHDgfzSs4GiNTD
        threeDSecureCompletionIndicator: SUCCESS
        threeDSecureChallengeWindowSize: FULL_SCREEN
        browserUserAgent: Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})
        browserJavaEnabled: true
        browserJavascriptEnabled: true
        browserLanguage: en
  responses:
    invalidListbadRequest:
      description: Bad Request.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        Sunset:
          $ref: '#/components/headers/sunset'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          examples:
            idempotency_error:
              $ref: '#/components/examples/InvalidListRequestErrorResponse'
    unauthorized:
      description: Not authorized. The user does not have a valid API Key or Access Token.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        Sunset:
          $ref: '#/components/headers/sunset'
        WWW-Authenticate:
          schema:
            type: string
            example: Bearer, error="invalid_token"
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            type: https://developer.moneris.com/en/More/Testing/Response%20Codes
            title: UNAUTHORIZED_REQUEST
            status: 401
            detail: null
            instance: null
            category: UNAUTHORIZED_ERROR
            errors: []
    forbidden:
      description: Forbidden. The user does not have permission to access the requested resource.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        Sunset:
          $ref: '#/components/headers/sunset'
        WWW-Authenticate:
          schema:
            type: string
            example: Bearer, error="insufficient_scope"
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            type: https://developer.moneris.com/en/More/Testing/Response%20Codes
            title: FORBIDDEN_REQUEST
            status: 403
            detail: null
            instance: null
            category: UNAUTHORIZED_ERROR
            errors: []
    tooManyRequests:
      description: Too Many Requests
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        Sunset:
          $ref: '#/components/headers/sunset'
        X-RateLimit-Limit:
          $ref: '#/components/headers/rateLimitCount'
        X-RateLimit-Remaining:
          $ref: '#/components/headers/rateLimitRemaining'
        X-RateLimit-Reset:
          $ref: '#/components/headers/rateLimitReset'
        Retry-After:
          $ref: '#/components/headers/rateLimitReset'
    internalServer:
      description: Unexpected error.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        Sunset:
          $ref: '#/components/headers/sunset'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            type: https://developer.moneris.com/en/More/Testing/Response%20Codes
            title: INTERNAL_SERVER_ERROR
            status: 500
            detail: null
            instance: null
            category: INTERNAL_SERVER_ERROR
            errors: []
    serviceUnavailable:
      description: Service Temporarily Unavailable
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        Sunset:
          $ref: '#/components/headers/sunset'
        Retry-After:
          $ref: '#/components/headers/retryAfter'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            type: https://api-developer.moneris.com/responsehandling/
            title: SERVICE_UNAVAILABLE
            status: 503
            detail: null
            instance: null
            category: INTERNAL_SERVER_ERROR
            errors: []
    conflict:
      description: Request could not be completed due to a conflict with resource state or existing idempotency key.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        Sunset:
          $ref: '#/components/headers/sunset'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          examples:
            idempotency_error:
              $ref: '#/components/examples/IdempotencyRequestErrorResponse'
    notFound:
      description: Not Found.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        Sunset:
          $ref: '#/components/headers/sunset'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            type: https://developer.moneris.com/en/More/Testing/Response%20Codes
            title: NOT_FOUND
            status: 404
            detail: null
            instance: /payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV
            category: INVALID_REQUEST_ERROR
            errors: []
    badRequest:
      description: Bad Request.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        Sunset:
          $ref: '#/components/headers/sunset'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
    unprocessableContent:
      description: |
        The API cannot complete the requested action due to semantic or business validation errors. 
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        Sunset:
          $ref: '#/components/headers/sunset'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
    concurrencyConflict:
      description: Request could not be completed due to a concurrent access issue.
      headers:
        Api-Version:
          $ref: '#/components/headers/apiVersion'
        X-Correlation-Id:
          $ref: '#/components/headers/correlationId'
        Sunset:
          $ref: '#/components/headers/sunset'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/error'
          examples:
            concurrency_error:
              $ref: '#/components/examples/concurrentRequestErrorResponse'
