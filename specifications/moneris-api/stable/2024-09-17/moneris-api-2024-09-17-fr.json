{
  "openapi": "3.0.0",
  "info": {
    "version": "2.0.0",
    "title": "API de Moneris",
    "description": "Plateforme des API de Moneris\n\n\n[<img src=\"https://run.pstmn.io/button.svg\" alt=\"Exécuter Dans Postman\" style=\"width: 128px; height:32px;\">](https://god.gw.postman.com/run-collection/25575461-f04750a0-88e9-4c83-8b58-a3aff15eeea8?action=collection%2Ffork&collection-url=entityId%3D25575461-f04750a0-88e9-4c83-8b58-a3aff15eeea8%26entityType%3Dcollection%26workspaceId%3D5d2a9a0f-57a7-441c-b2af-fe6315e80a08)\n",
    "termsOfService": "https://www.moneris.com/fr-ca/juridiques/conditions-utilisation",
    "contact": {
      "url": "https://api-developer.moneris.com",
      "email": "UnifiedAPI@moneris.com"
    },
    "license": {
      "name": "Moneris",
      "url": "https://developer.moneris.com/Agreements/Terms%20of%20Use"
    },
    "x-audience": "external-public"
  },
  "servers": [
    {
      "url": "https://api.moneris.io",
      "description": "Serveur de production (utilise des données réelles)"
    },
    {
      "url": "https://api.sb.moneris.io",
      "description": "Serveur de test (utilise des données de test)"
    }
  ],
  "tags": [
    {
      "name": "Paiements",
      "description": "Effectuer et gérer les paiements"
    },
    {
      "name": "Modes de Paiement",
      "description": "Créer et gérer les modes paiements"
    },
    {
      "name": "Remboursements",
      "description": "Effectuer et gérer les remboursements"
    },
    {
      "name": "Validations",
      "description": "Effectuer et gérer les validations"
    },
    {
      "name": "Clients",
      "description": "Créer et gérer les clients"
    },
    {
      "name": "Authentification 3DS",
      "description": "Effectuer des authentications 3D-Secure sur des moyens de paiements"
    },
    {
      "name": "Kount",
      "description": "Effectuer et gérer les demandes d'évaluation des risques Kount"
    }
  ],
  "paths": {
    "/payments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Liste des paiements",
        "description": "Renvoie une liste paginée de paiements.",
        "operationId": "getPayments",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listPaymentsResponse"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "post": {
        "summary": "Créer un paiement",
        "description": "Cette opération est utilisée pour initier un paiement.",
        "operationId": "createPayments",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createPaymentRequest"
              },
              "examples": {
                "regularPurchaseWithPaymentMethodId": {
                  "$ref": "#/components/examples/regularPurchaseWithPaymentMethodId"
                },
                "regularPurchaseWithCardPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithCardPaymentMethod"
                },
                "regularPurchaseWithTemporaryPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithTemporaryPaymentMethod"
                },
                "regularPurchaseWithPermanentPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithPermanentPaymentMethod"
                },
                "regularPurchaseWithApplePayEncryptedPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithApplePayEncryptedPaymentMethod"
                },
                "regularPurchaseWithApplePayDecryptedPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithApplePayDecryptedPaymentMethod"
                },
                "regularPurchaseWithGooglePayEncryptedPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithGooglePayEncryptedPaymentMethod"
                },
                "regularPurchaseWithGooglePayDecryptedPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithGooglePayDecryptedPaymentMethod"
                },
                "preAuthorizationWithPaymentMethodId": {
                  "$ref": "#/components/examples/preAuthorizationWithPaymentMethodId"
                },
                "preAuthorizationWithCardPaymentMethod": {
                  "$ref": "#/components/examples/preAuthorizationWithCardPaymentMethod"
                },
                "preAuthorizationWithTemporaryToken": {
                  "$ref": "#/components/examples/preAuthorizationWithTemporaryToken"
                },
                "preAuthorizationWithPermanentToken": {
                  "$ref": "#/components/examples/preAuthorizationWithPermanentToken"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createPaymentSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/createPaymentBadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/createPaymentUnprocessableContentResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/payments/{payment-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/paymentId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Récupérer le paiement",
        "description": "Récupérer un paiement à l’aide de son ID de paiement",
        "operationId": "getPayment",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrievePaymentSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/payments/{payment-id}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/paymentId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Annuler le paiement",
        "description": "Annuler un paiement. Cette opération peut ne pas être possible si le paiement a été effectué.",
        "operationId": "cancelPayment",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cancelPaymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/cancelPaymentSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/cancelPaymentUnprocessableContentResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/payments/{payment-id}/complete": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/paymentId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Effectuer le paiement",
        "description": "Cela permettra de saisir efficacement un paiement qui a été autorisé.",
        "operationId": "completePayment",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/completionRequest"
              },
              "example": {
                "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
                "invoiceNumber": "1a2s3d45v6",
                "customData": {
                  "property1": "string",
                  "property2": "string"
                },
                "amount": {
                  "amount": 16000,
                  "currency": "CAD"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/completePaymentSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/completePaymentBadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/completePaymentUnprocessableContentResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/payment-methods": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Répertorier les modes de paiement",
        "description": "Récupère une liste paginée des modes de paiement.",
        "operationId": "getPaymentMethods",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de Paiement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listPaymentMethodsResponse"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "post": {
        "summary": "Créer un mode de paiement",
        "description": "Créez un mode de paiement.",
        "operationId": "createPaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de Paiement"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createPaymentMethodRequest"
              },
              "examples": {
                "card": {
                  "$ref": "#/components/examples/cardPaymentMethodRequest"
                },
                "temporary_token": {
                  "$ref": "#/components/examples/temporaryTokenPaymentMethodRequest"
                },
                "permanent_token": {
                  "$ref": "#/components/examples/permanentTokenPaymentMethodRequest"
                },
                "apple_pay_encrypted": {
                  "$ref": "#/components/examples/applePayEncryptedPaymentMethodRequest"
                },
                "apple_pay_decrypted": {
                  "$ref": "#/components/examples/applePayDecryptedPaymentMethodRequest"
                },
                "google_pay_encrypted": {
                  "$ref": "#/components/examples/googlePayEncryptedPaymentMethodRequest"
                },
                "google_pay_decrypted": {
                  "$ref": "#/components/examples/googlePayDecryptedPaymentMethodRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createPaymentMethodSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/payment-methods/{payment-method-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/paymentMethodId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Récupérer le mode de paiement",
        "description": "Récupérer un moyen de paiement par ID",
        "operationId": "getPaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de Paiement"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrievePaymentMethodSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/paymentMethodNotFoundResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "put": {
        "summary": "Mettre à jour le mode de paiement",
        "description": "Mettre à jour le mode de paiement référencé par son Id. \nCertaines informations peuvent ne pas être mises à jour si le mode de paiement a été utilisé dans une transaction.\n",
        "operationId": "updatePaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de Paiement"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updatePaymentMethodRequest"
              },
              "examples": {
                "card": {
                  "$ref": "#/components/examples/updateCardPaymentMethodRequest"
                },
                "temporary_token": {
                  "$ref": "#/components/examples/updateTemporaryTokenPaymentMethodRequest"
                },
                "permanent_token": {
                  "$ref": "#/components/examples/updatePermanentTokenPaymentMethodRequest"
                },
                "apple_pay_encrypted": {
                  "$ref": "#/components/examples/applePayEncryptedPaymentMethodRequest"
                },
                "apple_pay_decrypted": {
                  "$ref": "#/components/examples/applePayDecryptedPaymentMethodRequest"
                },
                "google_pay_encrypted": {
                  "$ref": "#/components/examples/googlePayEncryptedPaymentMethodRequest"
                },
                "google_pay_decrypted": {
                  "$ref": "#/components/examples/googlePayDecryptedPaymentMethodRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/paymentMethodUpdateSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/paymentMethodNotFoundResponse"
          },
          "409": {
            "$ref": "#/components/responses/concurrencyConflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "delete": {
        "summary": "Supprimer le mode de paiement",
        "description": "Supprime un mode de paiement.",
        "operationId": "deletePaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de Paiement"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/paymentMethodDeleteSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/paymentMethodNotFoundResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/refunds": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Liste des remboursements",
        "description": "Renvoie une liste paginée des opérations de remboursement.",
        "operationId": "getRefunds",
        "security": [
          {
            "OAuth2": [
              "refund.read"
            ]
          },
          {
            "OAuth2": [
              "refund.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Remboursements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listRefundsSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "post": {
        "summary": "Créer un remboursement",
        "description": "Cette opération est utilisée pour créer un remboursement. \nPour les remboursements de paiement, l’ID de paiement est requis tandis que le mode de paiement n’est pas requis.\nPour les remboursements indépendants, aucun identifiant de paiement n’est requis, mais le mode de paiement est requis.\n",
        "operationId": "createRefund",
        "security": [
          {
            "OAuth2": [
              "refund.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Remboursements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRefundRequest"
              },
              "examples": {
                "matching": {
                  "$ref": "#/components/examples/matchingRefundRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createRefundSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/createRefundBadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/createRefundDeclinedResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/refunds/{refund-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/refundId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Récupérer le remboursement",
        "description": "Récupérer un remboursement par son Id.",
        "operationId": "getRefundById",
        "security": [
          {
            "OAuth2": [
              "refund.read"
            ]
          },
          {
            "OAuth2": [
              "refund.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Remboursements"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrieveRefundSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/refundNotFoundResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/validations": {
      "description": "Paramétrez un mode de paiement pour les paiements futurs. \nSimilaire à un paiement, mais aucun frais n’est créé.\nUtile lors de l’intégration des clients, mais pas pour les facturer tout de suite.\n",
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Validations de cartes de liste",
        "description": "Renvoie une liste paginée des validations de cartes qui ont été exécutées.",
        "operationId": "getValidations",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Validations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listValidationsSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "post": {
        "summary": "Créer une validation de carte",
        "description": "Lancez une nouvelle demande de validation de carte.",
        "operationId": "createValidation",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Validations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createValidationRequest"
              },
              "examples": {
                "with_payment_method_id": {
                  "$ref": "#/components/examples/validationWithPaymentMethodId"
                },
                "with_card_payment_method": {
                  "$ref": "#/components/examples/validationWithCardPaymentMethod"
                },
                "with_temporary_token_payment_method": {
                  "$ref": "#/components/examples/validationWithTemporaryTokenPaymentMethod"
                },
                "with_permanent_token_payment_method": {
                  "$ref": "#/components/examples/validationWithPermanentTokenPaymentMethod"
                },
                "with_apple_pay_encrypted_payment_method": {
                  "$ref": "#/components/examples/validationWithApplePayEncryptedPaymentMethod"
                },
                "with_apple_pay_decrypted_payment_method": {
                  "$ref": "#/components/examples/validationWithApplePayDecryptedPaymentMethod"
                },
                "with_google_pay_encrypted_payment_method": {
                  "$ref": "#/components/examples/validationWithGooglePayEncryptedPaymentMethod"
                },
                "with_google_pay_decrypted_payment_method": {
                  "$ref": "#/components/examples/validationWithGooglePayDecryptedPaymentMethod"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Demande de validation créée avec succès.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Réponse du résultat de l’opération de validation ayant échoué",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              }
            },
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "invalid_request": {
                    "$ref": "#/components/examples/InvalidRequestErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "description": "Réponse du résultat de l’opération de validation ayant échoué",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              }
            },
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "declined": {
                    "$ref": "#/components/examples/exp-validationResponse_DeclineErrorResponse"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/validations/{validation-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/validationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Récupérer la validation de la carte.",
        "description": "Récupérer une validation de carte par id.",
        "operationId": "getValidation",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Validations"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrieveValidationSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/validationNotFoundResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/customers": {
      "description": "Cette API permet de gérer les clients passés et récurrents.\nTrès utile lors du suivi et de la gestion des frais appartenant au même client.\n",
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Liste des clients",
        "description": "Renvoie une liste paginée de clients.",
        "operationId": "getCustomers",
        "security": [
          {
            "OAuth2": [
              "customer.read"
            ]
          },
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listCustomersSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "post": {
        "summary": "Créer un client",
        "description": "Cette opération permet de créer un nouveau client.",
        "operationId": "createCustomers",
        "security": [
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createCustomerSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/customers/{customer-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/customerId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Récupérer le client",
        "description": "Récupérer un client par son Id.",
        "operationId": "getCustomer",
        "security": [
          {
            "OAuth2": [
              "customer.read"
            ]
          },
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrieveCustomerSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/customerNotFoundResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "put": {
        "summary": "Mettre à jour le client",
        "description": "Met à jour les données du client telles que le nom, l’adresse, etc.",
        "operationId": "updateCustomer",
        "security": [
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/customerUpdateSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/customerNotFoundResponse"
          },
          "409": {
            "$ref": "#/components/responses/concurrencyConflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "delete": {
        "summary": "Supprimer le client",
        "description": "Supprimer un client par son identifiant",
        "operationId": "deleteCustomer",
        "security": [
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/customerDeleteSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/customerNotFoundResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/three-d-secure/authentications": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Créer une authentification",
        "description": "Cette opération permet de créer une demande d’authentification. \nLa demande d’authentification sert à lancer le processus de validation de la carte. \nLe résultat de cette demande détermine si 3DS est pris en charge par la carte et quel type d’authentification est requis.\n",
        "operationId": "createAuthentication",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Authentification 3DS"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authenticationRequest"
              },
              "examples": {
                "threeDSecureBrowserChannelWithPaymentMethodId": {
                  "$ref": "#/components/examples/threeDSecureBrowserChannelWithPaymentMethodId"
                },
                "threeDSecureBrowserChannelWithCardPaymentMethod": {
                  "$ref": "#/components/examples/threeDSecureBrowserChannelWithCardPaymentMethod"
                },
                "threeDSecureBrowserChannelWithTemporaryToken": {
                  "$ref": "#/components/examples/threeDSecureBrowserChannelWithTemporaryToken"
                },
                "threeDSecureBrowserChannelWithPermanentToken": {
                  "$ref": "#/components/examples/threeDSecureBrowserChannelWithPermanentToken"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createThreeDSecureAuthenticationSuccessResponse"
          },
          "202": {
            "$ref": "#/components/responses/createThreeDSecureAuthenticationChallengeResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/three-d-secure/authentications/{authentication-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/authenticationId"
        }
      ],
      "get": {
        "summary": "Récupérer l’authentification",
        "description": "Récupérer une authentification par son ID d’authentification",
        "operationId": "getAuthentication",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Authentification 3DS"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrieveThreeDSecureAuthenticationSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/three-d-secure/authentications/{authentication-id}/lookup": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/authenticationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Recherche de valeur d’authentification",
        "description": "L’objectif du flux 3-D Secure est de vérifier que le véritable titulaire de la carte fait partie de l’autorisation. Le flux d’authentification est utilisé pour présenter un moyen d’authentifier le titulaire de la carte à l’aide, par exemple, de l’OTP ou d’une méthode d’identification fédérée.",
        "operationId": "authenticationValueLookup",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Authentification 3DS"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lookupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/threeDSecureAuthenticationLookupSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/three-d-secure/card-lookups": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Recherche de carte 3DS",
        "operationId": "cardLookup",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Authentification 3DS"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cardLookupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createThreeDSecureCardLookupSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/kount-inquiries": {
      "parameters": [
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        }
      ],
      "post": {
        "summary": "Créer une demande Kount",
        "operationId": "createKountInquiry",
        "security": [
          {
            "OAuth2": [
              "kount.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Kount"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kountInquiryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createKountInquirySuccessResponse"
          },
          "202": {
            "$ref": "#/components/responses/createKountInquiryAcceptedResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "get": {
        "summary": "Liste Kount Demandes de renseignements",
        "operationId": "getKountInquiries",
        "security": [
          {
            "OAuth2": [
              "kount.read"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Kount"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listKountInquiriesSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/kount-inquiries/{kount-inquiry-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/kountInquiryId"
        }
      ],
      "get": {
        "summary": "Obtenir Kount Inquiry by Id",
        "operationId": "getKountInquiryById",
        "security": [
          {
            "OAuth2": [
              "kount.read"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Kount"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrieveKountInquiryResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/kount-inquiries/{kount-inquiry-id}/assert": {
      "parameters": [
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/kountInquiryId"
        }
      ],
      "post": {
        "summary": "Kount Inquiry Assert",
        "operationId": "kountInquiryAssert",
        "security": [
          {
            "OAuth2": [
              "kount.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Kount"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kountAssertRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/assertKountInquirySuccessResponse"
          },
          "202": {
            "$ref": "#/components/responses/assertKountInquiryAcceptedResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Api-Key",
        "description": "Une clé API est un jeton fourni par un client lors de ses appels API.\n\nLes clés API sont censées être un secret que seuls le client et le serveur connaissent.\n"
      },
      "OAuth2": {
        "type": "oauth2",
        "description": "OAuth 2.0 est un protocole d'autorisation qui donne à un client API un accès limité aux données utilisateur sur un serveur Web.\n\nOAuth s'appuie sur des scénarios d'authentification qui permettent au propriétaire de la ressource (utilisateur) de partager le contenu protégé du serveur hébergeant la ressource, sans partager ses informations d'identification. À cette fin, un serveur OAuth 2.0 émet des jetons d'accès que les applications clientes peuvent utiliser pour accéder aux ressources protégées au nom du propriétaire de la ressource.\n\nMoneris recommande l'utilisation d'OAuth 2.0 car il fournit des niveaux d'autorisation précis.\n",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://api.moneris.io/oauth2/token",
            "scopes": {
              "payment.read": "accorde un accès en lecture aux API liées au paiement",
              "payment.write": "accorde un accès en lecture et en écriture aux API liées au paiement",
              "refund.read": "accorde un accès en lecture aux remboursements",
              "refund.write": "accorde un accès en lecture et en écriture aux remboursements",
              "customer.read": "accorde un accès en lecture aux données client",
              "customer.write": "accorde un accès en lecture et en écriture aux données client",
              "kount.read": "accorde un accès en lecture aux demandes Kount",
              "kount.write": "accorde un accès en lecture et en écriture aux demandes Kount"
            }
          }
        }
      }
    },
    "schemas": {
      "apiVersion": {
        "description": "Version de l’API du point de terminaison. \n\nDoit être fourni par le biais d’en-têtes. \n",
        "type": "string",
        "example": "2024-09-17"
      },
      "merchantId": {
        "type": "string",
        "description": "Identification de treize caractères fournie aux marchands par Moneris. \n",
        "minLength": 13,
        "maxLength": 13,
        "example": "0123456789101"
      },
      "dateTime": {
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z",
        "description": "Date & Heure"
      },
      "orderId": {
        "type": "string",
        "description": "Indique l’identifiant de transaction défini par le commerçant ou l’ID de commande. Les identifiants sont uniques pour chaque transaction d’achat, de préautorisation et de remboursement indépendant\n\n**Remarque** : Il n’est pas possible que deux transactions de ce type aient le même ID de commande.\n",
        "minLength": 1,
        "maxLength": 50,
        "example": "1q2w3e4r5t6t78",
        "pattern": "^[a-zA-Z0-9-_]+$",
        "nullable": true
      },
      "invoiceNumber": {
        "type": "string",
        "description": "Envoie une valeur unique pour identifier une transaction qui est consignée par Solutions Moneris.\n",
        "minLength": 1,
        "maxLength": 17,
        "example": "1a2s3d45v6",
        "nullable": true
      },
      "transactionDateTime": {
        "description": "Indique la date et l’heure de la transaction.",
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z"
      },
      "createdAt": {
        "description": "Heure à laquelle l’objet a été créé",
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z"
      },
      "modifiedAt": {
        "nullable": true,
        "description": "Heure à laquelle l’objet a été modifié",
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z"
      },
      "amount": {
        "type": "integer",
        "format": "int32",
        "minimum": 0,
        "maximum": 999999999,
        "example": 10000,
        "description": "Montant"
      },
      "currency": {
        "type": "string",
        "description": "Fournit le code monétaire à trois lettres selon la norme ISO 4217. \n\nPour obtenir la liste complète des codes de devise, rendez-vous sur : https://en.wikipedia.org/wiki/ISO_4217\n",
        "minLength": 3,
        "maxLength": 4,
        "example": "CAD",
        "format": "iso-4217"
      },
      "subTotalAmount": {
        "type": "object",
        "description": "Sous-montant total de la transaction. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "nullable": true,
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 2000,
          "currency": "CAD"
        }
      },
      "tipAmount": {
        "type": "object",
        "description": "Montant total du pourboire pour la transaction. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059\n",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "nullable": true,
        "example": {
          "amount": 1200,
          "currency": "CAD"
        }
      },
      "amountDetails": {
        "description": "Répartition des détails du montant",
        "type": "object",
        "nullable": true,
        "properties": {
          "subTotalAmount": {
            "$ref": "#/components/schemas/subTotalAmount"
          },
          "tipAmount": {
            "$ref": "#/components/schemas/tipAmount"
          }
        }
      },
      "cardholderName": {
        "type": "string",
        "description": "Nom du titulaire de la carte",
        "minLength": 1,
        "maxLength": 60,
        "example": "John Doe"
      },
      "companyName": {
        "type": "string",
        "description": "Identifie le nom de l'entreprise associé",
        "minLength": 1,
        "maxLength": 50,
        "example": "SP Ltd",
        "nullable": true
      },
      "cardholderInformation": {
        "type": "object",
        "description": "Informations sur le titulaire de la carte.",
        "nullable": true,
        "properties": {
          "cardholderName": {
            "$ref": "#/components/schemas/cardholderName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          }
        },
        "required": [
          "cardholderName"
        ]
      },
      "contactDetails": {
        "type": "object",
        "description": "Coordonnées",
        "nullable": true,
        "properties": {
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Numéro de téléphone.",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "minLength": 3,
            "maxLength": 16,
            "example": "+18663197450"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "email",
            "description": "Contient l’adresse e-mail du client.\n\nPour connaître les protocoles de courrier électronique standard, consultez : https://www.rfc-editor.org/rfc/rfc5322\n",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com"
          }
        },
        "example": {
          "phoneNumber": "+18663197450",
          "email": "moneris@moneris.com"
        }
      },
      "expiryMonth": {
        "type": "integer",
        "format": "int32",
        "description": "Mois d’expiration de la carte. Le format doit être MM",
        "minimum": 1,
        "maximum": 12,
        "example": 1
      },
      "expiryYear": {
        "type": "integer",
        "format": "int32",
        "description": "Affiche l’année d’expiration de la carte. Format accepté : AAAA",
        "minimum": 2022,
        "maximum": 9999,
        "example": 2023
      },
      "cardBrand": {
        "type": "string",
        "description": "Affiche le nom de la marque de la carte associé au type de carte.",
        "enum": [
          "MASTERCARD",
          "VISA",
          "AMERICAN_EXPRESS",
          "JCB",
          "DISCOVER",
          "INTERAC",
          "UNIONPAY",
          "GIFT_MONERIS",
          "GIFT_DATACANDY",
          "GIFT_GIVEX",
          null
        ],
        "nullable": true,
        "example": "MASTERCARD"
      },
      "cardFingerprint": {
        "type": "string",
        "description": "Identifiant unique de la carte. \n\nL’empreinte digitale attribue de manière aléatoire des identificateurs pour les cartes qui partagent le même numéro de compte principal (PAN) afin d’identifier facilement lorsque plusieurs méthodes de paiement sont associées à la même carte sous-jacente, et aide les commerçants à identifier les clients individuels sur divers canaux. c.-à-d.  programmes de fidélité.\n",
        "maxLength": 255,
        "example": "1Q2W3E4r5t6rfwewerwewrrw",
        "nullable": true
      },
      "issuer": {
        "type": "string",
        "description": "L’émetteur de la carte.",
        "minLength": 1,
        "maxLength": 100,
        "example": "RBC",
        "nullable": true
      },
      "cardInformation": {
        "type": "object",
        "description": "Informations sur la carte utilisée pour la transaction",
        "properties": {
          "bankIdentificationNumber": {
            "nullable": true,
            "type": "string",
            "description": "**BIN** : Numéro d’Identification de la Banque \n\nIl s’agit des six à huit premiers chiffres du numéro de compte principal (PAN) et identifie le réseau de paiement concerné et l’établissement émetteur de paiement spécifique.\n",
            "minLength": 6,
            "maxLength": 8,
            "example": "123456"
          },
          "lastFour": {
            "nullable": true,
            "type": "string",
            "description": "Les 4 derniers chiffres de la carte.",
            "minLength": 4,
            "maxLength": 4,
            "example": "1234"
          },
          "expiryMonth": {
            "$ref": "#/components/schemas/expiryMonth"
          },
          "expiryYear": {
            "$ref": "#/components/schemas/expiryYear"
          },
          "cardBrand": {
            "$ref": "#/components/schemas/cardBrand"
          },
          "cardType": {
            "nullable": true,
            "type": "string",
            "description": "Spécifie l’utilisation prévue de la carte. c’est-à-dire débit ou crédit.",
            "enum": [
              "CREDIT",
              "DEBIT",
              "DOMESTIC_DEBIT",
              "PREPAID_RELOADABLE",
              "PREPAID_NON_RELOADABLE",
              "UNKNOWN",
              "GIFT",
              "LOYALTY",
              "FLEET",
              "CORPORATE"
            ],
            "example": "CREDIT"
          },
          "cardFingerprint": {
            "$ref": "#/components/schemas/cardFingerprint"
          },
          "issuer": {
            "$ref": "#/components/schemas/issuer"
          }
        }
      },
      "paymentAccountReference": {
        "type": "string",
        "nullable": true,
        "description": "Utilisé pour lier des transactions basées sur un numéro de compte principal (PAN) et des transactions sur des jetons de paiement associés sans utiliser le PAN comme mécanisme de liaison.\n",
        "minLength": 1,
        "maxLength": 29,
        "example": "11112222333344445555666677778"
      },
      "storePaymentMethod": {
        "description": "Stockez ce mode de paiement créé par le biais de ce paiement pour une utilisation ultérieure. \n- DO_NOT_STORE : Le mode de paiement ne sera pas enregistré.\n- CARDHOLDER_INITIATED : Mode de paiement à enregistrer et ne peut être réutilisé qu’avec le consentement du titulaire de la carte. Limité au magasin, à la pré-autorisation et aux validations de carte.\n- MERCHANT_INITIATED : Mode de paiement à enregistrer et réutilisable sans le consentement du titulaire de la carte. Par exemple, les paiements récurrents.\n",
        "type": "string",
        "default": "DO_NOT_STORE",
        "enum": [
          "DO_NOT_STORE",
          "CARDHOLDER_INITIATED",
          "MERCHANT_INITIATED"
        ]
      },
      "cardPaymentMethodInformation": {
        "title": "Card Payment Method Information",
        "description": "Détails sur la carte utilisée dans le mode de paiement.",
        "type": "object",
        "properties": {
          "paymentMethodType": {
            "type": "string",
            "description": "Le type de Mode de paiement utilisé. Il peut s’agir de :\n  -Carte.\n",
            "enum": [
              "CARD"
            ]
          },
          "paymentMethodSource": {
            "type": "string",
            "description": "La source du Mode de paiement utilisé. Il peut s’agir de :\n  - L’Id d’un Mode de paiement déjà créé.\n  - Jeton permanent.\n  - Jeton temporaire.\n  -Carte.\n  - Portefeuille électronique.\n",
            "enum": [
              "CARD",
              "TEMPORARY_TOKEN",
              "PERMANENT_TOKEN",
              "APPLE_PAY_ENCRYPTED",
              "APPLE_PAY_DECRYPTED",
              "GOOGLE_PAY_ENCRYPTED",
              "GOOGLE_PAY_DECRYPTED"
            ],
            "example": "TEMPORARY_TOKEN"
          },
          "cardInformation": {
            "$ref": "#/components/schemas/cardInformation"
          },
          "paymentAccountReference": {
            "$ref": "#/components/schemas/paymentAccountReference"
          },
          "storePaymentMethod": {
            "$ref": "#/components/schemas/storePaymentMethod"
          }
        },
        "required": [
          "paymentMethodType",
          "paymentMethodSource",
          "cardInformation",
          "storePaymentMethod"
        ]
      },
      "customData": {
        "description": "Le marchand peut envoyer des métadonnées personnalisées avec la transaction dans cet objet. Moneris fera écho à ces valeurs en réponse.",
        "type": "object",
        "additionalProperties": {
          "type": "string",
          "minLength": 1,
          "maxLength": 50
        },
        "maxProperties": 10,
        "nullable": true
      },
      "paymentMethodResponse": {
        "title": "paymentMethodResponse",
        "description": "Objet de réponse du moyen de paiement",
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "cardholderInformation": {
            "$ref": "#/components/schemas/cardholderInformation"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/contactDetails"
          },
          "billingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "paymentMethodInformation": {
            "$ref": "#/components/schemas/cardPaymentMethodInformation"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "paymentMethodId",
          "merchantId",
          "paymentMethodInformation",
          "createdAt"
        ]
      },
      "paymentStatus": {
        "type": "string",
        "description": "Description de l’état du paiement.",
        "enum": [
          "CANCELED",
          "DECLINED",
          "DECLINED_RETRY",
          "AUTHORIZED",
          "PROCESSING",
          "SUCCEEDED"
        ],
        "example": "SUCCEEDED"
      },
      "iso": {
        "type": "string",
        "description": "Représente le code de réponse de Moneris pour le code de réponse équivalent de l’Organisation internationale de normalisation (ISO).",
        "minLength": 2,
        "maxLength": 2,
        "example": "00"
      },
      "responseCode": {
        "type": "string",
        "description": "\"Détails Codes de réponse des transactions :\n- **< 50** : Transaction approuvée - **> 50** : Transaction refusée\nNULL : Transaction non envoyée pour autorisation\nPour une liste complète des définitions, reportez-vous au tableau des codes de réponse.\n",
        "minLength": 3,
        "maxLength": 3,
        "example": "001"
      },
      "authorizationCode": {
        "type": "string",
        "maxLength": 8,
        "nullable": true,
        "pattern": "^[a-zA-Z0-9]*$",
        "description": "Contient une valeur générée par l’autorisateur pour les transactions financières. \nIl s’agit de l’identification de transaction de l’hôte d’autorisation.\n",
        "example": "11223344"
      },
      "message": {
        "type": "string",
        "description": "Affiche la description de la réponse renvoyée par l’établissement émetteur.\n\n**REMARQUE** : Ce message ne doit pas être affiché sur les matériaux destinés au titulaire de la carte.  \n\nPour obtenir des reçus, veuillez vous référer aux Exigences en matière de reçus.\n",
        "minLength": 1,
        "maxLength": 100,
        "example": "SUCCESS",
        "nullable": true
      },
      "ecommerceIndicator": {
        "type": "string",
        "description": "Catégorie de transaction e-commerce renvoyée par l’émetteur.\nLorsqu’elle est renvoyée dans le responese, elle peut être différente de la valeur envoyée dans la demande au cas où la transaction aurait été déclassée par l’émetteur.\n",
        "enum": [
          "MAIL_TELEPHONE_ORDER_SINGLE",
          "MAIL_TELEPHONE_ORDER_RECURRING",
          "MAIL_TELEPHONE_ORDER_INSTALMENT",
          "MAIL_TELEPHONE_ORDER_UNKNOWN",
          "AUTHENTICATED_ECOMMERCE",
          "NON_AUTHENTICATED_ECOMMERCE",
          "SSL_MERCHANT"
        ],
        "example": "AUTHENTICATED_ECOMMERCE",
        "default": "SSL_MERCHANT"
      },
      "statusDetails": {
        "type": "object",
        "description": "Détails supplémentaires sur le résultat de la transaction.",
        "properties": {
          "transactionUniqueId": {
            "type": "string",
            "description": "Identifiant de transaction en temps réel de l’hôte.",
            "nullable": true
          },
          "isoResponseCode": {
            "$ref": "#/components/schemas/iso"
          },
          "responseCode": {
            "$ref": "#/components/schemas/responseCode"
          },
          "authorizationCode": {
            "$ref": "#/components/schemas/authorizationCode"
          },
          "message": {
            "$ref": "#/components/schemas/message"
          },
          "ecommerceIndicator": {
            "$ref": "#/components/schemas/ecommerceIndicator"
          }
        },
        "required": [
          "isoResponseCode",
          "responseCode",
          "ecommerceIndicator"
        ]
      },
      "addressVerificationServiceResultCode": {
        "title": "AVS Result Description",
        "type": "string",
        "nullable": true,
        "description": "Indique le résultat de la vérification de l’adresse. \n",
        "enum": [
          "FULL_MATCH",
          "PARTIAL_MATCH",
          "NO_MATCH",
          "UNAVAILABLE",
          null
        ],
        "example": "FULL_MATCH"
      },
      "cardSecurityCodeResult": {
        "type": "string",
        "nullable": true,
        "description": "Indique le résultat de la validation du code de sécurité de la carte.\n-**MATCH**\n- **NO_MATCH**\n- **NOT_PROCESSED**\n- **CVD_NOT_PRESENT**\n- **NOT_CVD_PRESENT**\n- **AMEX_JCB_MATCH**\n- **AMEX_JCB_INVALID**\n- **OTHER**\"\n",
        "enum": [
          "MATCH",
          "NO_MATCH",
          "NOT_PROCESSED",
          "CVD_NOT_PRESENT",
          "NOT_CVD_PARTICIPANT",
          "AMEX_JCB_MATCH",
          "AMEX_JCB_INVALID",
          "OTHER",
          null
        ],
        "example": "MATCH"
      },
      "threeDSecureAuthenticationValueResult": {
        "type": "string",
        "nullable": true,
        "description": "La valeur de vérification de l'authentification du titulaire de la carte (CAVV), la valeur d'authentification du titulaire du compte (AAV) et la valeur de vérification American Express (AEVV) sont les valeurs qui permettent à Visa, Mastercard et American Express de valider l'intégrité des données de transaction Visa Secure, Mastercard Identity Check et American Express SafeKey. Ces valeurs sont renvoyées par l'émetteur au commerçant une fois l'authentification effectuée. Le commerçant intègre ensuite la valeur CAVV/AAV/AEVV dans la demande d'autorisation à l'aide de la demande de paiement avec les données de transaction 3-D Secure.\n",
        "enum": [
          "AMEX_AEVV_FAILED_ATTEMPT_ISSUER_KEY",
          "AMEX_AEVV_FAILED_ATTEMPT_ISSUER_NOT_PARTICIPATING_NETWORK_KEY",
          "AMEX_AEVV_FAILED_ATTEMPT_PARTICIPATING_NOT_AVAILABLE_NETWORK_KEY",
          "AMEX_AEVV_FAILED_AUTHENTICATION_ISSUER_KEY",
          "AMEX_AEVV_PASSED_ATTEMPT_ISSUER_KEY",
          "AMEX_AEVV_PASSED_ATTEMPT_ISSUER_NOT_PARTICIPATING_NETWORK_KEY",
          "AMEX_AEVV_PASSED_ATTEMPT_PARTICIPATING_NOT_AVAILABLE_NETWORK_KEY",
          "AMEX_AEVV_PASSED_AUTHENTICATION_ISSUER_KEY",
          "AMEX_AEVV_UNCHECKED",
          "VISA_CAVV_NOT_PRESENT_OR_NOT_VERIFIED",
          "MASTERCARD_AUTHENTICATION_ATTEMPTED",
          "MASTERCARD_AUTHENTICATION_FAILED",
          "MASTERCARD_AUTHENTICATION_SUCCESSFUL",
          "VISA_CAVV_AUTHENTICATION_RESULTS_INVALID",
          "VISA_CAVV_FAILED_VALIDATION_ATTEMPTED",
          "VISA_CAVV_FAILED_VALIDATION_AUTHENTICATION",
          "VISA_CAVV_NOT_VALIDATED_ISSUER_NOT_PARTICIPATING",
          "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED",
          "VISA_CAVV_PASSED_VALIDATION_AUTHENTICATION",
          "VISA_CAVV_PASSED_VALIDATION_INFO_ONLY",
          "VISA_CAVV_WAS_NOT_VALIDATED_ATTEMPTED",
          "VISA_CAVV_WAS_NOT_VALIDATED_AUTHENTICATION",
          null
        ],
        "example": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
      },
      "verificationDetails": {
        "description": "Codes de résultat pour CVD, AVS, 3DS",
        "type": "object",
        "properties": {
          "addressVerificationServiceResultCode": {
            "$ref": "#/components/schemas/addressVerificationServiceResultCode"
          },
          "cardSecurityCodeResultCode": {
            "$ref": "#/components/schemas/cardSecurityCodeResult"
          },
          "threeDSecureAuthenticationValueResultCode": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationValueResult"
          }
        }
      },
      "originalAmount": {
        "type": "object",
        "nullable": true,
        "description": "Montant initial de la première transaction de la série. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059\n",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 15000,
          "currency": "CAD"
        }
      },
      "issuerId": {
        "type": "string",
        "description": "Affiche un identifiant unique pour les informations d’identification stockées du titulaire de la carte. \n\nCes informations sont renvoyées par la marque de la carte lors du traitement d’une transaction d’identification enregistrée.\n",
        "minLength": 1,
        "maxLength": 15,
        "example": "A",
        "nullable": true
      },
      "credentialOnFileResponse": {
        "type": "object",
        "nullable": true,
        "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
        "properties": {
          "originalAmount": {
            "$ref": "#/components/schemas/originalAmount"
          },
          "issuerId": {
            "$ref": "#/components/schemas/issuerId"
          }
        }
      },
      "resourceId": {
        "type": "string",
        "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
        "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
        "minLength": 30,
        "maxLength": 30,
        "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
      },
      "refundReference": {
        "description": "Référence du remboursement.",
        "type": "object",
        "nullable": true,
        "properties": {
          "refundId": {
            "$ref": "#/components/schemas/resourceId"
          }
        },
        "required": [
          "refundId"
        ]
      },
      "transactionAmount": {
        "type": "object",
        "description": "Montant de la transaction. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 16000,
          "currency": "CAD"
        }
      },
      "refundDetails": {
        "description": "Les détails du remboursement, le cas échéant.",
        "type": "object",
        "nullable": true,
        "properties": {
          "refunds": {
            "description": "Liste des remboursements associés à ce paiement",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/refundReference"
            }
          },
          "refundedAmount": {
            "$ref": "#/components/schemas/transactionAmount"
          }
        },
        "required": [
          "refundedAmount"
        ]
      },
      "paymentResponse": {
        "title": "paymentResponse",
        "type": "object",
        "description": "Retourne un paiement traité",
        "properties": {
          "paymentId": {
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "transactionDateTime": {
            "$ref": "#/components/schemas/transactionDateTime"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "amount": {
            "description": "Montant de la transaction. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "authorizedAmount": {
            "description": "Montant de la transaction. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "capturableAmount": {
            "description": "Montant de la transaction. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "amountDetails": {
            "$ref": "#/components/schemas/amountDetails"
          },
          "customerId": {
            "nullable": true,
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "paymentStatus": {
            "$ref": "#/components/schemas/paymentStatus"
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/statusDetails"
          },
          "verificationDetails": {
            "$ref": "#/components/schemas/verificationDetails"
          },
          "credentialOnFileResponse": {
            "$ref": "#/components/schemas/credentialOnFileResponse"
          },
          "refundDetails": {
            "$ref": "#/components/schemas/refundDetails"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "paymentId",
          "merchantId",
          "transactionDateTime",
          "createdAt",
          "amount",
          "authorizedAmount",
          "capturableAmount",
          "paymentMethod",
          "paymentStatus",
          "transactionDetails",
          "verificationDetails"
        ]
      },
      "self": {
        "description": "Lien de pagination pointant vers la page actuelle.",
        "type": "string",
        "format": "uri-reference",
        "nullable": true
      },
      "first": {
        "description": "Lien de pagination pointant vers la première page.",
        "type": "string",
        "format": "uri-reference",
        "nullable": true
      },
      "last": {
        "description": "Lien de pagination pointant vers la dernière page.",
        "type": "string",
        "format": "uri-reference",
        "nullable": true
      },
      "next": {
        "description": "Lien de pagination pointant vers la page suivante.",
        "type": "string",
        "format": "uri-reference",
        "nullable": true
      },
      "previous": {
        "description": "Lien de pagination pointant vers la page précédente.",
        "type": "string",
        "format": "uri-reference",
        "nullable": true
      },
      "paymentResponseList": {
        "title": "paymentResponseList",
        "type": "object",
        "description": "corps de la réponse, renvoie une liste paginée des paiements",
        "properties": {
          "data": {
            "description": "Liste des paiements.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/paymentResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "parameterError": {
        "title": "Parameter error",
        "description": "Erreur liée à la propriété ou à l’en-tête de la demande.",
        "type": "object",
        "properties": {
          "parameterName": {
            "type": "string",
            "description": "Nom de la propriété ou de l’en-tête. Peut contenir des chemins imbriqués séparés par '.'",
            "example": "address.postalCode"
          },
          "parameterValue": {
            "type": "string",
            "nullable": true,
            "description": "Représentation de chaîne de valeur de propriété ou d’en-tête.",
            "example": "MAP3J8"
          },
          "reasonCode": {
            "type": "string",
            "description": "Raison qui a déclenché l’erreur.",
            "enum": [
              "INVALID_FORMAT",
              "REQUIRED_FIELD",
              "INVALID_VALUE"
            ],
            "example": "INVALID_FORMAT"
          },
          "errorMessage": {
            "type": "string",
            "description": "Description lisible de l'erreur.",
            "nullable": true,
            "example": "String 'MAP3J8' does not match the postal code pattern."
          }
        },
        "required": [
          "parameterName",
          "reasonCode"
        ]
      },
      "error": {
        "description": "Détails de la réponse d’erreur.",
        "properties": {
          "type": {
            "description": "Référence d’URI qui identifie le type de problème.  Idéalement, il devrait s’agir d’une URL stable pour la documentation des détails sur ce type d’erreur, mais il peut également s’agir d’un URN.  Si rien ne peut être fourni, une valeur « about :blank » est renvoyée.\n",
            "type": "string",
            "format": "uri",
            "example": "https://api-developer.moneris.com/responsehandling"
          },
          "title": {
            "description": "Un résumé court et lisible par l’homme du type de problème.   Il NE DEVRAIT PAS changer d’une occurrence à l’autre du problème, sauf à des fins de localisation\n",
            "type": "string",
            "example": "INSUFFICIENT_FUNDS",
            "nullable": true
          },
          "status": {
            "description": "il transmet le code d’état HTTP utilisé pour la commodité du consommateur.\n",
            "type": "integer",
            "format": "int32",
            "minimum": 100,
            "maximum": 505,
            "nullable": true
          },
          "detail": {
            "description": "Un message lisible par l’homme fournissant plus de détails sur l’erreur. Pour les erreurs de carte, ces messages peuvent être affichés à vos utilisateurs.\n",
            "type": "string",
            "example": "Funds are insufficient to execute the operation.",
            "nullable": true
          },
          "instance": {
            "description": "Référence d’URI qui identifie l’occurrence spécifique du problème. En règle générale, cela se résout en une ressource qui peut inclure plus de détails sur le problème.\n",
            "type": "string",
            "example": "/payments/12f3e0a8-1d68-2b86-dd30-4ca51bb66e10",
            "format": "uri-reference",
            "nullable": true
          },
          "category": {
            "description": "Type d’erreur renvoyé. \n - `API_ERROR` : cela se produit en raison d’un problème intermittent.  \n - `IDEMPOTENCY_ERROR` : la clé d’idempotence a déjà été utilisée.\n - `INVALID_REQUEST_ERROR` : les données fournies dans la demande ne sont pas valides.\n - `DECLINED_ERROR` : la transaction a été refusée par l’émetteur.\n - `UNAUTHORIZED_ERROR` : l’appelant n’est pas authentifié ou n’est pas autorisé à exécuter l’opération en cours.\n - `INTERNAL_SERVER_ERROR` : Un problème interne avec nos serveurs s’est produit.\n",
            "enum": [
              "API_ERROR",
              "IDEMPOTENCY_ERROR",
              "INVALID_REQUEST_ERROR",
              "DECLINED_ERROR",
              "UNAUTHORIZED_ERROR",
              "INTERNAL_SERVER_ERROR",
              null
            ],
            "type": "string",
            "nullable": true,
            "example": "DECLINED_ERROR"
          },
          "errors": {
            "type": "array",
            "description": "Liste des erreurs de validation lorsque la catégorie d’erreur est INVALID_REQUEST_ERROR.",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/parameterError"
            },
            "example": [
              {
                "parameterName": "address.postalCode",
                "parameterValue": "MAP3J8",
                "errorMessage": "address.Postal code does not match regular expression",
                "reasonCode": "INVALID_FORMAT"
              }
            ]
          }
        },
        "title": "API Error",
        "type": "object",
        "required": [
          "type"
        ]
      },
      "idempotencyKey": {
        "type": "string",
        "description": "Identificateur unique requis pour le traitement des demandes idempotentes. \n\nRemarque : Moneris encourage l’utilisation de la version 4 de l’UUID dans les API comme clé d’idempotence.    \n",
        "minLength": 1,
        "maxLength": 36,
        "example": "6q5w4e7r8t9y"
      },
      "paymentMethodRequestSource": {
        "type": "string",
        "description": "La source du Mode de paiement utilisé. Il peut s’agir de :\n  - L’Id d’un Mode de paiement déjà créé.\n  - Jeton permanent.\n  - Jeton temporaire.\n  -Carte.\n  - Portefeuille électronique.\n",
        "enum": [
          "PAYMENT_METHOD_ID",
          "CARD",
          "TEMPORARY_TOKEN",
          "PERMANENT_TOKEN",
          "APPLE_PAY_ENCRYPTED",
          "APPLE_PAY_DECRYPTED",
          "GOOGLE_PAY_ENCRYPTED",
          "GOOGLE_PAY_DECRYPTED"
        ]
      },
      "paymentMethodWithId": {
        "title": "paymentMethodWithId",
        "description": "Utilisez l’identifiant unique du mode de paiement existant.",
        "properties": {
          "paymentMethodSource": {
            "$ref": "#/components/schemas/paymentMethodRequestSource"
          },
          "paymentMethodId": {
            "$ref": "#/components/schemas/resourceId"
          }
        },
        "required": [
          "paymentMethodSource",
          "paymentMethodId"
        ]
      },
      "paymentIndicator": {
        "type": "string",
        "description": "Indique l’utilisation actuelle ou prévue des informations d’identification\n- **UNSCHEDULED_CREDENTIAL_ON_FILE** : Justificatif d’identité non programmé au dossier (premières transactions seulement)\n- **RECURRING** : transaction récurrente\n- **MERCHANT_INITIATED** : transaction non programmée initiée par le marchand\n- **VARIABLE_RECURRING** : opération de paiement variable récurrente\n- **CUSTOMER_INITIATED** : transaction initiée par le client non programmée\n",
        "enum": [
          "UNSCHEDULED_CREDENTIAL_ON_FILE",
          "RECURRING",
          "MERCHANT_INITIATED",
          "VARIABLE_RECURRING",
          "CUSTOMER_INITIATED"
        ],
        "example": "UNSCHEDULED_CREDENTIAL_ON_FILE"
      },
      "paymentInformation": {
        "type": "string",
        "description": "Indique s’il s’agit de la première transaction ou d’une transaction ultérieure de la série.",
        "enum": [
          "FIRST",
          "SUBSEQUENT"
        ],
        "example": "FIRST"
      },
      "storePaymentMethodIdRequest": {
        "title": "storePaymentMethodIdRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodWithId"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "cardNumber": {
        "type": "string",
        "description": "Identifie le numéro de carte de crédit ou de débit du client (numéro de compte principal).",
        "minLength": 13,
        "maxLength": 19,
        "example": "4242424242424242"
      },
      "cardSecurityCode": {
        "type": "string",
        "pattern": "[0-9]*",
        "description": "Situé sur la carte de crédit et fourni par le titulaire de la carte lors de l’authentification. \nCes informations ne doivent être transmises qu’à la passerelle de paiement et ne doivent jamais être stockées pour une utilisation ultérieure ou affichées dans le cadre des informations de réception.\n",
        "minLength": 3,
        "maxLength": 4,
        "example": "123"
      },
      "card": {
        "type": "object",
        "description": "Détails de la carte",
        "properties": {
          "cardNumber": {
            "$ref": "#/components/schemas/cardNumber"
          },
          "expiryMonth": {
            "$ref": "#/components/schemas/expiryMonth"
          },
          "expiryYear": {
            "$ref": "#/components/schemas/expiryYear"
          },
          "cardSecurityCode": {
            "$ref": "#/components/schemas/cardSecurityCode"
          }
        },
        "required": [
          "cardNumber",
          "expiryMonth",
          "expiryYear",
          "cardSecurityCode"
        ]
      },
      "paymentMethodRequestBase": {
        "description": "Détails du mode de paiement.\n\nRemarque : Si cette option est définie, cela entraînera la création d’un mode de paiement tel que défini dans l’API du mode de paiement.\n",
        "type": "object",
        "properties": {
          "cardholderInformation": {
            "$ref": "#/components/schemas/cardholderInformation"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/contactDetails"
          },
          "billingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "paymentMethodSource": {
            "$ref": "#/components/schemas/paymentMethodRequestSource"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "paymentMethodSource"
        ]
      },
      "paymentMethodCard": {
        "title": "paymentMethodCard",
        "description": "Détails du mode de paiement par carte de crédit/débit/carte-cadeau.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "card": {
                "$ref": "#/components/schemas/card"
              }
            },
            "required": [
              "card"
            ]
          },
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          }
        ],
        "required": [
          "paymentMethodSource",
          "card"
        ]
      },
      "storePaymentMethodCardRequest": {
        "title": "storePaymentMethodCardRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodCard"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "token": {
        "type": "string",
        "description": "Créé lorsqu’un jeton temporaire est créé et renvoyé. Il s’agit d’un identificateur de profil unique et d’une valeur obligatoire pour les transactions de jetons temporaires.",
        "minLength": 25,
        "maxLength": 28,
        "example": "ot-HCUeCFtXJfEZSSUqvUJkS0"
      },
      "paymentMethodTemporaryToken": {
        "title": "paymentMethodTemporaryToken",
        "description": "Un jeton temporaire est émis par Moneris au commerçant et représente les détails de la carte. Veuillez consulter la documentation sur la fonctionnalité de tokenisation hébergée pour savoir comment émettre un tel jeton.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "temporaryToken": {
                "$ref": "#/components/schemas/token"
              }
            },
            "required": [
              "paymentMethodSource",
              "temporaryToken"
            ]
          },
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          }
        ],
        "required": [
          "paymentMethodSource",
          "temporaryToken"
        ]
      },
      "storePaymentMethodTemporaryTokenRequest": {
        "title": "storePaymentMethodTemporaryTokenRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodTemporaryToken"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "paymentMethodPermanentToken": {
        "title": "paymentMethodPermanentToken",
        "description": "Un jeton permanent est émis par Moneris au commerçant et représente les détails de la carte. Cette option est utilisée à des fins héritées.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "permanentToken": {
                "$ref": "#/components/schemas/token"
              }
            },
            "required": [
              "permanentToken"
            ]
          },
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          }
        ],
        "required": [
          "paymentMethodSource",
          "permanentToken"
        ]
      },
      "storePermanentToken": {
        "description": "Stockez ce mode de paiement créé par le biais de ce paiement pour une utilisation ultérieure. \n- CARDHOLDER_INITIATED : Mode de paiement à enregistrer et ne peut être réutilisé qu’avec le consentement du titulaire de la carte. Limité au magasin, à la pré-autorisation et aux validations de carte.\n- MERCHANT_INITIATED : Mode de paiement à enregistrer et réutilisable sans le consentement du titulaire de la carte. Par exemple, les paiements récurrents.\n",
        "type": "string",
        "default": "MERCHANT_INITIATED",
        "enum": [
          "CARDHOLDER_INITIATED",
          "MERCHANT_INITIATED"
        ]
      },
      "credentialOnFileInformation": {
        "type": "object",
        "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
        "properties": {
          "paymentIndicator": {
            "$ref": "#/components/schemas/paymentIndicator"
          },
          "paymentInformation": {
            "$ref": "#/components/schemas/paymentInformation"
          },
          "issuerId": {
            "$ref": "#/components/schemas/issuerId"
          },
          "originalAmount": {
            "$ref": "#/components/schemas/originalAmount"
          }
        },
        "required": [
          "paymentIndicator",
          "paymentInformation"
        ],
        "example": {
          "paymentIndicator": "CUSTOMER_INITIATED",
          "paymentInformation": "FIRST",
          "issuerId": "123asd"
        }
      },
      "storePaymentMethodPermanentTokenRequest": {
        "title": "storePaymentMethodPermanentTokenRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodPermanentToken"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePermanentToken"
              },
              "credentialOnFileInformation": {
                "$ref": "#/components/schemas/credentialOnFileInformation"
              }
            },
            "required": [
              "credentialOnFileInformation"
            ]
          }
        ]
      },
      "walletIndicator": {
        "type": "string",
        "description": "Uniquement disponible pour les intégrations au Canada.\nS’applique aux marchands qui utilisent leur propre API pour le chiffrement des données utiles des transactions Apple Pay et Google Pay.\n**REMARQUE** : Ce champ est obligatoire pour les transactions par portefeuille et est sensible à la casse.\n",
        "enum": [
          "IN_APPLICATION",
          "IN_BROWSER"
        ]
      },
      "applePayEncryptedWallet": {
        "title": "applePayEncryptedWallet",
        "description": "Détails du portefeuille chiffré Apple Pay.",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "displayName": {
                "type": "string",
                "description": "Display Name",
                "example": "MasterCard 4079"
              },
              "cardBrand": {
                "type": "string",
                "description": "Card Brand.",
                "enum": [
                  "MASTERCARD",
                  "VISA",
                  "AMERICAN_EXPRESS",
                  "INTERAC",
                  "DISCOVER"
                ],
                "example": "MASTERCARD"
              },
              "applePayVersion": {
                "type": "string",
                "description": "Version information about the payment token.\n  - EC_V1: For ECC-encrypted data\n  - RSA_V1: For RSA-encrypted data\n",
                "enum": [
                  "EC_V1",
                  "RSA_V1"
                ],
                "example": "EC_V1"
              },
              "data": {
                "type": "string",
                "description": "Encrypted payment data. Base64 encoded as a string.\n",
                "format": "byte",
                "example": "MTIzNDU2Njc4OQ=="
              },
              "signature": {
                "type": "string",
                "description": "Signature of the payment and header data, Base64 encoded as a string. The signature includes the signing certificate, its intermediate CA certificate, and information about the signing algorithm. Can be a detached PKCS #7 signature, Base64 encoded as a string\n"
              },
              "publicKeyHash": {
                "type": "string",
                "description": "Hash of the X.509 encoded public key bytes of the merchant’s certificate. Can be either a base64 encoded or SHA-256 Hash string.\n"
              },
              "ephemeralPublicKey": {
                "type": "string",
                "description": "Ephemeral public key bytes. Only for RSA_v1. Can be either a base64 encoded string or X.509 bytes.\n",
                "format": "byte"
              },
              "applePayTransactionId": {
                "type": "string",
                "description": "The Apple Pay unique identifier for a transaction such as an in-app purchase, restored in-app purchase, or subscription renewal."
              },
              "walletIndicator": {
                "$ref": "#/components/schemas/walletIndicator"
              }
            },
            "required": [
              "displayName",
              "cardBrand",
              "applePayVersion",
              "data",
              "signature",
              "publicKeyHash",
              "ephemeralPublicKey",
              "applePayTransactionId",
              "walletIndicator"
            ]
          }
        ],
        "required": [
          "paymentMethodSource"
        ]
      },
      "storeApplePayEncryptedWalletRequest": {
        "title": "storeApplePayEncryptedWalletRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/applePayEncryptedWallet"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "deviceManufacturerIdentifier": {
        "type": "string",
        "description": "Identificateur du fabricant de l’appareil encodé en hexadécimal",
        "nullable": true
      },
      "dataType": {
        "type": "string",
        "description": "Uniquement disponible pour les intégrations au Canada.\n\nS’applique aux commerçants qui utilisent leur propre API pour le chiffrement des données utiles des transactions, et est obligatoire pour les transactions INTERAC®, e-commerce, Apple Pay et Google Pay.\n",
        "enum": [
          "THREE_D_SECURE",
          "EMV"
        ]
      },
      "walletCryptogram": {
        "type": "string",
        "description": "Cryptogramme à jeton ou Base64 encodé pour les portefeuilles Interac.",
        "maxLength": 500,
        "example": "8YGKgiD0iJic84fBLVj3QuwuclqLp7QvizbKnGRYAMVfVwBobYMBAIQBAIUBAIZTWgpQdgQQKZkZFHGfXySDKRAxXyoCASSfAgYAAAAQAABfIAIgL58ZBgSSSSSSSL9JIoEgAAMj1qj1U9jsORa1qxqAEAHOBAAEAECKALEAAAADEACHCAAAAAAAAAAAkAA="
      },
      "walletEcommerceIndicator": {
        "type": "string",
        "description": "Indicateur ECI tel que fourni par le portefeuille.",
        "nullable": true
      },
      "applePayDecryptedWallet": {
        "title": "applePayDecryptedWallet",
        "description": "Détails du portefeuille Apple Pay après avoir déchiffré le jeton.",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "applicationPrimaryAccountNumber": {
                "description": "Identifie le numéro de carte de crédit ou de débit du client (numéro de compte principal).",
                "type": "string",
                "minLength": 13,
                "maxLength": 19,
                "example": "4242424242424242"
              },
              "expiryMonth": {
                "$ref": "#/components/schemas/expiryMonth"
              },
              "expiryYear": {
                "$ref": "#/components/schemas/expiryYear"
              },
              "deviceManufacturerIdentifier": {
                "$ref": "#/components/schemas/deviceManufacturerIdentifier"
              },
              "dataType": {
                "$ref": "#/components/schemas/dataType"
              },
              "cryptogram": {
                "$ref": "#/components/schemas/walletCryptogram"
              },
              "cardBrand": {
                "type": "string",
                "description": "Card Brand.",
                "enum": [
                  "MASTERCARD",
                  "VISA",
                  "AMERICAN_EXPRESS",
                  "INTERAC",
                  "DISCOVER"
                ]
              },
              "walletEcommerceIndicator": {
                "$ref": "#/components/schemas/walletEcommerceIndicator"
              },
              "walletIndicator": {
                "$ref": "#/components/schemas/walletIndicator"
              }
            },
            "required": [
              "applicationPrimaryAccountNumber",
              "expiryMonth",
              "expiryYear",
              "dataType",
              "cryptogram",
              "cardBrand",
              "walletIndicator"
            ]
          }
        ],
        "required": [
          "paymentMethodSource"
        ]
      },
      "storeApplePayDecryptedWalletRequest": {
        "title": "storeApplePayDecryptedWalletRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/applePayDecryptedWallet"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "googlePayEncryptedWallet": {
        "title": "googlePayEncryptedWallet",
        "description": "Détails du portefeuille chiffré Apple Pay.",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "cardBrand": {
                "type": "string",
                "description": "Card Brand.",
                "enum": [
                  "MASTERCARD",
                  "VISA",
                  "AMERICAN_EXPRESS",
                  "INTERAC"
                ],
                "example": "INTERAC"
              },
              "signature": {
                "type": "string",
                "description": "Verifies that the message came from Google.  It's base64-encoded, and created with ECDSA by the intermediate signing key.\n"
              },
              "googlePayProtocolVersion": {
                "type": "string",
                "description": "Identifies the encryption or signing scheme under which the message is created. \nIt allows the protocol to evolve over time, if needed.\nMust be fowarded as provided by Google Pay.\n",
                "example": "ECv1"
              },
              "signedMessage": {
                "type": "string",
                "description": "A JSON object serialized as an HTML-safe string that contains the encryptedMessage, ephemeralPublicKey, and tag.  It's serialized to simplify the signature verification process.\n"
              },
              "walletIndicator": {
                "$ref": "#/components/schemas/walletIndicator"
              }
            },
            "required": [
              "cardBrand",
              "signature",
              "googlePayProtocolVersion",
              "signedMessage",
              "walletIndicator"
            ]
          }
        ],
        "required": [
          "paymentMethodSource"
        ]
      },
      "storeGooglePayEncryptedWalletRequest": {
        "title": "storeGooglePayEncryptedWalletRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/googlePayEncryptedWallet"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "googlePayDecryptedCardDetails": {
        "description": "Les informations d’identification de paiement elles-mêmes.  Le format de cet objet est déterminé par paymentMethod\n",
        "type": "object",
        "properties": {
          "personalAccountNumber": {
            "description": "Identifie le numéro de carte de crédit ou de débit du client (numéro de compte principal).",
            "type": "string",
            "minLength": 13,
            "maxLength": 19,
            "example": "4242424242424242"
          },
          "expiryMonth": {
            "$ref": "#/components/schemas/expiryMonth"
          },
          "expiryYear": {
            "$ref": "#/components/schemas/expiryYear"
          },
          "authenticationMethod": {
            "description": "La méthode d’authentification de la transaction par carte.\nDoit être transmis conformément aux dispositions de Google Pay.\n",
            "type": "string",
            "nullable": true
          },
          "cryptogram": {
            "nullable": true,
            "type": "string",
            "description": "Cryptogramme à jeton ou Base64 encodé pour les portefeuilles Interac.",
            "maxLength": 500,
            "example": "8YGKgiD0iJic84fBLVj3QuwuclqLp7QvizbKnGRYAMVfVwBobYMBAIQBAIUBAIZTWgpQdgQQKZkZFHGfXySDKRAxXyoCASSfAgYAAAAQAABfIAIgL58ZBgSSSSSSSL9JIoEgAAMj1qj1U9jsORa1qxqAEAHOBAAEAECKALEAAAADEACHCAAAAAAAAAAAkAA="
          },
          "walletEcommerceIndicator": {
            "$ref": "#/components/schemas/walletEcommerceIndicator"
          }
        },
        "required": [
          "personalAccountNumber",
          "expiryMonth",
          "expiryYear"
        ]
      },
      "googlePayDecryptedWallet": {
        "title": "googlePayDecryptedWallet",
        "description": "Détails du portefeuille Google Pay après avoir déchiffré le jeton.",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "gatewayMerchantId": {
                "nullable": true,
                "type": "string",
                "description": "Gateway unique store id",
                "example": "cagw123456"
              },
              "messageExpiration": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Date and time at which the message expires. Integrators should reject any message that's expired.\n",
                "example": "2024-09-19T00:00:00Z"
              },
              "messageId": {
                "type": "string",
                "nullable": true,
                "description": "A unique ID that identifies the message in case it needs to be revoked or located at a later time."
              },
              "walletSource": {
                "type": "string",
                "description": "The type of the payment credential. Supported values are:\n  - CARD\n  - TOKENIZED_CARD\n",
                "enum": [
                  "CARD",
                  "TOKENIZED_CARD"
                ]
              },
              "cardBrand": {
                "type": "string",
                "description": "Card Network.",
                "enum": [
                  "MASTERCARD",
                  "VISA",
                  "AMERICAN_EXPRESS",
                  "INTERAC"
                ]
              },
              "walletIndicator": {
                "$ref": "#/components/schemas/walletIndicator"
              },
              "cardDetails": {
                "$ref": "#/components/schemas/googlePayDecryptedCardDetails"
              }
            },
            "required": [
              "walletSource",
              "cardBrand",
              "cardDetails",
              "walletIndicator"
            ]
          }
        ],
        "required": [
          "paymentMethodSource"
        ]
      },
      "storeGooglePayDecryptedWalletRequest": {
        "title": "storeGooglePayDecryptedWalletRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/googlePayDecryptedWallet"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "storePaymentMethodRequest": {
        "title": "storePaymentMethodRequest",
        "description": "Utilisé pour collecter les données de paiement nécessaires à l’exécution de la transaction. \nPeut également être utilisé pour collecter et enregistrer les instruments de paiement des clients dans les fichiers. \n",
        "oneOf": [
          {
            "$ref": "#/components/schemas/storePaymentMethodIdRequest"
          },
          {
            "$ref": "#/components/schemas/storePaymentMethodCardRequest"
          },
          {
            "$ref": "#/components/schemas/storePaymentMethodTemporaryTokenRequest"
          },
          {
            "$ref": "#/components/schemas/storePaymentMethodPermanentTokenRequest"
          },
          {
            "$ref": "#/components/schemas/storeApplePayDecryptedWalletRequest"
          },
          {
            "$ref": "#/components/schemas/storeApplePayEncryptedWalletRequest"
          },
          {
            "$ref": "#/components/schemas/storeGooglePayDecryptedWalletRequest"
          },
          {
            "$ref": "#/components/schemas/storeGooglePayEncryptedWalletRequest"
          }
        ],
        "discriminator": {
          "propertyName": "paymentMethodSource",
          "mapping": {
            "PAYMENT_METHOD_ID": "#/components/schemas/storePaymentMethodIdRequest",
            "CARD": "#/components/schemas/storePaymentMethodCardRequest",
            "TEMPORARY_TOKEN": "#/components/schemas/storePaymentMethodTemporaryTokenRequest",
            "PERMANENT_TOKEN": "#/components/schemas/storePaymentMethodPermanentTokenRequest",
            "APPLE_PAY_ENCRYPTED": "#/components/schemas/storeApplePayEncryptedWalletRequest",
            "APPLE_PAY_DECRYPTED": "#/components/schemas/storeApplePayDecryptedWalletRequest",
            "GOOGLE_PAY_ENCRYPTED": "#/components/schemas/storeGooglePayEncryptedWalletRequest",
            "GOOGLE_PAY_DECRYPTED": "#/components/schemas/storeGooglePayDecryptedWalletRequest"
          }
        },
        "required": [
          "paymentMethodSource"
        ]
      },
      "automaticCapture": {
        "type": "boolean",
        "description": "- **true** : (Par défaut) demandera à Moneris de saisir le paiement lorsqu’il est autorisé. Cela effectue une transaction d’achat.\n- **false** : incitera Moneris à bloquer les fonds lorsque le paiement est autorisé. Cela effectue une transaction de pré-autorisation.\n",
        "default": true
      },
      "threeDSecureWithAuthenticationId": {
        "title": "Three DS Authentication Id",
        "type": "object",
        "properties": {
          "threeDSecureAuthenticationId": {
            "$ref": "#/components/schemas/resourceId"
          }
        },
        "required": [
          "threeDSecureAuthenticationId"
        ]
      },
      "threeDSecureAuthenticationValue": {
        "type": "string",
        "description": "**CAVV** : Valeur de vérification de l’authentification du titulaire de carte\nFourni lors d’une demande de paiement pour authentifier l’utilisateur de la carte.\n",
        "maxLength": 50,
        "example": "00000109260000719349",
        "nullable": true
      },
      "threeDSecureVersion": {
        "type": "string",
        "description": "Obligatoire lors de l’envoi d’une transaction en version 3-D Secure 2.0+. Si aucune valeur n’est fournie, la valeur par défaut est V1.",
        "maxLength": 10,
        "example": "2.2"
      },
      "threeDSecureServerTransactionId": {
        "type": "string",
        "description": "Indique les informations requises lors de l’envoi d’une transaction 3-D Secure 2.0+. \n\nCes données sont obtenues à partir d’une transaction de demande de recherche CAVV ou de demande d’authentification MPI 3DS.\n",
        "format": "uuid",
        "example": "ad9b0eda-bf9b-4288-b188-9467993603e1"
      },
      "threeDSecureDirectoryServerTransactionId": {
        "type": "string",
        "description": "Identificateur de transaction unique et universel attribué par le serveur d’annuaire 3DS (DS) pour identifier une transaction unique.",
        "format": "uuid",
        "example": "ad9b0eda-bf9b-4288-b188-9467993603e1"
      },
      "threeDSecureWithAuthenticationData": {
        "type": "object",
        "title": "Three DS Authentication Data",
        "properties": {
          "threeDSecureAuthenticationValue": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationValue"
          },
          "threeDSecureVersion": {
            "$ref": "#/components/schemas/threeDSecureVersion"
          },
          "threeDSecureServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureServerTransactionId"
          },
          "threeDSecureDirectoryServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureDirectoryServerTransactionId"
          }
        },
        "required": [
          "threeDSecureAuthenticationValue",
          "threeDSecureVersion",
          "threeDSecureServerTransactionId",
          "threeDSecureDirectoryServerTransactionId"
        ]
      },
      "threeDSecureData": {
        "description": "Données liées à 3-D Secure",
        "type": "object",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/threeDSecureWithAuthenticationId"
          },
          {
            "$ref": "#/components/schemas/threeDSecureWithAuthenticationData"
          }
        ]
      },
      "ipv4": {
        "type": "string",
        "format": "ipv4",
        "description": "Protocole Internet version 4 (IPv4).",
        "example": "104.75.173.179",
        "nullable": true
      },
      "ipv6": {
        "type": "string",
        "format": "ipv6",
        "description": "Protocole Internet version 6 (IPv6).",
        "example": "2600:1401:2::8a",
        "nullable": true
      },
      "createPaymentRequest": {
        "title": "paymentRequest",
        "type": "object",
        "description": "Corps de la demande, utilisé pour initier un paiement",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "amount": {
            "description": "Montant de la transaction. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "amountDetails": {
            "$ref": "#/components/schemas/amountDetails"
          },
          "customerId": {
            "nullable": true,
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/storePaymentMethodRequest"
          },
          "ecommerceIndicator": {
            "description": "Catégorie de transaction e-commerce renvoyée par l’émetteur.\nLorsqu’elle est renvoyée dans le responese, elle peut être différente de la valeur envoyée dans la demande au cas où la transaction aurait été déclassée par l’émetteur.\n",
            "type": "string",
            "enum": [
              "MAIL_TELEPHONE_ORDER_SINGLE",
              "MAIL_TELEPHONE_ORDER_RECURRING",
              "MAIL_TELEPHONE_ORDER_INSTALMENT",
              "MAIL_TELEPHONE_ORDER_UNKNOWN",
              "AUTHENTICATED_ECOMMERCE",
              "NON_AUTHENTICATED_ECOMMERCE",
              "SSL_MERCHANT"
            ],
            "example": "AUTHENTICATED_ECOMMERCE",
            "default": "SSL_MERCHANT"
          },
          "automaticCapture": {
            "$ref": "#/components/schemas/automaticCapture"
          },
          "customData": {
            "nullable": true,
            "description": "Le marchand peut envoyer des métadonnées personnalisées avec la transaction dans cet objet. Moneris fera écho à ces valeurs en réponse.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "minLength": 1,
              "maxLength": 50
            },
            "maxProperties": 10
          },
          "dynamicDescriptor": {
            "nullable": true,
            "type": "string",
            "description": "Description définie par le commerçant envoyée par transaction et qui apparaîtra sur le relevé de carte de crédit.  \n\nEn fonction de l’émetteur de la carte, le relevé affiche généralement le descripteur dynamique ajouté au nom commercial existant du commerçant, séparé par le caractère « / ».  \n\n**Remarque** : La longueur combinée du nom commercial du commerçant, de la barre oblique « / » et du descripteur dynamique ne doit pas dépasser 22 caractères.\n",
            "minLength": 1,
            "maxLength": 20,
            "example": "moneris"
          },
          "threeDSecureData": {
            "$ref": "#/components/schemas/threeDSecureData"
          },
          "ipv4": {
            "$ref": "#/components/schemas/ipv4"
          },
          "ipv6": {
            "$ref": "#/components/schemas/ipv6"
          }
        },
        "required": [
          "idempotencyKey",
          "paymentMethod",
          "amount"
        ]
      },
      "cancelPaymentRequest": {
        "title": "cancelPaymentRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "reason": {
            "nullable": true,
            "description": "Raison du remboursement.",
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "Defective product"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "completionRequest": {
        "title": "completionRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "amount": {
            "nullable": true,
            "title": "completionAmount",
            "type": "object",
            "description": "Montant de la transaction. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "paymentMethodResponseList": {
        "description": "Liste des modes de paiement",
        "type": "object",
        "title": "paymentMethodResponseList",
        "properties": {
          "data": {
            "description": "Liste des modes de paiement",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/paymentMethodResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "createCardPaymentMethodRequest": {
        "title": "createCardPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/paymentMethodCard"
          }
        ]
      },
      "createTemporaryTokenPaymentMethodRequest": {
        "title": "createTemporaryTokenPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/paymentMethodTemporaryToken"
          }
        ]
      },
      "createPermanentTokenPaymentMethodRequest": {
        "title": "createPermanentTokenPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/paymentMethodPermanentToken"
          }
        ]
      },
      "createApplePayEncryptedWalletPaymentMethodRequest": {
        "title": "createApplePayEncryptedWalletPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/applePayEncryptedWallet"
          }
        ]
      },
      "createApplePayDecryptedWalletPaymentMethodRequest": {
        "title": "createApplePayDecryptedWalletPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/applePayDecryptedWallet"
          }
        ]
      },
      "createGooglePayEncryptedWalletPaymentMethodRequest": {
        "title": "createGooglePayEncryptedWalletPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/googlePayEncryptedWallet"
          }
        ]
      },
      "createGooglePayDecryptedWalletPaymentMethodRequest": {
        "title": "createGooglePayDecryptedWalletPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/googlePayDecryptedWallet"
          }
        ]
      },
      "createPaymentMethodRequest": {
        "title": "createPaymentMethodRequest",
        "oneOf": [
          {
            "$ref": "#/components/schemas/createCardPaymentMethodRequest"
          },
          {
            "$ref": "#/components/schemas/createTemporaryTokenPaymentMethodRequest"
          },
          {
            "$ref": "#/components/schemas/createPermanentTokenPaymentMethodRequest"
          },
          {
            "$ref": "#/components/schemas/createApplePayEncryptedWalletPaymentMethodRequest"
          },
          {
            "$ref": "#/components/schemas/createApplePayDecryptedWalletPaymentMethodRequest"
          },
          {
            "$ref": "#/components/schemas/createGooglePayEncryptedWalletPaymentMethodRequest"
          },
          {
            "$ref": "#/components/schemas/createGooglePayDecryptedWalletPaymentMethodRequest"
          }
        ],
        "discriminator": {
          "propertyName": "paymentMethodSource",
          "mapping": {
            "CARD": "#/components/schemas/createCardPaymentMethodRequest",
            "TEMPORARY_TOKEN": "#/components/schemas/createTemporaryTokenPaymentMethodRequest",
            "PERMANENT_TOKEN": "#/components/schemas/createPermanentTokenPaymentMethodRequest",
            "APPLE_PAY_ENCRYPTED": "#/components/schemas/createApplePayEncryptedWalletPaymentMethodRequest",
            "APPLE_PAY_DECRYPTED": "#/components/schemas/createApplePayDecryptedWalletPaymentMethodRequest",
            "GOOGLE_PAY_ENCRYPTED": "#/components/schemas/createGooglePayEncryptedWalletPaymentMethodRequest",
            "GOOGLE_PAY_DECRYPTED": "#/components/schemas/createGooglePayDecryptedWalletPaymentMethodRequest"
          }
        },
        "required": [
          "paymentMethodSource"
        ]
      },
      "updatePaymentMethodRequest": {
        "title": "updatePaymentMethodRequest",
        "oneOf": [
          {
            "$ref": "#/components/schemas/paymentMethodCard"
          },
          {
            "$ref": "#/components/schemas/paymentMethodTemporaryToken"
          },
          {
            "$ref": "#/components/schemas/paymentMethodPermanentToken"
          },
          {
            "$ref": "#/components/schemas/applePayEncryptedWallet"
          },
          {
            "$ref": "#/components/schemas/applePayDecryptedWallet"
          },
          {
            "$ref": "#/components/schemas/googlePayEncryptedWallet"
          },
          {
            "$ref": "#/components/schemas/googlePayDecryptedWallet"
          }
        ],
        "discriminator": {
          "propertyName": "paymentMethodSource",
          "mapping": {
            "CARD": "#/components/schemas/paymentMethodCard",
            "TEMPORARY_TOKEN": "#/components/schemas/paymentMethodTemporaryToken",
            "PERMANENT_TOKEN": "#/components/schemas/paymentMethodPermanentToken",
            "APPLE_PAY_ENCRYPTED": "#/components/schemas/applePayEncryptedWallet",
            "APPLE_PAY_DECRYPTED": "#/components/schemas/applePayDecryptedWallet",
            "GOOGLE_PAY_ENCRYPTED": "#/components/schemas/googlePayEncryptedWallet",
            "GOOGLE_PAY_DECRYPTED": "#/components/schemas/googlePayDecryptedWallet"
          }
        },
        "required": [
          "paymentMethodSource"
        ]
      },
      "paymentReference": {
        "description": "Référence de paiement. Peut être étendu aux détails de paiement complets à l’aide du paramètre de requête expand.",
        "type": "object",
        "nullable": true,
        "properties": {
          "paymentId": {
            "$ref": "#/components/schemas/resourceId"
          }
        },
        "required": [
          "paymentId"
        ]
      },
      "refundAmount": {
        "type": "object",
        "description": "Montant du remboursement de la transaction. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059\n",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 17500,
          "currency": "CAD"
        }
      },
      "refundStatus": {
        "type": "string",
        "description": "Description de l’état du remboursement.",
        "enum": [
          "DECLINED",
          "DECLINED_RETRY",
          "PROCESSING",
          "SUCCEEDED"
        ],
        "example": "SUCCEEDED"
      },
      "reason": {
        "type": "string",
        "description": "Raison du remboursement.",
        "minLength": 1,
        "maxLength": 100,
        "example": "Defective product",
        "nullable": true
      },
      "refundResponse": {
        "title": "refundResponse",
        "type": "object",
        "properties": {
          "refundId": {
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "payment": {
            "$ref": "#/components/schemas/paymentReference"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "refundAmount": {
            "$ref": "#/components/schemas/refundAmount"
          },
          "customerId": {
            "nullable": true,
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "refundStatus": {
            "$ref": "#/components/schemas/refundStatus"
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/statusDetails"
          },
          "reason": {
            "$ref": "#/components/schemas/reason"
          },
          "credentialOnFileResponse": {
            "$ref": "#/components/schemas/credentialOnFileResponse"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "refundId",
          "merchantId",
          "paymentMethod",
          "createdAt",
          "refundAmount",
          "refundStatus",
          "transactionDetails"
        ]
      },
      "refundResponseList": {
        "title": "refundResponseList",
        "type": "object",
        "properties": {
          "data": {
            "description": "Liste des remboursements.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/refundResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "dynamicDescriptor": {
        "type": "string",
        "description": "Description définie par le commerçant envoyée par transaction et qui apparaîtra sur le relevé de carte de crédit.  \n\nEn fonction de l’émetteur de la carte, le relevé affiche généralement le descripteur dynamique ajouté au nom commercial existant du commerçant, séparé par le caractère « / ».  \n\n**Remarque** : La longueur combinée du nom commercial du commerçant, de la barre oblique « / » et du descripteur dynamique ne doit pas dépasser 22 caractères.\n",
        "minLength": 1,
        "maxLength": 20,
        "example": "moneris",
        "nullable": true
      },
      "createRefundRequestBase": {
        "title": "Create Refund Request Base",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "refundAmount": {
            "$ref": "#/components/schemas/refundAmount"
          },
          "customerId": {
            "nullable": true,
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "dynamicDescriptor": {
            "$ref": "#/components/schemas/dynamicDescriptor"
          },
          "ipv4": {
            "$ref": "#/components/schemas/ipv4"
          },
          "ipv6": {
            "$ref": "#/components/schemas/ipv6"
          },
          "ecommerceIndicator": {
            "$ref": "#/components/schemas/ecommerceIndicator"
          },
          "reason": {
            "$ref": "#/components/schemas/reason"
          }
        },
        "required": [
          "idempotencyKey",
          "refundAmount"
        ]
      },
      "createMatchingRefundRequest": {
        "title": "Matching Refund",
        "description": "Remboursement correspondant",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "paymentId": {
                "$ref": "#/components/schemas/resourceId"
              }
            },
            "required": [
              "paymentId"
            ]
          },
          {
            "$ref": "#/components/schemas/createRefundRequestBase"
          }
        ]
      },
      "createIndependentRefundRequest": {
        "title": "Independent Refund",
        "description": "Remboursement indépendant",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "orderId": {
                "$ref": "#/components/schemas/orderId"
              },
              "paymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethodRequest"
              }
            },
            "required": [
              "paymentMethod"
            ]
          },
          {
            "$ref": "#/components/schemas/createRefundRequestBase"
          }
        ]
      },
      "createRefundRequest": {
        "title": "Create Refund Request",
        "oneOf": [
          {
            "$ref": "#/components/schemas/createMatchingRefundRequest"
          },
          {
            "$ref": "#/components/schemas/createIndependentRefundRequest"
          }
        ]
      },
      "validationStatus": {
        "type": "string",
        "description": "Description du statut de validation.",
        "enum": [
          "DECLINED",
          "DECLINED_RETRY",
          "PROCESSING",
          "SUCCEEDED"
        ],
        "example": "SUCCEEDED"
      },
      "validationVerificationDetails": {
        "description": "Codes de résultat CVD, AVS, 3DS, ITD",
        "type": "object",
        "properties": {
          "addressVerificationServiceResultCode": {
            "$ref": "#/components/schemas/addressVerificationServiceResultCode"
          },
          "cardSecurityCodeResultCode": {
            "$ref": "#/components/schemas/cardSecurityCodeResult"
          }
        }
      },
      "validationResponse": {
        "title": "createValidationResponse",
        "type": "object",
        "properties": {
          "validationId": {
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "validationStatus": {
            "$ref": "#/components/schemas/validationStatus"
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/statusDetails"
          },
          "verificationDetails": {
            "$ref": "#/components/schemas/validationVerificationDetails"
          },
          "credentialOnFileResponse": {
            "$ref": "#/components/schemas/credentialOnFileResponse"
          },
          "customerId": {
            "nullable": true,
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "validationId",
          "merchantId",
          "createdAt",
          "paymentMethod",
          "validationStatus",
          "transactionDetails",
          "verificationDetails"
        ]
      },
      "validationsResponseList": {
        "title": "validationsResponseList",
        "type": "object",
        "properties": {
          "data": {
            "description": "Liste des validations.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/validationResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "createValidationRequest": {
        "title": "Creates a Validation Request",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/storePaymentMethodRequest"
          },
          "customerId": {
            "nullable": true,
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "dynamicDescriptor": {
            "$ref": "#/components/schemas/dynamicDescriptor"
          },
          "ecommerceIndicator": {
            "description": "Catégorie de transaction e-commerce renvoyée par l’émetteur.\nLorsqu’elle est renvoyée dans le responese, elle peut être différente de la valeur envoyée dans la demande au cas où la transaction aurait été déclassée par l’émetteur.\n",
            "type": "string",
            "enum": [
              "MAIL_TELEPHONE_ORDER_SINGLE",
              "MAIL_TELEPHONE_ORDER_RECURRING",
              "MAIL_TELEPHONE_ORDER_INSTALMENT",
              "MAIL_TELEPHONE_ORDER_UNKNOWN",
              "AUTHENTICATED_ECOMMERCE",
              "NON_AUTHENTICATED_ECOMMERCE",
              "SSL_MERCHANT"
            ],
            "example": "AUTHENTICATED_ECOMMERCE",
            "default": "SSL_MERCHANT"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey",
          "paymentMethod"
        ]
      },
      "firstName": {
        "type": "string",
        "description": "Prénom.",
        "minLength": 1,
        "maxLength": 30,
        "example": "John",
        "nullable": true
      },
      "middleName": {
        "type": "string",
        "description": "Indique le deuxième prénom du client.",
        "minLength": 1,
        "maxLength": 30,
        "example": "J.",
        "nullable": true
      },
      "lastName": {
        "type": "string",
        "description": "Nom de famille.",
        "minLength": 1,
        "maxLength": 30,
        "example": "Doe",
        "nullable": true
      },
      "customerResponse": {
        "title": "customerResponse",
        "type": "object",
        "properties": {
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "customerId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/middleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          },
          "address": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Numéro de téléphone.",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "minLength": 3,
            "maxLength": 16,
            "example": "+18663197450"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "email",
            "description": "Contient l’adresse e-mail du client.\n\nPour connaître les protocoles de courrier électronique standard, consultez : https://www.rfc-editor.org/rfc/rfc5322\n",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "customerId",
          "merchantId",
          "createdAt"
        ]
      },
      "customerResponseList": {
        "title": "customerResponseList",
        "properties": {
          "data": {
            "description": "Liste des clients.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/customerResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "createCustomerRequest": {
        "title": "customerRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/middleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          },
          "address": {
            "nullable": true,
            "title": "customerAddress",
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Numéro de téléphone.",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "minLength": 3,
            "maxLength": 16,
            "example": "+18663197450"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "email",
            "description": "Contient l’adresse e-mail du client.\n\nPour connaître les protocoles de courrier électronique standard, consultez : https://www.rfc-editor.org/rfc/rfc5322\n",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "customerRequest": {
        "title": "customerRequest",
        "type": "object",
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/middleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          },
          "address": {
            "nullable": true,
            "title": "customerAddress",
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Numéro de téléphone.",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "minLength": 3,
            "maxLength": 16,
            "example": "+18663197450"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "email",
            "description": "Contient l’adresse e-mail du client.\n\nPour connaître les protocoles de courrier électronique standard, consultez : https://www.rfc-editor.org/rfc/rfc5322\n",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "email": {
        "type": "string",
        "format": "email",
        "description": "Contient l’adresse e-mail du client.\n\nPour connaître les protocoles de courrier électronique standard, consultez : https://www.rfc-editor.org/rfc/rfc5322\n",
        "minLength": 1,
        "maxLength": 320,
        "example": "moneris@moneris.com"
      },
      "phoneNumber": {
        "type": "string",
        "description": "Numéro de téléphone.",
        "pattern": "^\\+[1-9]\\d{1,14}$",
        "minLength": 3,
        "maxLength": 16,
        "example": "+18663197450"
      },
      "streetNumber": {
        "type": "string",
        "description": "Numéro de rue",
        "minLength": 1,
        "maxLength": 19,
        "example": "3300"
      },
      "streetName": {
        "type": "string",
        "description": "Nom de la rue",
        "minLength": 1,
        "maxLength": 100,
        "example": "Bloor"
      },
      "city": {
        "type": "string",
        "description": "Identifie la ville.\n",
        "minLength": 1,
        "maxLength": 50,
        "example": "Toronto"
      },
      "province": {
        "type": "string",
        "description": "Code ISO 3166-2 de la province ou de l’État ",
        "minLength": 1,
        "maxLength": 3,
        "format": "iso-3166-2",
        "example": "ON"
      },
      "postalCode": {
        "type": "string",
        "description": "Code postal",
        "minLength": 1,
        "maxLength": 30,
        "example": "M8X 2X2"
      },
      "country": {
        "type": "string",
        "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
        "minLength": 2,
        "maxLength": 2,
        "example": "CA",
        "format": "iso-3166"
      },
      "paymentMethodRequest": {
        "title": "paymentMethodRequest",
        "description": "Détails du mode de paiement",
        "oneOf": [
          {
            "$ref": "#/components/schemas/paymentMethodWithId"
          },
          {
            "$ref": "#/components/schemas/paymentMethodCard"
          },
          {
            "$ref": "#/components/schemas/paymentMethodTemporaryToken"
          },
          {
            "$ref": "#/components/schemas/paymentMethodPermanentToken"
          },
          {
            "$ref": "#/components/schemas/applePayDecryptedWallet"
          },
          {
            "$ref": "#/components/schemas/applePayEncryptedWallet"
          },
          {
            "$ref": "#/components/schemas/googlePayDecryptedWallet"
          },
          {
            "$ref": "#/components/schemas/googlePayEncryptedWallet"
          }
        ],
        "discriminator": {
          "propertyName": "paymentMethodSource",
          "mapping": {
            "PAYMENT_METHOD_ID": "#/components/schemas/paymentMethodWithId",
            "CARD": "#/components/schemas/paymentMethodCard",
            "TEMPORARY_TOKEN": "#/components/schemas/paymentMethodTemporaryToken",
            "PERMANENT_TOKEN": "#/components/schemas/paymentMethodPermanentToken",
            "APPLE_PAY_ENCRYPTED": "#/components/schemas/applePayEncryptedWallet",
            "APPLE_PAY_DECRYPTED": "#/components/schemas/applePayDecryptedWallet",
            "GOOGLE_PAY_ENCRYPTED": "#/components/schemas/googlePayEncryptedWallet",
            "GOOGLE_PAY_DECRYPTED": "#/components/schemas/googlePayDecryptedWallet"
          }
        },
        "required": [
          "paymentMethodSource"
        ]
      },
      "threeDSecureMessageCategory": {
        "type": "string",
        "description": "Identifie la catégorie du message pour un cas d’utilisation spécifique.",
        "enum": [
          "PAYMENT",
          "NON_PAYMENT"
        ],
        "example": "PAYMENT"
      },
      "threeDSecureDeviceChannel": {
        "type": "string",
        "description": "Indique le type d’interface de canal utilisé pour lancer la transaction.",
        "enum": [
          "BROWSER",
          "THREE_D_SECURE_REQUESTOR_INITIATED"
        ],
        "example": "BROWSER"
      },
      "threeDSecureRequestType": {
        "type": "string",
        "nullable": true,
        "description": "Type de paiement qui a déclenché la vérification.\n  - **CARDHOLDER** : Le titulaire de la carte a initié le paiement.\n  - **RECURRING** : Paiement récurrent.\n",
        "enum": [
          "CARDHOLDER",
          "RECURRING",
          null
        ],
        "example": "CARDHOLDER"
      },
      "threeDSecureRecurringFrequency": {
        "type": "integer",
        "format": "int32",
        "description": "Indique le nombre minimum de jours entre les autorisations.",
        "minimum": 1,
        "maximum": 9999,
        "example": 1,
        "nullable": true
      },
      "threeDSecureRecurringExpiry": {
        "type": "string",
        "description": "Date à partir de laquelle aucune autre autorisation ne peut être effectuée. Il s’agit d’un champ obligatoire pour les transactions récurrentes, nous vous suggérons de le définir à une valeur raisonnablement élevée si vous n’avez pas de date d’expiration définie.",
        "format": "date",
        "example": "2019-07-30",
        "nullable": true
      },
      "threeDSecureRequestorInitiatedIndicator": {
        "type": "string",
        "description": "Indique le type de requête 3RI. Cet élément de données fournit des informations supplémentaires à l’ACS pour déterminer la meilleure approche pour traiter une demande 3RI.",
        "enum": [
          "RECURRING_TRANSACTION",
          "INSTALMENT_TRANSACTION",
          "ADD_CARD",
          "MAINTAIN_CARD_INFORMATION",
          "ACCOUNT_VERIFICATION",
          "SPLIT_DELAYED_SHIPMENT",
          "TOP_UP",
          "MAIL_ORDER",
          "TELEPHONE_ORDER",
          "WHITELIST_STATUS_CHECK",
          "OTHER_PAYMENT",
          null
        ],
        "example": "RECURRING_TRANSACTION",
        "nullable": true
      },
      "threeDSecurePriorAuthenticationData": {
        "type": "string",
        "description": "Données qui documentent et prennent en charge un processus d’authentification spécifique. Dans la version actuelle de la spécification, cet élément de données n’est pas défini en détail, mais l’intention est que, pour chaque méthode d’authentification du demandeur 3DS, ce champ contienne des données que l’ACS peut utiliser pour vérifier le processus d’authentification. Dans les futures versions de la spécification, ces détails devraient être inclus.",
        "maxLength": 2048,
        "example": "12345678",
        "nullable": true
      },
      "threeDSecurePriorAuthenticationMethod": {
        "type": "string",
        "description": "Mécanisme utilisé par le Titulaire de la Carte pour s’authentifier préalablement auprès du Demandeur 3DS.",
        "enum": [
          "FRICTIONLESS_AUTHENTICATION_OCCURRED_BY_ACS",
          "CARDHOLDER_CHALLENGE_OCCURRED_BY_ACS",
          "AVS_VERIFIED",
          "OTHER_ISSUER_METHODS",
          null
        ],
        "example": "AVS_VERIFIED",
        "nullable": true
      },
      "threeDSecurePriorAuthenticationTimestamp": {
        "type": "string",
        "description": "Date et heure en UTC de l’authentification précédente du titulaire de la carte.",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z",
        "nullable": true
      },
      "threeDSecurePriorAuthenticationReference": {
        "type": "string",
        "description": "Cet élément de données fournit des renseignements supplémentaires au SCA pour déterminer la meilleure approche pour traiter une demande.",
        "maxLength": 36,
        "example": "12345678",
        "nullable": true
      },
      "threeDSecurePriorAuthenticationInformation": {
        "type": "object",
        "description": "Informations sur la façon dont le demandeur 3DS a authentifié le titulaire de la carte dans le cadre d’une transaction 3DS précédente.",
        "nullable": true,
        "properties": {
          "threeDSecurePriorAuthenticationData": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationData"
          },
          "threeDSecurePriorAuthenticationMethod": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationMethod"
          },
          "threeDSecurePriorAuthenticationTimestamp": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationTimestamp"
          },
          "threeDSecurePriorAuthenticationReference": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationReference"
          }
        }
      },
      "threeDSecureCompletionIndicator": {
        "type": "string",
        "description": "Indique si la recherche de carte 3DS s’est terminée avec succès.  Une recherche de carte réussie augmente les chances d’une authentification de carte sans friction.\n  - **SUCCESS** : Terminé avec succès.\n  - **FAILURE** : La recherche de carte 3DS a échoué, mais a échoué.\n  - **UNAVAILABLE** : Indisponible ou non tenté.\n",
        "enum": [
          "SUCCESS",
          "FAILURE",
          "UNAVAILABLE",
          null
        ],
        "example": "SUCCESS",
        "nullable": true
      },
      "threeDSecureChallengeRequested": {
        "type": "string",
        "description": "Indique si une demande d’authentification basée sur le navigateur est demandée pour cette transaction. La norme n’est « pas de préférence »",
        "enum": [
          "NO_PREFERENCE",
          "NO_CHALLENGE_REQUESTED",
          "CHALLENGE_REQUESTED_MANDATE",
          null
        ],
        "example": "NO_PREFERENCE",
        "nullable": true,
        "default": "NO_PREFERENCE"
      },
      "threeDSecureChallengeWindowSize": {
        "type": "string",
        "description": "Concerne le rendu du défi dans le navigateur.\n  - **X_SMALL** : 250 x 400\n  - **SMALL** : 390 x 400\n  - **MEDIUM** : 500 x 600\n  - **LARGE** : 600 x 400\n  - **FULL_SCREEN** : Plein écran\n",
        "enum": [
          "X_SMALL",
          "SMALL",
          "MEDIUM",
          "LARGE",
          "FULL_SCREEN",
          null
        ],
        "example": "FULL_SCREEN",
        "nullable": true
      },
      "browserUserAgent": {
        "type": "string",
        "description": "Contenu exact de l’en-tête de l’agent utilisateur HTTP.\nNotez que lorsque la longueur totale dépasse 2048 caractères, tronquez la partie excédentaire.\n",
        "maxLength": 2048,
        "example": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})",
        "nullable": true
      },
      "browserJavaEnabled": {
        "type": "boolean",
        "description": "Indique si Java est activé dans le navigateur",
        "example": true
      },
      "browserJavascriptEnabled": {
        "type": "boolean",
        "description": "Indique si Javascript est activé dans le navigateur",
        "example": true
      },
      "browserScreenHeight": {
        "type": "integer",
        "format": "int32",
        "description": "Définie la hauteur en pixels de l’écran du titulaire de la carte.",
        "minimum": 0,
        "maximum": 999999,
        "example": 1080
      },
      "browserScreenWidth": {
        "type": "integer",
        "format": "int32",
        "description": "Définie la largeur en pixels de l’écran du titulaire de la carte.",
        "minimum": 0,
        "maximum": 999999,
        "example": 1920
      },
      "authenticationRequest": {
        "title": "authenticationRequest",
        "description": "Utilisez la demande d’authentification 3DS pour lancer le processus de validation de la carte et de l’identité du titulaire de la carte. Cette demande prend en charge toutes les méthodes d’authentification 3DS, y compris l’authentification 3RI (3DS Requestor Initiat) et l’authentification découplée. Les champs device_channel et message_category contrôler le type de requête 3DS effectuée. Pour effectuer une authentification 3DS standard avec une expérience de navigateur de titulaire de carte, envoyez device_channel = 02 pour BRW. Le résultat de cette demande détermine si la carte prend en charge les fonctionnalités 3DS et, le cas échéant, si la transaction utilise un flux sans friction ou un flux de défi. Pour effectuer une authentification initiée par le demandeur 3DS sans expérience de navigateur du titulaire de carte, envoyez device_channel = 03 pour 3RI. Tous les champs liés à l’invite d’authentification du navigateur ne sont plus obligatoires, mais les autres champs conditionnels pour 3RI deviennent obligatoires.",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "cardLookupId": {
            "nullable": true,
            "type": "string",
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "amount": {
            "$ref": "#/components/schemas/transactionAmount"
          },
          "cardholderName": {
            "$ref": "#/components/schemas/cardholderName"
          },
          "cardholderEmail": {
            "$ref": "#/components/schemas/email"
          },
          "cardholderPhoneNumber": {
            "$ref": "#/components/schemas/phoneNumber"
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "billingAddress": {
            "type": "object",
            "title": "authenticationRequestBillingAddress",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "required": [
              "streetNumber",
              "streetName",
              "city",
              "province",
              "postalCode",
              "country"
            ]
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodRequest"
          },
          "threeDSecureMessageCategory": {
            "$ref": "#/components/schemas/threeDSecureMessageCategory"
          },
          "threeDSecureDeviceChannel": {
            "$ref": "#/components/schemas/threeDSecureDeviceChannel"
          },
          "threeDSecureRequestType": {
            "$ref": "#/components/schemas/threeDSecureRequestType"
          },
          "threeDSecureRecurringFrequency": {
            "$ref": "#/components/schemas/threeDSecureRecurringFrequency"
          },
          "threeDSecureRecurringExpiry": {
            "$ref": "#/components/schemas/threeDSecureRecurringExpiry"
          },
          "threeDSecureRequestorInitiatedIndicator": {
            "$ref": "#/components/schemas/threeDSecureRequestorInitiatedIndicator"
          },
          "threeDSecurePriorAuthenticationInformation": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationInformation"
          },
          "threeDSecureNotificationUrl": {
            "nullable": true,
            "type": "string",
            "description": "URL d’encodage complète du système qui reçoit le message de réponse ou le message d’erreur.",
            "minLength": 1,
            "maxLength": 256,
            "example": "https%3A%2F%2Fdeveloper.moneris.com%2F"
          },
          "threeDSecureCompletionIndicator": {
            "$ref": "#/components/schemas/threeDSecureCompletionIndicator"
          },
          "threeDSecureChallengeRequested": {
            "$ref": "#/components/schemas/threeDSecureChallengeRequested"
          },
          "threeDSecureChallengeWindowSize": {
            "$ref": "#/components/schemas/threeDSecureChallengeWindowSize"
          },
          "browserIpAddress": {
            "description": "Protocole Internet version 4 (IPv4).",
            "type": "string",
            "format": "ipv4",
            "example": "104.75.173.179",
            "nullable": true
          },
          "browserUserAgent": {
            "$ref": "#/components/schemas/browserUserAgent"
          },
          "browserJavaEnabled": {
            "$ref": "#/components/schemas/browserJavaEnabled"
          },
          "browserJavascriptEnabled": {
            "$ref": "#/components/schemas/browserJavascriptEnabled"
          },
          "browserScreenHeight": {
            "$ref": "#/components/schemas/browserScreenHeight"
          },
          "browserScreenWidth": {
            "$ref": "#/components/schemas/browserScreenWidth"
          },
          "browserLanguage": {
            "nullable": true,
            "type": "string",
            "format": "iso-639",
            "description": "Fournit le code de langue à deux lettres selon la norme ISO 639-1. \n\nPour obtenir la liste complète des codes de langue, consultez le site : https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes.\n",
            "minLength": 2,
            "maxLength": 2,
            "example": "en"
          }
        },
        "required": [
          "amount",
          "billingAddress",
          "browserIpAddress",
          "browserScreenHeight",
          "browserScreenWidth",
          "cardholderEmail",
          "cardholderName",
          "cardholderPhoneNumber",
          "idempotencyKey",
          "threeDSecureDeviceChannel",
          "threeDSecureMessageCategory"
        ]
      },
      "threeDSecureMessageType": {
        "type": "string",
        "description": "Indique le type de réponse dans le flux 3DS.",
        "nullable": true,
        "enum": [
          "AUTHENTICATION_RESPONSE_MESSAGE",
          "AUTHENTICATION_REQUEST_MESSAGE",
          "PREPARATION_RESPONSE_MESSAGE",
          "PREPARATION_REQUEST_MESSAGE",
          "CHALLENGE_RESPONSE_MESSAGE",
          "CHALLENGE_REQUEST_MESSAGE",
          "RESULTS_REQUEST_MESSAGE",
          "RESULTS_RESPONSE_MESSAGE",
          "ERROR_MESSAGE",
          null
        ],
        "example": "CHALLENGE_RESPONSE_MESSAGE"
      },
      "threeDSecureTransactionStatus": {
        "type": "string",
        "description": "Indique le résultat de la transaction.  Pour plus d’informations sur ce domaine, veuillez consulter https://docs.3dsecure.io/3dsv2/specification_220.html#attr-ARes-transStatus\n  - **AUTHENTICATED** : Authentification/vérification du compte réussie.\n  - **AUTHENTICATION_ATTEMPTED** : Tentatives de traitement effectuées ; Non authentifié/vérifié, mais une preuve de tentative d’authentification/vérification est fournie.\n  - **CHALLENGE_AUTHENTICATION_REQUIRED** : Défi requis ; Une authentification supplémentaire est requise à l’aide de 'challengeUrl' et 'challengeData'.\n  - **CHALLENGE_DECOUPLED_AUTHENTICATION_CONFIRMED** : Défi requis ; Authentification découplée confirmée. \n  - **TECHNICAL_ISSUE** : L’authentification/vérification de compte n’a pas pu être effectuée ; Problème technique ou autre.\n  - **NOT_AUTHENTICATED** : Non authentifié / Compte non vérifié ; Transaction refusée.\n  - **REJECTED** : Authentification/vérification de compte rejetée ; L’émetteur rejette l’authentification/vérification et demande que l’autorisation ne soit pas tentée.\n  - **CHALLENGE_PREFERENCE_ACKNOWLEDGED** : à titre informatif seulement ; Reconnaissance de la préférence du demandeur 3DS.\n",
        "enum": [
          "AUTHENTICATED",
          "AUTHENTICATION_ATTEMPTED",
          "CHALLENGE_AUTHENTICATION_REQUIRED",
          "CHALLENGE_DECOUPLED_AUTHENTICATION_CONFIRMED",
          "TECHNICAL_ISSUE",
          "NOT_AUTHENTICATED",
          "REJECTED",
          "CHALLENGE_PREFERENCE_ACKNOWLEDGED"
        ]
      },
      "threeDSecureTransactionStatusReason": {
        "type": "string",
        "nullable": true,
        "description": "Fournit des informations sur la raison pour laquelle le champ Statut de la transaction a la valeur spécifiée.\n",
        "example": "01 - Card authentication failed"
      },
      "threeDSecureChallengeUrl": {
        "type": "string",
        "description": "Si le transStatus est « C », ce champ sera rempli avec l’URL pour POST le challengeData afin de créer l’écran de défi du titulaire de carte",
        "format": "uri",
        "minLength": 1,
        "maxLength": 2048,
        "example": "https://developer.moneris.com/",
        "nullable": true
      },
      "threeDSecureChallengeData": {
        "type": "string",
        "description": "Chaîne qui doit être postée sur l’URL du défi pour créer l’écran de défi",
        "minLength": 1,
        "maxLength": 2048,
        "nullable": true
      },
      "threeDSecureChallengeCompletionIndicator": {
        "type": "string",
        "nullable": true,
        "description": "Indique si le défi a été terminé. Ceci est renvoyé dans la demande de recherche CAVV.\n",
        "enum": [
          "YES",
          "NO",
          null
        ]
      },
      "threeDSecureAuthenticationType": {
        "type": "string",
        "nullable": true,
        "description": "Indique le type de méthode d’authentification que l’émetteur utilisera pour défier le titulaire de la carte, que ce soit dans le message ARes ou ce qui a été utilisé par l’ACS dans le message RReq.",
        "enum": [
          "STATIC",
          "DYNAMIC",
          "OUT_OF_BAND",
          "DECOUPLED",
          null
        ],
        "example": "DYNAMIC"
      },
      "threeDSecureAuthenticationTimestamp": {
        "type": "string",
        "description": "Date et heure en UTC de l’authentification du titulaire de la carte.",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z",
        "nullable": true
      },
      "authenticationResponse": {
        "title": "authenticationResponse",
        "type": "object",
        "properties": {
          "threeDSecureAuthenticationId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "cardLookupId": {
            "nullable": true,
            "type": "string",
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "threeDSecureMessageType": {
            "$ref": "#/components/schemas/threeDSecureMessageType"
          },
          "threeDSecureTransactionStatus": {
            "$ref": "#/components/schemas/threeDSecureTransactionStatus"
          },
          "threeDSecureTransactionStatusReason": {
            "$ref": "#/components/schemas/threeDSecureTransactionStatusReason"
          },
          "ecommerceIndicator": {
            "$ref": "#/components/schemas/ecommerceIndicator"
          },
          "threeDSecureChallengeUrl": {
            "$ref": "#/components/schemas/threeDSecureChallengeUrl"
          },
          "threeDSecureChallengeData": {
            "$ref": "#/components/schemas/threeDSecureChallengeData"
          },
          "threeDSecureAuthenticationValue": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationValue"
          },
          "threeDSecureChallengeCompletionIndicator": {
            "$ref": "#/components/schemas/threeDSecureChallengeCompletionIndicator"
          },
          "threeDSecureServerTransactionId": {
            "nullable": true,
            "type": "string",
            "description": "Indique les informations requises lors de l’envoi d’une transaction 3-D Secure 2.0+. \n\nCes données sont obtenues à partir d’une transaction de demande de recherche CAVV ou de demande d’authentification MPI 3DS.\n",
            "format": "uuid",
            "example": "ad9b0eda-bf9b-4288-b188-9467993603e1"
          },
          "threeDSecureDirectoryServerTransactionId": {
            "nullable": true,
            "type": "string",
            "description": "Identificateur de transaction unique et universel attribué par le serveur d’annuaire 3DS (DS) pour identifier une transaction unique.",
            "format": "uuid",
            "example": "ad9b0eda-bf9b-4288-b188-9467993603e1"
          },
          "threeDSecureAccessControlServerTransactionId": {
            "nullable": true,
            "type": "string",
            "description": "Obligatoire en cas d’envoi d’une transaction 3-D Secure 2.0+. Les données sont obtenues à partir d’une transaction de demande de recherche Cavv ou de demande d’authentification MPI 3DS",
            "format": "uuid",
            "example": "ad9b0eda-bf9b-4288-b188-9467993603e1"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "threeDSecureCardholderInformation": {
            "nullable": true,
            "type": "string",
            "description": "Texte fourni par l’ACS/l’émetteur au titulaire de la carte lors d’une transaction sans friction ou découplée. L’émetteur peut fournir des informations au titulaire de la carte.",
            "maxLength": 128,
            "example": "Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx."
          },
          "threeDSecureVersion": {
            "$ref": "#/components/schemas/threeDSecureVersion"
          },
          "threeDSecureAuthenticationType": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationType"
          },
          "threeDSecureAuthenticationTimestamp": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationTimestamp"
          }
        },
        "required": [
          "threeDSecureAuthenticationId",
          "merchantId",
          "threeDSecureTransactionStatus",
          "ecommerceIndicator",
          "paymentMethod",
          "threeDSecureVersion"
        ]
      },
      "threeDSecureChallengeResponseData": {
        "type": "string",
        "description": "Fournit les données de réponse du défi.",
        "example": "TBD"
      },
      "lookupRequest": {
        "title": "challengeFlowRequest",
        "description": "L’objectif du flux 3-D Secure est de vérifier que le véritable titulaire de la carte fait partie de l’autorisation. Le flux d’authentification est utilisé pour présenter un moyen d’authentifier le titulaire de la carte à l’aide, par exemple, de l’OTP ou d’une méthode d’identification fédérée.",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "threeDSecureChallengeResponseData": {
            "$ref": "#/components/schemas/threeDSecureChallengeResponseData"
          }
        },
        "required": [
          "idempotencyKey",
          "threeDSecureChallengeResponseData"
        ]
      },
      "threeDSecureNotificationUrl": {
        "type": "string",
        "description": "URL d’encodage complète du système qui reçoit le message de réponse ou le message d’erreur.",
        "minLength": 1,
        "maxLength": 256,
        "example": "https%3A%2F%2Fdeveloper.moneris.com%2F"
      },
      "cardLookupRequest": {
        "title": "cardLookupRequest",
        "description": "La demande card_lookup vérifie l’applicabilité de 3DS sur la carte et renvoie la version 3DS prise en charge par la carte. Il renvoie également l’URL de la méthode 3DS et les données de la méthode 3DS pour l’envoi d’un POST d’empreinte d’appareil à l’ACS de l’émetteur.",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodRequest"
          },
          "threeDSecureNotificationUrl": {
            "$ref": "#/components/schemas/threeDSecureNotificationUrl"
          }
        },
        "required": [
          "idempotencyKey",
          "paymentMethod",
          "threeDSecureNotificationUrl"
        ]
      },
      "threeDSecureMethodUrl": {
        "type": "string",
        "format": "uri",
        "description": "Renvoie l’URL de l’étape de prise d’empreinte de l’appareil.",
        "minLength": 1,
        "maxLength": 256,
        "example": "https://developer.moneris.com/"
      },
      "threeDSecureMethodData": {
        "type": "string",
        "description": "Données qui doivent être publiées sur l’URL de la méthode 3DS pour l’étape de prise d’empreinte de l’appareil.",
        "minLength": 1,
        "maxLength": 254
      },
      "cardLookupResponse": {
        "title": "cardLookupResponse",
        "type": "object",
        "properties": {
          "cardLookupId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "threeDSecureServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureServerTransactionId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "threeDSecureVersion": {
            "$ref": "#/components/schemas/threeDSecureVersion"
          },
          "threeDSecureMethodUrl": {
            "$ref": "#/components/schemas/threeDSecureMethodUrl"
          },
          "threeDSecureMethodData": {
            "$ref": "#/components/schemas/threeDSecureMethodData"
          }
        },
        "required": [
          "cardLookupId",
          "merchantId",
          "paymentMethod",
          "threeDSecureServerTransactionId",
          "threeDSecureVersion",
          "threeDSecureMethodUrl",
          "threeDSecureMethodData"
        ]
      },
      "kountResult": {
        "description": "Réponse de décision automatique",
        "type": "string",
        "enum": [
          "APPROVED",
          "DECLINED",
          "UNDER_REVIEW"
        ]
      },
      "fraudScore": {
        "description": "Score de risque final renvoyé par le système Kount",
        "type": "integer",
        "format": "int32",
        "maxLength": 3,
        "example": 99,
        "nullable": true
      },
      "kountTransactionId": {
        "description": "Kount Transaction ID",
        "type": "string",
        "maxLength": 12,
        "example": "123456789012"
      },
      "kountTriggeredCounter": {
        "type": "object",
        "description": "Compteur Kount qui s’est déclenché",
        "properties": {
          "name": {
            "type": "string",
            "description": "Nom du compteur",
            "maxLength": 64
          },
          "value": {
            "type": "number",
            "format": "double",
            "description": "Somme du nombre de fois qu’un compteur a été déclenché.",
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "kountPiercedAddress": {
        "type": "object",
        "description": "Détails de l’adresse IP percée.",
        "nullable": true,
        "properties": {
          "latitude": {
            "description": "Latitude de l’adresse IP percée",
            "type": "number",
            "format": "double",
            "example": -90.1922,
            "nullable": true
          },
          "longitude": {
            "description": "Longitude de l’adresse IP percée",
            "type": "number",
            "format": "double",
            "example": 38.6312,
            "nullable": true
          },
          "city": {
            "nullable": true,
            "type": "string",
            "description": "Identifie la ville.\n",
            "minLength": 1,
            "maxLength": 50,
            "example": "Toronto"
          },
          "region": {
            "description": "État/région de l’adresse IP percée",
            "type": "string",
            "example": "Ontario",
            "maxLength": 255,
            "nullable": true
          },
          "owner": {
            "description": "Propriétaire de l’adresse IP percée ou du bloc d’adresses",
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "country": {
            "nullable": true,
            "type": "string",
            "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
            "minLength": 2,
            "maxLength": 2,
            "example": "CA",
            "format": "iso-3166"
          }
        }
      },
      "kountTriggeredRule": {
        "type": "object",
        "description": "La règle de Kount qui a été déclenchée",
        "properties": {
          "id": {
            "description": "ID de règle associé aux règles créées par le marchand",
            "type": "integer",
            "format": "int64",
            "example": 8
          },
          "description": {
            "description": "Descriptions de règle associées à l’Id",
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "example": "Rule description example"
          }
        }
      },
      "kountInfo": {
        "description": "Objet des paramètres de réponse de Kount",
        "type": "object",
        "properties": {
          "browser": {
            "description": "Navigateur Web",
            "type": "string",
            "maxLength": 64,
            "example": "Google Chrome",
            "nullable": true
          },
          "cardBrand": {
            "nullable": true,
            "type": "string",
            "description": "Affiche le nom de la marque de la carte associé au type de carte.",
            "enum": [
              "MASTERCARD",
              "VISA",
              "AMERICAN_EXPRESS",
              "JCB",
              "DISCOVER",
              "INTERAC",
              "UNIONPAY",
              "GIFT_MONERIS",
              "GIFT_DATACANDY",
              "GIFT_GIVEX",
              null
            ],
            "example": "MASTERCARD"
          },
          "associatedCardCount": {
            "description": "Nombre total de cartes de crédit associées à persona tel que vu par Kount",
            "type": "integer",
            "format": "int32",
            "example": 3,
            "nullable": true
          },
          "cookiesEnabled": {
            "description": "Un indicateur pour indiquer si les cookies sont activés ou non sur l’appareil qui passe une commande",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "countersTriggered": {
            "type": "array",
            "description": "Compteurs déclenchés lors de l’évaluation des règles",
            "items": {
              "$ref": "#/components/schemas/kountTriggeredCounter"
            }
          },
          "country": {
            "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
            "nullable": true,
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "example": "CA",
            "format": "iso-3166"
          },
          "deviceFirstSeenAt": {
            "description": "Date",
            "nullable": true,
            "type": "string",
            "format": "date",
            "example": "2019-07-30"
          },
          "deviceLayers": {
            "description": "5 couches de l’appareil qui comprennent l’empreinte digitale de l’appareil, représentant le système d’exploitation, le navigateur, Javascript, les cookies et les paramètres Flash",
            "type": "string",
            "maxLength": 55,
            "minLength": 55,
            "nullable": true
          },
          "deviceCount": {
            "description": "Nombre total d’appareils uniques associés à persona tel que vu par Kount",
            "type": "integer",
            "format": "int32",
            "example": 2,
            "nullable": true
          },
          "deviceScreenResolution": {
            "description": "Résolution de l’écran de l’appareil",
            "type": "string",
            "maxLength": 10,
            "example": "1920x1080",
            "nullable": true
          },
          "emailCount": {
            "description": "Nombre total d’adresses e-mail uniques associées à persona telles que vues par Kount",
            "type": "integer",
            "format": "int32",
            "example": 3,
            "nullable": true
          },
          "errorCount": {
            "description": "Nombre d’erreurs générées par la requête Kount",
            "type": "integer",
            "format": "int32",
            "example": 3,
            "nullable": true
          },
          "errorCode": {
            "description": "Code d’erreur affiché dans la réponse du service d’enquête sur les risques",
            "type": "string",
            "maxLength": 4,
            "example": "1080",
            "nullable": true
          },
          "kountFingerprint": {
            "description": "L’empreinte digitale unique de l’appareil qui passe la commande",
            "type": "string",
            "maxLength": 32,
            "example": "123456789h123456789p123456789g12",
            "nullable": true
          },
          "flashEnabled": {
            "description": "Un indicateur pour indiquer si Flash est activé sur l’appareil qui passe la commande",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "riskiestAssociatedCountry": {
            "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
            "nullable": true,
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "example": "CA",
            "format": "iso-3166"
          },
          "userDefinedHomeCountry": {
            "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
            "nullable": true,
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "example": "CA",
            "format": "iso-3166"
          },
          "proxyAddress": {
            "description": "Protocole Internet version 4 (IPv4).",
            "type": "string",
            "format": "ipv4",
            "example": "104.75.173.179",
            "nullable": true
          },
          "javascriptEnabled": {
            "description": "Un indicateur pour indiquer si JavaScript est activé sur l’appareil",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "deviceDataCollectedByDataCollector": {
            "description": "Indicateur indiquant si les données de l’appareil ont été collectées ou non par le processus de collecte de données",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "knowYourCustomerFlag": {
            "description": "Indicateur de connaissance du client",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "deviceLanguage": {
            "description": "Fournit le code de langue à deux lettres selon la norme ISO 639-1. \n\nPour obtenir la liste complète des codes de langue, consultez le site : https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes.\n",
            "nullable": true,
            "type": "string",
            "format": "iso-639",
            "minLength": 2,
            "maxLength": 2,
            "example": "en"
          },
          "localTime": {
            "description": "Date & Heure",
            "nullable": true,
            "type": "string",
            "format": "date-time",
            "example": "2019-07-30T06:43:40.252Z"
          },
          "isMobileDevice": {
            "description": "Indicateur pour indiquer si l’appareil qui passe la commande est un appareil mobile",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "usesMobileForwarder": {
            "description": "Si l’appareil est mobile, utilise-t-il un transitaire pour traiter le service des transporteurs",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "mobileType": {
            "description": "Le type d’appareil mobile, p. ex., iPhone, Android, Blackberry, iPad, etc.",
            "type": "string",
            "maxLength": 32,
            "example": "iPhone",
            "nullable": true
          },
          "kountNetwork": {
            "description": "Type de réseau le plus risqué associé à un persona au cours des 14 derniers jours :",
            "type": "string",
            "nullable": true,
            "enum": [
              "ANONYMOUS",
              "HIGH_SCHOOL",
              "LIBRARY",
              "NORMAL",
              "OPEN_PROXY",
              "PRISON",
              "SATELLITE",
              null
            ]
          },
          "mode": {
            "nullable": true,
            "description": "Spécifie le type de mode de publication du service d’interrogation des risques\n\nModes de service d’interrogation des risques\n\nLes modes sont utilisés pour spécifier le type de données soumises à Kount.\nNotez que TOUS LES NOMS DE CHAMP pour un appel RIS doivent être en MAJUSCULES. Il ne peut pas s’agir d’autres combinaisons de cas\ntels que sess, Merc, mOdE. Toutefois, les valeurs des champs peuvent être mixtes avec des casses, telles que\nSESS=UpperMixedCaseSessID95628.\n- REQUÊTE = Mode Q\n  Requêtes initiales adressées par le commerçant à Kount qui ne proviennent pas d’un centre d’appels\n  environnement.\n- MISE À JOUR = Mode U\n  Mettre à jour l’appel à Kount, n’entraîne pas de réévaluation de la transaction mais mettra à jour ce qui est affiché\n  dans la console Web de l’agent. Cet appel de mise à jour n’est pas pris en compte dans le nombre de transactions RIS\n  achetées. Seuls certains champs peuvent être mis à jour avec les appels MODE=U. Le champ PTYP ne peut être mis à jour que si\n  le message initial à Kount était PTYP=NONE\n",
            "type": "string",
            "enum": [
              "QUERY",
              "UPDATE",
              null
            ]
          },
          "operatingSystem": {
            "description": "Système d’exploitation de l’appareil",
            "type": "string",
            "maxLength": 64,
            "example": "macOS",
            "nullable": true
          },
          "pcRemoteEnabled": {
            "description": "Indicateur indiquant si l’appareil est activé pour utiliser le logiciel à distance du PC",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "proxyEnabled": {
            "description": "Indicateur indiquant si un serveur proxy est détecté ou non",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "piercedAddress": {
            "$ref": "#/components/schemas/kountPiercedAddress"
          },
          "reasonCode": {
            "description": "Code motif associé à l’action de la règle",
            "type": "string",
            "maxLength": 16,
            "example": "Invalid Data",
            "nullable": true
          },
          "region": {
            "description": "Région associée à l’emplacement de l’appareil",
            "type": "string",
            "maxLength": 2,
            "example": "CA",
            "nullable": true
          },
          "riskiestAssociatedRegion": {
            "description": "Indique l’emplacement géographique le plus risqué associé au Persona. \nFait référence au GEOX de Kount.\n",
            "type": "string",
            "maxLength": 2,
            "example": "CA",
            "nullable": true
          },
          "rulesTriggered": {
            "type": "array",
            "description": "Règles déclenchées par courrier à Kount",
            "items": {
              "$ref": "#/components/schemas/kountTriggeredRule"
            }
          },
          "sessionId": {
            "nullable": true,
            "description": "ID de session unique ; Doit être unique sur une période de 30 jours",
            "type": "string",
            "maxLength": 32,
            "example": "xjudq804i1049jkjakdad"
          },
          "websiteId": {
            "nullable": true,
            "description": "Identifiant du site Web d’où provient la commande",
            "type": "string",
            "maxLength": 8,
            "example": "DEFAULT"
          },
          "timezone": {
            "description": "Le fuseau horaire de l’appareil ; Au format ISO de +|–hh:mm",
            "type": "string",
            "maxLength": 6,
            "example": "-04:00",
            "nullable": true
          },
          "deviceUserAgent": {
            "nullable": true,
            "type": "string",
            "description": "Contenu exact de l’en-tête de l’agent utilisateur HTTP.\nNotez que lorsque la longueur totale dépasse 2048 caractères, tronquez la partie excédentaire.\n",
            "maxLength": 2048,
            "example": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})"
          },
          "velocity": {
            "description": "Quantité de commandes vues par persona au cours des 14 derniers jours",
            "type": "integer",
            "format": "int64",
            "example": 8,
            "nullable": true
          },
          "maximumVelocity": {
            "description": "Quantité de commandes de persona dans la fenêtre la plus active de 6 heures au cours des 14 derniers jours ; payment_response champ doit être égal à « A »",
            "type": "integer",
            "format": "int64",
            "example": 8,
            "nullable": true
          },
          "kountVersion": {
            "description": "Spécifie la version du système Kount utilisé",
            "type": "string",
            "maxLength": 4,
            "example": "1.0",
            "nullable": true
          },
          "deviceVoiceActivated": {
            "description": "S’il s’agit d’un appareil mobile, indicateur indiquant si l’appareil est activé par la voix",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "warningCount": {
            "description": "Nombre d’avertissements générés par le service d’information Kount",
            "type": "integer",
            "format": "int32",
            "example": 8,
            "nullable": true
          },
          "warningCode": {
            "description": "Code d’avertissement affiché dans la réponse du service d’enquête sur les risques",
            "type": "string",
            "maxLength": 4,
            "example": "180",
            "nullable": true
          },
          "warningDetail": {
            "description": "Détails de l’avertissement",
            "type": "string",
            "nullable": true
          }
        }
      },
      "kountResponse": {
        "title": "kountInquiryResponse",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "kountInquiryId": {
                "$ref": "#/components/schemas/resourceId"
              },
              "orderId": {
                "$ref": "#/components/schemas/orderId"
              },
              "kountResult": {
                "$ref": "#/components/schemas/kountResult"
              },
              "fraudScore": {
                "$ref": "#/components/schemas/fraudScore"
              },
              "kountTransactionId": {
                "$ref": "#/components/schemas/kountTransactionId"
              }
            },
            "required": [
              "kountInquiryId",
              "kountResult",
              "kountTransactionId"
            ]
          },
          {
            "$ref": "#/components/schemas/kountInfo"
          }
        ],
        "required": [
          "orderId",
          "kountTransactionId",
          "kountResult"
        ]
      },
      "kountInquiryList": {
        "title": "kountInquiryList",
        "type": "object",
        "properties": {
          "data": {
            "description": "Liste des demandes de renseignements Kount.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/kountResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "kountAccountId": {
        "description": "Identifiant local à 6 chiffres utilisé par le commerçant pour identifier la demande d’enquête Kount",
        "type": "string",
        "minLength": 6,
        "maxLength": 6,
        "example": "760000"
      },
      "kountApiKey": {
        "description": "La clé API associée à l’identifiant du marchand Kount",
        "type": "string",
        "maxLength": 256,
        "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI3NjAwMDAiLCJhdWQiOiJLb3VudC4xIiwiaWF0IjoxNTU4MDQwODQ5LCJzY3AiOnsia2EiOm51bGwsImtjIjpmYWxzZSwiYXBpIjp0cnVlLCJyaXMiOnRydWV9fQ.y3_2yzd11-Y_F6_xzVsXI-NO1a7P6ldMjDnKzl5yBko"
      },
      "originatedFromCallCenter": {
        "description": "Fait référence à l’indicateur de centre d’appels de Kount. \n\nIndicateur indiquant si la demande d’interrogation de risque provient d’un environnement de centre d’appels Si les agents du service clientèle accèdent à une page de saisie de commande distincte qui ne collecte pas de données iframe : lors de l’envoi de la demande de kount_inquiry, définissez call_center_ind sur Y Si les agents du service clientèle accèdent à la même page de saisie de commande que le client :  Lors de l’envoi de la demande kount_inquiry, définissez call_center_ind sur N Si l’appel du service d’enquête sur les risques ne provient pas d’un environnement de centre d’appels, définissez call_center_ind sur N\n\nVrai pour OUI, Faux pour NON\n",
        "type": "boolean"
      },
      "sessionId": {
        "description": "ID de session unique ; Doit être unique sur une période de 30 jours",
        "type": "string",
        "maxLength": 32,
        "example": "xjudq804i1049jkjakdad"
      },
      "websiteId": {
        "description": "Identifiant du site Web d’où provient la commande",
        "type": "string",
        "maxLength": 8,
        "example": "DEFAULT"
      },
      "kountPaymentId": {
        "title": "Kount Payment Id",
        "type": "object",
        "description": "ID de paiement",
        "properties": {
          "paymentId": {
            "$ref": "#/components/schemas/resourceId"
          }
        },
        "required": [
          "paymentId"
        ]
      },
      "kountValidationId": {
        "title": "Kount Validation Id",
        "type": "object",
        "description": "Validation Id",
        "properties": {
          "validationId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "amount": {
            "$ref": "#/components/schemas/transactionAmount"
          }
        },
        "required": [
          "validationId",
          "amount"
        ]
      },
      "paymentToken": {
        "description": "Jeton de paiement soumis par le commerçant pour la commande (carte de crédit, identifiant du payeur, itinéraire/transit, MICR et numéro de compte).\n\nSi paymentType est défini sur NOCE, la valeur paymentToken doit être laissée vide (NULL).\n\nSi les renseignements de la carte de crédit ne sont pas disponibles et que la tokénisation Moneris est utilisée pour traiter le paiement, définissez paymentType = CARD et envoyez le jeton dans le champ paymentToken.\n",
        "type": "string",
        "maxLength": 32,
        "example": "4242424242424242"
      },
      "paymentType": {
        "description": "Type de paiement soumis par le marchand. \n\nSi les renseignements de la carte de crédit ne sont pas disponibles et que la tokénisation Moneris est utilisée pour traiter le paiement, définissez paymentType = CARD et envoyez le jeton dans le champ paymentToken.\n",
        "type": "string",
        "enum": [
          "APPLE_PAY",
          "CARD",
          "PAYPAL",
          "CHECK",
          "NONE",
          "GREEN_DOT_MONEY_PACK",
          "BILL_ME_LATER",
          "GIFT_CARD",
          "BPAY",
          "NETELLER",
          "GIROPAY",
          "ELV",
          "MERCADE_PAGO",
          "SINGLE_EURO_PAYMENT_AREA",
          "INTERAC",
          "CARTE_BLEUE",
          "POLI",
          "SKRILL_MONEY_BOOKERS",
          "SOFORT"
        ]
      },
      "kountPaymentData": {
        "title": "Kount Payment Data",
        "description": "Données de paiement",
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/transactionAmount"
          },
          "customerId": {
            "nullable": true,
            "type": "string",
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "lastFour": {
            "nullable": true,
            "type": "string",
            "description": "Les 4 derniers chiffres de la carte.",
            "minLength": 4,
            "maxLength": 4,
            "example": "1234"
          },
          "paymentToken": {
            "$ref": "#/components/schemas/paymentToken"
          },
          "paymentType": {
            "$ref": "#/components/schemas/paymentType"
          }
        },
        "required": [
          "paymentToken",
          "paymentType",
          "amount"
        ]
      },
      "kountPaymentDetails": {
        "title": "kountPaymentDetails",
        "description": "Données de paiement",
        "oneOf": [
          {
            "$ref": "#/components/schemas/kountPaymentId"
          },
          {
            "$ref": "#/components/schemas/kountValidationId"
          },
          {
            "$ref": "#/components/schemas/kountPaymentData"
          }
        ]
      },
      "itemId": {
        "type": "string",
        "maxLength": 255,
        "description": "Identificateur unique de l’élément.",
        "example": "e2ab873e-b295-11e9-9c02"
      },
      "itemType": {
        "type": "string",
        "description": "Description générale d’un élément",
        "maxLength": 255,
        "example": "Phone"
      },
      "kountProductItem": {
        "type": "object",
        "description": "Partie de l’article de la transaction",
        "properties": {
          "itemId": {
            "$ref": "#/components/schemas/itemId"
          },
          "itemType": {
            "$ref": "#/components/schemas/itemType"
          },
          "itemQuantity": {
            "type": "integer",
            "format": "int32",
            "description": "Quantité facturée pour ce poste.",
            "minimum": 0,
            "maximum": 999999999,
            "example": 82,
            "nullable": true
          },
          "itemName": {
            "nullable": true,
            "type": "string",
            "description": "Nom de l’élément",
            "minLength": 1,
            "maxLength": 50,
            "example": "Canned Food"
          },
          "itemAmount": {
            "title": "kountProductItemamount",
            "nullable": true,
            "type": "object",
            "description": "Contient le montant de l’article individuel qui est normalement calculé en multipliant le prix par la quantité. La valeur doit être exprimée en centimes. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 15000,
              "currency": "CAD"
            }
          }
        },
        "required": [
          "itemId",
          "itemType"
        ]
      },
      "automaticNumberId": {
        "description": "Identification automatique du numéro (ANI) soumise avec la commande Si l’ANI ne peut pas être déterminé, le commerçant doit passer 0123456789 en tant qu’ANID REMARQUE : Ce champ n’est valide que pour les demandes de téléphone à Web où les agents du service à la clientèle accèdent à une page de saisie de commande distincte qui ne collecte pas de données iframe.",
        "type": "string",
        "maxLength": 32,
        "example": "0123456789",
        "nullable": true
      },
      "gender": {
        "type": "string",
        "nullable": true,
        "description": "Le sexe d’un individu",
        "enum": [
          "MALE",
          "FEMALE",
          null
        ]
      },
      "fullName": {
        "type": "string",
        "description": "Nom complet du client",
        "minLength": 1,
        "maxLength": 64,
        "example": "John Doe",
        "nullable": true
      },
      "financialOrderId": {
        "description": "Identifiant unique pour les transactions chez Kount",
        "type": "string",
        "maxLength": 32,
        "example": "nqa-finorderid-1",
        "nullable": true
      },
      "shippingType": {
        "description": "Type d’expédition. La nomenclature suivante est attendue pour les types d’expédition à transmettre à Kount. REMARQUE :Ces trois attributs peuvent être utilisés pour transmettre des données d’attributs personnalisés si vous souhaitez corréler certaines données avec la réponse renvoyée",
        "type": "string",
        "nullable": true,
        "enum": [
          "SAME_DAY",
          "NEXT_DAY",
          "SECOND_DAY",
          "STANDARD",
          null
        ]
      },
      "kountInquiryRequest": {
        "title": "kountInquiryRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "kountAccountId": {
            "$ref": "#/components/schemas/kountAccountId"
          },
          "kountApiKey": {
            "$ref": "#/components/schemas/kountApiKey"
          },
          "originatedFromCallCenter": {
            "$ref": "#/components/schemas/originatedFromCallCenter"
          },
          "sessionId": {
            "$ref": "#/components/schemas/sessionId"
          },
          "websiteId": {
            "$ref": "#/components/schemas/websiteId"
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/kountPaymentDetails"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "products": {
            "type": "array",
            "description": "Liste des articles du produit faisant partie de la transaction",
            "items": {
              "$ref": "#/components/schemas/kountProductItem"
            }
          },
          "automaticNumberId": {
            "$ref": "#/components/schemas/automaticNumberId"
          },
          "billingAddress": {
            "nullable": true,
            "title": "kountBillingAddress",
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "shippingAddress": {
            "nullable": true,
            "title": "kountShippingAddress",
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "dateOfBirth": {
            "description": "Date",
            "nullable": true,
            "type": "string",
            "format": "date",
            "example": "2019-07-30"
          },
          "timestamp": {
            "description": "Date & Heure",
            "nullable": true,
            "type": "string",
            "format": "date-time",
            "example": "2019-07-30T06:43:40.252Z"
          },
          "gender": {
            "$ref": "#/components/schemas/gender"
          },
          "customerName": {
            "$ref": "#/components/schemas/fullName"
          },
          "financialOrderId": {
            "$ref": "#/components/schemas/financialOrderId"
          },
          "shippingType": {
            "$ref": "#/components/schemas/shippingType"
          },
          "ipv4": {
            "nullable": false,
            "type": "string",
            "format": "ipv4",
            "description": "Protocole Internet version 4 (IPv4).",
            "example": "104.75.173.179"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey",
          "kountAccountId",
          "kountApiKey",
          "paymentDetails",
          "originatedFromCallCenter",
          "sessionId",
          "websiteId",
          "ipv4",
          "email",
          "products"
        ]
      },
      "kountRefundStatus": {
        "description": "Statut de remboursement/rétrofacturation. R - Remboursement, C - Rétrofacturation",
        "type": "string",
        "nullable": true,
        "enum": [
          "REFUND",
          "CHARGEBACK",
          null
        ]
      },
      "evaluateKountResult": {
        "description": "une réévaluation complète sera effectuée avec Kount. La valeur par défaut est false.",
        "type": "boolean",
        "default": false,
        "example": false
      },
      "kountAssertRequest": {
        "title": "kountAssertRequest",
        "type": "object",
        "properties": {
          "kountAccountId": {
            "$ref": "#/components/schemas/kountAccountId"
          },
          "kountApiKey": {
            "$ref": "#/components/schemas/kountApiKey"
          },
          "paymentDetails": {
            "title": "kountAssertPaymentDetails",
            "description": "Kount Assert Payment Data",
            "oneOf": [
              {
                "$ref": "#/components/schemas/kountPaymentId"
              },
              {
                "type": "object",
                "properties": {
                  "validationId": {
                    "$ref": "#/components/schemas/resourceId"
                  }
                },
                "required": [
                  "validationId"
                ]
              },
              {
                "type": "object",
                "title": "Kount Assert Payment Data",
                "description": "Kount Assert Payment Data",
                "properties": {
                  "lastFour": {
                    "nullable": true,
                    "type": "string",
                    "description": "Les 4 derniers chiffres de la carte.",
                    "minLength": 4,
                    "maxLength": 4,
                    "example": "1234"
                  },
                  "paymentToken": {
                    "nullable": true,
                    "description": "Jeton de paiement soumis par le commerçant pour la commande (carte de crédit, identifiant du payeur, itinéraire/transit, MICR et numéro de compte).\n\nSi paymentType est défini sur NOCE, la valeur paymentToken doit être laissée vide (NULL).\n\nSi les renseignements de la carte de crédit ne sont pas disponibles et que la tokénisation Moneris est utilisée pour traiter le paiement, définissez paymentType = CARD et envoyez le jeton dans le champ paymentToken.\n",
                    "type": "string",
                    "maxLength": 32,
                    "example": "4242424242424242"
                  },
                  "paymentType": {
                    "$ref": "#/components/schemas/paymentType"
                  }
                },
                "required": [
                  "paymentType"
                ]
              }
            ]
          },
          "financialOrderId": {
            "nullable": true,
            "description": "Identifiant unique pour les transactions chez Kount",
            "type": "string",
            "maxLength": 32,
            "example": "nqa-finorderid-1"
          },
          "refundStatus": {
            "$ref": "#/components/schemas/kountRefundStatus"
          },
          "evaluateKountResult": {
            "$ref": "#/components/schemas/evaluateKountResult"
          }
        },
        "required": [
          "kountAccountId",
          "kountApiKey"
        ]
      }
    },
    "parameters": {
      "apiVersion": {
        "in": "header",
        "name": "Api-Version",
        "required": true,
        "example": "2024-09-17",
        "description": "Version de l’API du point de terminaison. \n\nDoit être fourni dans la section des en-têtes. \n",
        "schema": {
          "$ref": "#/components/schemas/apiVersion"
        }
      },
      "correlationId": {
        "in": "header",
        "name": "X-Correlation-Id",
        "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4",
        "description": "Corrèle une série de requêtes au sein d’un même flux.\n\nRemarque : Cet identifiant est généré par Moneris avec chaque demande ou réponse, s’il n’existe pas. \nLes commerçants doivent faire écho à la valeur avec chaque demande qui fait partie du flux d’appels.\n",
        "required": false,
        "schema": {
          "type": "string",
          "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4"
        }
      },
      "merchantId": {
        "in": "header",
        "name": "X-Merchant-Id",
        "example": "0123456789101",
        "description": "Code d’identification de treize caractères. \n\nRemarque : Ce code est fourni par Moneris et est nécessaire pour identifier le commerçant qui effectue la transaction.\n",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/merchantId"
        }
      },
      "pageBeforeCursor": {
        "in": "query",
        "name": "cursor",
        "description": "Curseur de pagination pour renvoyer les éléments situés après.",
        "required": false,
        "example": "d41d8cd98f00b204e9800998ecf8427e",
        "schema": {
          "type": "string",
          "example": "d41d8cd98f00b204e9800998ecf8427e"
        }
      },
      "pageLimit": {
        "in": "query",
        "name": "limit",
        "description": "Nombre maximal d’éléments à renvoyer dans la réponse.",
        "example": 10,
        "schema": {
          "type": "integer",
          "default": 10,
          "minimum": 1,
          "maximum": 20,
          "example": 10
        }
      },
      "createdFrom": {
        "name": "created_from",
        "in": "query",
        "description": "Renvoie les éléments créés après la date spécifiée, par défaut à la date actuelle à partir de 12 heures.",
        "required": false,
        "example": "2024-05-16T04:00:00.000Z",
        "schema": {
          "$ref": "#/components/schemas/dateTime"
        }
      },
      "createdTo": {
        "name": "created_to",
        "in": "query",
        "description": "Renvoie les éléments créés avant la date spécifiée, jusqu’à un jour plus tôt. \n\nPar défaut, la date et l’heure actuelles ne doivent pas être postérieures de plus d’un jour à la date created_from. \n",
        "required": false,
        "example": "2024-05-16T04:00:00.000Z",
        "schema": {
          "$ref": "#/components/schemas/dateTime"
        }
      },
      "paymentId": {
        "in": "path",
        "name": "payment-id",
        "description": "L’identifiant unique du paiement",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "paymentMethodId": {
        "name": "payment-method-id",
        "in": "path",
        "description": "ID du mode de paiement",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "refundId": {
        "in": "path",
        "name": "refund-id",
        "description": "L’identifiant unique du remboursement",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "validationId": {
        "in": "path",
        "name": "validation-id",
        "description": "L’identifiant unique de la Validation",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "customerId": {
        "in": "path",
        "name": "customer-id",
        "description": "L’identifiant unique du client",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "authenticationId": {
        "in": "path",
        "name": "authentication-id",
        "description": "L’identifiant unique de l’authentification",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "kountInquiryId": {
        "in": "path",
        "name": "kount-inquiry-id",
        "description": "L’identifiant unique de la transaction Kount.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      }
    },
    "headers": {
      "apiVersion": {
        "description": "Version de l’API du point de terminaison.",
        "example": "2024-03-28-preview",
        "schema": {
          "type": "string"
        }
      },
      "correlationId": {
        "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4",
        "description": "Corrèle une série de requêtes au sein d’un même flux. \n\nRemarque : Cet identifiant est généré par Moneris avec chaque demande ou réponse, s’il n’existe pas, et il est recommandé au commerçant de faire écho à la valeur.  \n",
        "schema": {
          "type": "string",
          "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4"
        }
      },
      "sunset": {
        "example": "2025-07-30T06:43:40.252Z",
        "description": "Optionnel.\n\nIndique que l’URI de la ressource sera mis hors service et mis hors service à l’heure spécifiée dans le futur. \nPlus de détails sont disponibles sur [RFC 8594](https://www.rfc-editor.org/rfc/rfc8594.html)\n",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2025-07-30T06:43:40.252Z"
        }
      },
      "rateLimitCount": {
        "description": "Nombre maximal de requêtes que le client peut effectuer dans cette fenêtre.",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 1000
      },
      "rateLimitRemaining": {
        "description": "Le nombre de requêtes autorisées dans la fenêtre actuelle.",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 0
      },
      "rateLimitReset": {
        "description": "Temps relatif en secondes lorsque la fenêtre de limite de débit sera réinitialisée.",
        "schema": {
          "type": "integer",
          "format": "int32"
        },
        "example": 3600
      },
      "retryAfter": {
        "description": "Indique le temps que les clients doivent attendre avant de réessayer.",
        "schema": {
          "type": "integer",
          "format": "int32"
        },
        "example": 60
      }
    },
    "responses": {
      "listPaymentsResponse": {
        "description": "Liste de tous les paiements",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentResponseList"
            },
            "example": {
              "data": [
                {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "invoiceNumber": "1a2s3d45v6",
                  "transactionDateTime": "2019-07-30T06:43:40.252Z",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "amount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "authorizedAmount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "capturableAmount": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "amountDetails": null,
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "paymentStatus": "SUCCEEDED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "00",
                    "responseCode": "000",
                    "message": "approved",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "verificationDetails": {
                    "addressVerificationServiceResultCode": "FULL_MATCH",
                    "cardSecurityCodeResultCode": "MATCH",
                    "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                  },
                  "credentialOnFileResponse": null,
                  "refundDetails": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                },
                {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAZ",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "invoiceNumber": "1a2s3d45v6",
                  "transactionDateTime": "2019-07-30T06:43:40.252Z",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "amount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "authorizedAmount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "capturableAmount": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "amountDetails": null,
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "paymentStatus": "CANCELED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "00",
                    "responseCode": "000",
                    "message": "approved",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "verificationDetails": {
                    "addressVerificationServiceResultCode": "FULL_MATCH",
                    "cardSecurityCodeResultCode": "MATCH",
                    "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                  },
                  "credentialOnFileResponse": null,
                  "refundDetails": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                },
                {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAX",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "invoiceNumber": "1a2s3d45v6",
                  "transactionDateTime": "2019-07-30T06:43:40.252Z",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "amount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "authorizedAmount": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "capturableAmount": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "amountDetails": null,
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "paymentStatus": "DECLINED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "43",
                    "responseCode": "421",
                    "message": "Stolen card, pick up.",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "verificationDetails": {
                    "addressVerificationServiceResultCode": "FULL_MATCH",
                    "cardSecurityCodeResultCode": "MATCH",
                    "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                  },
                  "credentialOnFileResponse": null,
                  "refundDetails": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              ],
              "self": "/payments?cursor=d41d8cd98f00b&limit=50",
              "first": "/payments?cursor=d41d8cd98f00b&limit=50",
              "last": "/payments?cursor=d41d8cd98f00b&limit=50",
              "next": null,
              "previous": null
            }
          }
        }
      },
      "invalidListbadRequest": {
        "description": "Mauvaise demande.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "idempotency_error": {
                "$ref": "#/components/examples/InvalidListRequestErrorResponse"
              }
            }
          }
        }
      },
      "unauthorized": {
        "description": "Non autorisé. L’utilisateur ne dispose pas d’une clé API ou d’un jeton d’accès valide.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          },
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "example": "Bearer, error=\"invalid_token\""
            }
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "UNAUTHORIZED_REQUEST",
              "status": 401,
              "detail": null,
              "instance": null,
              "category": "UNAUTHORIZED_ERROR",
              "errors": []
            }
          }
        }
      },
      "forbidden": {
        "description": "Interdit. L’utilisateur n’est pas autorisé à accéder à la ressource demandée.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          },
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "example": "Bearer, error=\"insufficient_scope\""
            }
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "FORBIDDEN_REQUEST",
              "status": 403,
              "detail": null,
              "instance": null,
              "category": "UNAUTHORIZED_ERROR",
              "errors": []
            }
          }
        }
      },
      "tooManyRequests": {
        "description": "Trop de requêtes",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/rateLimitReset"
          },
          "Retry-After": {
            "$ref": "#/components/headers/rateLimitReset"
          }
        }
      },
      "internalServer": {
        "description": "Erreur inattendue.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "INTERNAL_SERVER_ERROR",
              "status": 500,
              "detail": null,
              "instance": null,
              "category": "INTERNAL_SERVER_ERROR",
              "errors": []
            }
          }
        }
      },
      "serviceUnavailable": {
        "description": "Service temporairement indisponible",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "Retry-After": {
            "$ref": "#/components/headers/retryAfter"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://api-developer.moneris.com/responsehandling/",
              "title": "SERVICE_UNAVAILABLE",
              "status": 503,
              "detail": null,
              "instance": null,
              "category": "INTERNAL_SERVER_ERROR",
              "errors": []
            }
          }
        }
      },
      "createPaymentSuccessResponse": {
        "description": "Opération de paiement créée avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentResponse"
            },
            "examples": {
              "PurchaseCompleted": {
                "$ref": "#/components/examples/PurchaseCompletedResponse"
              },
              "PreauthorizationCompletedResponse": {
                "$ref": "#/components/examples/PreauthorizationCompletedResponse"
              }
            }
          }
        }
      },
      "createPaymentBadRequestResponse": {
        "description": "Réponse du résultat de l’opération de paiement échoué",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "invalid_request": {
                "$ref": "#/components/examples/InvalidRequestErrorResponse"
              }
            }
          }
        }
      },
      "conflict": {
        "description": "La demande n’a pas pu être terminée en raison d’un conflit avec l’état de la ressource ou la clé d’idempotence existante.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "idempotency_error": {
                "$ref": "#/components/examples/IdempotencyRequestErrorResponse"
              }
            }
          }
        }
      },
      "createPaymentUnprocessableContentResponse": {
        "description": "Réponse du résultat de l’opération de paiement échoué",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "declined": {
                "$ref": "#/components/examples/DeclineErrorResponse"
              }
            }
          }
        }
      },
      "retrievePaymentSuccessResponse": {
        "description": "Le paiement correspondant à l''identifiant de paiement fourni.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentResponse"
            },
            "examples": {
              "succeeded": {
                "$ref": "#/components/examples/PurchaseCompletedResponse"
              },
              "authorized": {
                "$ref": "#/components/examples/PreauthorizationCompletedResponse"
              },
              "declined": {
                "$ref": "#/components/examples/PurchaseDeclinedResponse"
              },
              "declined_retry": {
                "$ref": "#/components/examples/PurchaseDeclinedRetryResponse"
              },
              "canceled": {
                "$ref": "#/components/examples/PurchaseCanceledResponse"
              }
            }
          }
        }
      },
      "notFound": {
        "description": "Introuvable.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "NOT_FOUND",
              "status": 404,
              "detail": null,
              "instance": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "category": "INVALID_REQUEST_ERROR",
              "errors": []
            }
          }
        }
      },
      "cancelPaymentSuccessResponse": {
        "description": "Le paiement a été annulé avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentResponse"
            },
            "example": {
              "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "orderId": "1q2w3e4r5t6t78",
              "invoiceNumber": "1a2s3d45v6",
              "transactionDateTime": "2019-07-30T06:43:40.252Z",
              "createdAt": "2019-07-30T06:43:40.252Z",
              "modifiedAt": "2019-07-30T06:43:40.252Z",
              "amount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "authorizedAmount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "capturableAmount": {
                "amount": 0,
                "currency": "CAD"
              },
              "amountDetails": null,
              "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "paymentMethod": {
                "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "0123456789101",
                "cardholderInformation": null,
                "contactDetails": null,
                "billingAddress": null,
                "paymentMethodInformation": {
                  "paymentMethodType": "CARD",
                  "paymentMethodSource": "CARD",
                  "cardInformation": {
                    "bankIdentificationNumber": "123456",
                    "lastFour": "1234",
                    "expiryMonth": 1,
                    "expiryYear": 2028,
                    "cardBrand": "MASTERCARD",
                    "cardType": "CREDIT",
                    "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                    "issuer": "RBC"
                  },
                  "paymentAccountReference": "11112222333344445555666677778",
                  "storePaymentMethod": "DO_NOT_STORE"
                },
                "createdAt": "2019-07-30T06:43:40.252Z",
                "modifiedAt": null,
                "customData": {
                  "property1": "string",
                  "property2": "string"
                }
              },
              "paymentStatus": "CANCELED",
              "transactionDetails": {
                "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                "isoResponseCode": "00",
                "responseCode": "000",
                "message": "approved",
                "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
              },
              "verificationDetails": {
                "addressVerificationServiceResultCode": "FULL_MATCH",
                "cardSecurityCodeResultCode": "MATCH",
                "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
              },
              "credentialOnFileResponse": null,
              "refundDetails": null,
              "customData": {
                "property1": "string",
                "property2": "string"
              }
            }
          }
        }
      },
      "badRequest": {
        "description": "Mauvaise demande.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "cancelPaymentUnprocessableContentResponse": {
        "description": "Échec de l’annulation de la réponse Résultat de l’opération de paiement",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "declined": {
                "$ref": "#/components/examples/DeclineErrorResponse"
              },
              "invalid_request": {
                "$ref": "#/components/examples/InvalidPurchaseErrorResponse"
              }
            }
          }
        }
      },
      "completePaymentSuccessResponse": {
        "description": "Le paiement s’est terminé avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentResponse"
            },
            "example": {
              "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "orderId": "1q2w3e4r5t6t78",
              "invoiceNumber": "1a2s3d45v6",
              "transactionDateTime": "2019-07-30T06:43:40.252Z",
              "createdAt": "2019-07-30T06:43:40.252Z",
              "modifiedAt": "2019-07-30T06:43:40.252Z",
              "amount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "authorizedAmount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "capturableAmount": {
                "amount": 0,
                "currency": "CAD"
              },
              "amountDetails": null,
              "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "paymentMethod": {
                "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "0123456789101",
                "cardholderInformation": null,
                "contactDetails": null,
                "billingAddress": null,
                "paymentMethodInformation": {
                  "paymentMethodType": "CARD",
                  "paymentMethodSource": "CARD",
                  "cardInformation": {
                    "bankIdentificationNumber": "123456",
                    "lastFour": "1234",
                    "expiryMonth": 1,
                    "expiryYear": 2028,
                    "cardBrand": "MASTERCARD",
                    "cardType": "CREDIT",
                    "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                    "issuer": "RBC"
                  },
                  "paymentAccountReference": "11112222333344445555666677778",
                  "storePaymentMethod": "DO_NOT_STORE"
                },
                "createdAt": "2019-07-30T06:43:40.252Z",
                "modifiedAt": null,
                "customData": {
                  "property1": "string",
                  "property2": "string"
                }
              },
              "paymentStatus": "SUCCEEDED",
              "transactionDetails": {
                "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                "isoResponseCode": "00",
                "responseCode": "000",
                "message": "approved",
                "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
              },
              "verificationDetails": {
                "addressVerificationServiceResultCode": "FULL_MATCH",
                "cardSecurityCodeResultCode": "MATCH",
                "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
              },
              "credentialOnFileResponse": null,
              "refundDetails": null,
              "customData": null
            }
          }
        }
      },
      "completePaymentBadRequestResponse": {
        "description": "Échec de l’achat",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "declined": {
                "$ref": "#/components/examples/DeclineErrorResponse"
              },
              "invalid_request": {
                "$ref": "#/components/examples/InvalidPurchaseErrorResponse"
              }
            }
          }
        }
      },
      "completePaymentUnprocessableContentResponse": {
        "description": "Réponse du résultat de l’opération de paiement échoué",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "declined": {
                "$ref": "#/components/examples/DeclineErrorResponse"
              }
            }
          }
        }
      },
      "listPaymentMethodsResponse": {
        "description": "Liste paginée des modes de paiement",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentMethodResponseList"
            },
            "example": {
              "data": [
                {
                  "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "cardholderInformation": null,
                  "contactDetails": null,
                  "billingAddress": null,
                  "paymentMethodInformation": {
                    "paymentMethodType": "CARD",
                    "paymentMethodSource": "CARD",
                    "cardInformation": {
                      "bankIdentificationNumber": "123456",
                      "lastFour": "1234",
                      "expiryMonth": 1,
                      "expiryYear": 2028,
                      "cardBrand": "MASTERCARD",
                      "cardType": "CREDIT",
                      "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                      "issuer": "RBC"
                    },
                    "paymentAccountReference": "11112222333344445555666677778",
                    "storePaymentMethod": "DO_NOT_STORE"
                  },
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                },
                {
                  "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "cardholderInformation": {
                    "cardholderName": "John Doe",
                    "companyName": "SP Ltd"
                  },
                  "contactDetails": {
                    "phoneNumber": "+18663197450",
                    "email": "moneris@moneris.com"
                  },
                  "billingAddress": {
                    "unitNumber": "123A",
                    "streetNumber": "3300",
                    "streetName": "Bloor Street West",
                    "city": "Toronto",
                    "province": "ON",
                    "postalCode": "M8X 2X2",
                    "country": "CA"
                  },
                  "paymentMethodInformation": {
                    "paymentMethodType": "CARD",
                    "paymentMethodSource": "TEMPORARY_TOKEN",
                    "cardInformation": {
                      "bankIdentificationNumber": "123456",
                      "lastFour": "1234",
                      "expiryMonth": 1,
                      "expiryYear": 2028,
                      "cardBrand": "MASTERCARD",
                      "cardType": "CREDIT",
                      "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                      "issuer": "RBC"
                    },
                    "paymentAccountReference": "11112222333344445555666677778",
                    "storePaymentMethod": "DO_NOT_STORE"
                  },
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              ],
              "self": "/payment-methods?cursor=d41d8cd98f00b&limit=50",
              "first": "/payment-methods?cursor=d41d8cd98f00b&limit=50",
              "last": "/payment-methods?cursor=d41d8cd98f00b&limit=50",
              "next": null,
              "previous": null
            }
          }
        }
      },
      "createPaymentMethodSuccessResponse": {
        "description": "Mode de paiement créé avec succès.  Le contenu de la réponse contient le mode de paiement créé.\n",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentMethodResponse"
            },
            "example": {
              "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "cardholderInformation": {
                "cardholderName": "John Doe",
                "companyName": "SP Ltd"
              },
              "contactDetails": {
                "phoneNumber": "+18663197450",
                "email": "moneris@moneris.com"
              },
              "billingAddress": {
                "unitNumber": "123A",
                "streetNumber": "3300",
                "streetName": "Bloor Street West",
                "city": "Toronto",
                "province": "ON",
                "postalCode": "M8X 2X2",
                "country": "CA"
              },
              "paymentMethodInformation": {
                "paymentMethodType": "CARD",
                "paymentMethodSource": "CARD",
                "cardInformation": {
                  "bankIdentificationNumber": "123456",
                  "lastFour": "1234",
                  "expiryMonth": 1,
                  "expiryYear": 2028,
                  "cardBrand": "MASTERCARD",
                  "cardType": "CREDIT",
                  "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                  "issuer": "RBC"
                },
                "paymentAccountReference": "11112222333344445555666677778",
                "storePaymentMethod": "DO_NOT_STORE"
              },
              "createdAt": "2019-07-30T06:43:40.252Z",
              "modifiedAt": "2019-07-30T06:43:40.252Z",
              "customData": {
                "property1": "string",
                "property2": "string"
              }
            }
          }
        }
      },
      "unprocessableContent": {
        "description": "L’API ne peut pas effectuer l’action demandée en raison d’erreurs sémantiques ou de validation métier. \n",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "retrievePaymentMethodSuccessResponse": {
        "description": "Mode de paiement trouvé et renvoyé dans la réponse.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentMethodResponse"
            },
            "example": {
              "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "cardholderInformation": {
                "cardholderName": "John Doe",
                "companyName": "SP Ltd"
              },
              "contactDetails": {
                "phoneNumber": "+18663197450",
                "email": "moneris@moneris.com"
              },
              "billingAddress": {
                "unitNumber": "123A",
                "streetNumber": "3300",
                "streetName": "Bloor Street West",
                "city": "Toronto",
                "province": "ON",
                "postalCode": "M8X 2X2",
                "country": "CA"
              },
              "paymentMethodInformation": {
                "paymentMethodType": "CARD",
                "paymentMethodSource": "CARD",
                "cardInformation": {
                  "bankIdentificationNumber": "123456",
                  "lastFour": "1234",
                  "expiryMonth": 1,
                  "expiryYear": 2028,
                  "cardBrand": "MASTERCARD",
                  "cardType": "CREDIT",
                  "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                  "issuer": "RBC"
                },
                "paymentAccountReference": "11112222333344445555666677778",
                "storePaymentMethod": "DO_NOT_STORE"
              },
              "createdAt": "2019-07-30T06:43:40.252Z",
              "modifiedAt": "2019-07-30T06:43:40.252Z",
              "customData": {
                "property1": "string",
                "property2": "string"
              }
            }
          }
        }
      },
      "paymentMethodNotFoundResponse": {
        "description": "Mode de paiement introuvable.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "NOT_FOUND",
              "status": 404,
              "detail": null,
              "instance": "/payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "category": "INVALID_REQUEST_ERROR",
              "errors": []
            }
          }
        }
      },
      "paymentMethodUpdateSuccessResponse": {
        "description": "Mode de paiement mis à jour avec succès",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentMethodResponse"
            },
            "example": {
              "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "cardholderInformation": {
                "cardholderName": "John Doe",
                "companyName": "SP Ltd"
              },
              "contactDetails": {
                "phoneNumber": "+18663197450",
                "email": "moneris@moneris.com"
              },
              "billingAddress": {
                "unitNumber": "123A",
                "streetNumber": "3300",
                "streetName": "Bloor Street West",
                "city": "Toronto",
                "province": "ON",
                "postalCode": "M8X 2X2",
                "country": "CA"
              },
              "paymentMethodInformation": {
                "paymentMethodType": "CARD",
                "paymentMethodSource": "CARD",
                "cardInformation": {
                  "bankIdentificationNumber": "123456",
                  "lastFour": "1234",
                  "expiryMonth": 1,
                  "expiryYear": 2028,
                  "cardBrand": "MASTERCARD",
                  "cardType": "CREDIT",
                  "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                  "issuer": "RBC"
                },
                "paymentAccountReference": "11112222333344445555666677778",
                "storePaymentMethod": "DO_NOT_STORE"
              },
              "createdAt": "2019-07-30T06:43:40.252Z",
              "modifiedAt": "2019-07-30T06:43:40.252Z",
              "customData": {
                "property1": "string",
                "property2": "string"
              }
            }
          }
        }
      },
      "concurrencyConflict": {
        "description": "La demande n’a pas pu être traitée en raison d’un problème d’accès simultané.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "concurrency_error": {
                "$ref": "#/components/examples/concurrentRequestErrorResponse"
              }
            }
          }
        }
      },
      "paymentMethodDeleteSuccessResponse": {
        "description": "Mode de paiement supprimé avec succès. \nLe contenu de la réponse contient les détails du mode de paiement.\n",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        }
      },
      "listRefundsSuccessResponse": {
        "description": "Liste de remboursement retournée avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/refundResponseList"
            },
            "example": {
              "data": [
                {
                  "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "payment": {
                    "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
                  },
                  "merchantId": "0123456789101",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "refundAmount": {
                    "amount": 1600,
                    "currency": "CAD"
                  },
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "refundStatus": "SUCCEEDED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "00",
                    "responseCode": "000",
                    "message": "SUCCESS",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "reason": "Defective product",
                  "credentialOnFileResponse": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                },
                {
                  "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "payment": {
                    "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
                  },
                  "merchantId": "0123456789101",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "refundAmount": {
                    "amount": 1600,
                    "currency": "CAD"
                  },
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "refundStatus": "DECLINED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "51",
                    "responseCode": "054",
                    "message": "Expired Card",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "reason": "Defective product",
                  "credentialOnFileResponse": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              ],
              "self": "/refunds?cursor=d41d8cd98f00b&limit=50",
              "first": "/refunds?cursor=d41d8cd98f00b&limit=50",
              "last": "/refunds?cursor=d41d8cd98f00b&limit=50",
              "next": null,
              "previous": null
            }
          }
        }
      },
      "createRefundSuccessResponse": {
        "description": "Réponse du résultat de l’opération de remboursement",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/refundResponse"
            },
            "example": {
              "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "payment": {
                "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "merchantId": "0123456789101",
              "paymentMethod": {
                "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "0123456789101",
                "cardholderInformation": null,
                "contactDetails": null,
                "billingAddress": null,
                "paymentMethodInformation": {
                  "paymentMethodType": "CARD",
                  "paymentMethodSource": "CARD",
                  "cardInformation": {
                    "bankIdentificationNumber": "123456",
                    "lastFour": "1234",
                    "expiryMonth": 1,
                    "expiryYear": 2028,
                    "cardBrand": "MASTERCARD",
                    "cardType": "CREDIT",
                    "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                    "issuer": "RBC"
                  },
                  "paymentAccountReference": "11112222333344445555666677778",
                  "storePaymentMethod": "DO_NOT_STORE"
                },
                "createdAt": "2019-07-30T06:43:40.252Z",
                "modifiedAt": null,
                "customData": {
                  "property1": "string",
                  "property2": "string"
                }
              },
              "createdAt": "2019-07-30T06:43:40.252Z",
              "modifiedAt": "2019-07-30T06:43:40.252Z",
              "refundAmount": {
                "amount": 1600,
                "currency": "CAD"
              },
              "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "refundStatus": "SUCCEEDED",
              "transactionDetails": {
                "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                "isoResponseCode": "00",
                "responseCode": "000",
                "message": "SUCCESS",
                "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
              },
              "reason": "Defective product",
              "credentialOnFileResponse": null,
              "customData": {
                "property1": "string",
                "property2": "string"
              }
            }
          }
        }
      },
      "createRefundBadRequestResponse": {
        "description": "Demande de remboursement invalide",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "invalid_request": {
                "$ref": "#/components/examples/InvalidRefundErrorResponse"
              }
            }
          }
        }
      },
      "createRefundDeclinedResponse": {
        "description": "Opération de remboursement refusée",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "declined": {
                "$ref": "#/components/examples/exp-refundResponse_DeclineErrorResponse"
              }
            }
          }
        }
      },
      "retrieveRefundSuccessResponse": {
        "description": "Vous avez réussi à récupérer le remboursement correspondant à l’identifiant de remboursement fourni.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/refundResponse"
            },
            "examples": {
              "succeeded": {
                "$ref": "#/components/examples/SucceededRefundResponse"
              },
              "declined": {
                "$ref": "#/components/examples/DeclinedRefundResponse"
              }
            }
          }
        }
      },
      "refundNotFoundResponse": {
        "description": "Remboursement introuvable.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "NOT_FOUND",
              "status": 404,
              "detail": null,
              "instance": "/refunds/ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "category": "INVALID_REQUEST_ERROR",
              "errors": []
            }
          }
        }
      },
      "listValidationsSuccessResponse": {
        "description": "Liste des validations de cartes",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/validationsResponseList"
            },
            "example": {
              "data": [
                {
                  "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": null,
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": {
                      "cardholderName": "John Doe",
                      "companyName": "SP Ltd"
                    },
                    "contactDetails": {
                      "phoneNumber": "+18663197450",
                      "email": "moneris@moneris.com"
                    },
                    "billingAddress": {
                      "unitNumber": "123A",
                      "streetNumber": "3300",
                      "streetName": "Bloor Street West",
                      "city": "Toronto",
                      "province": "ON",
                      "postalCode": "M8X 2X2",
                      "country": "CA"
                    },
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": "2019-07-30T06:43:40.252Z",
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "validationStatus": "SUCCEEDED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "00",
                    "responseCode": "000",
                    "message": "approved",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "verificationDetails": {
                    "addressVerificationServiceResultCode": "FULL_MATCH",
                    "cardSecurityCodeResultCode": "MATCH"
                  },
                  "credentialOnFileResponse": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                },
                {
                  "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAX",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": null,
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": {
                      "cardholderName": "John Doe",
                      "companyName": "SP Ltd"
                    },
                    "contactDetails": {
                      "phoneNumber": "+18663197450",
                      "email": "moneris@moneris.com"
                    },
                    "billingAddress": {
                      "unitNumber": "123A",
                      "streetNumber": "3300",
                      "streetName": "Bloor Street West",
                      "city": "Toronto",
                      "province": "ON",
                      "postalCode": "M8X 2X2",
                      "country": "CA"
                    },
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": "2019-07-30T06:43:40.252Z",
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "validationStatus": "DECLINED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "43",
                    "responseCode": "421",
                    "message": "Stolen card, pick up.",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "verificationDetails": {
                    "addressVerificationServiceResultCode": "FULL_MATCH",
                    "cardSecurityCodeResultCode": "MATCH"
                  },
                  "credentialOnFileResponse": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              ],
              "self": "/validations?cursor=d41d8cd98f00b&limit=50",
              "first": "/validations?cursor=d41d8cd98f00b&limit=50",
              "last": "/validations?cursor=d41d8cd98f00b&limit=50",
              "next": null,
              "previous": null
            }
          }
        }
      },
      "retrieveValidationSuccessResponse": {
        "description": "Validation de carte récupérée avec succès",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/validationResponse"
            },
            "examples": {
              "succeeded": {
                "$ref": "#/components/examples/ValidationSucceededResponse"
              },
              "declined": {
                "$ref": "#/components/examples/ValidationDeclinedRetryResponse"
              },
              "declined_retry": {
                "$ref": "#/components/examples/ValidationDeclinedResponse"
              }
            }
          }
        }
      },
      "validationNotFoundResponse": {
        "description": "Validation de la carte introuvable",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "NOT_FOUND",
              "status": 404,
              "detail": null,
              "instance": "/validations/vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "category": "INVALID_REQUEST_ERROR",
              "errors": []
            }
          }
        }
      },
      "listCustomersSuccessResponse": {
        "description": "Liste de tous les clients",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/customerResponseList"
            }
          }
        }
      },
      "createCustomerSuccessResponse": {
        "description": "Réponse du résultat de l’opération client",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/customerResponse"
            }
          }
        }
      },
      "retrieveCustomerSuccessResponse": {
        "description": "Le client correspondant au 'customerId' fourni",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/customerResponse"
            }
          }
        }
      },
      "customerNotFoundResponse": {
        "description": "Client introuvable",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "NOT_FOUND",
              "status": 404,
              "detail": null,
              "instance": "/customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "category": "INVALID_REQUEST_ERROR",
              "errors": []
            }
          }
        }
      },
      "customerUpdateSuccessResponse": {
        "description": "Le client a mis à jour avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/customerResponse"
            }
          }
        }
      },
      "customerDeleteSuccessResponse": {
        "description": "Le client a été supprimé avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        }
      },
      "createThreeDSecureAuthenticationSuccessResponse": {
        "description": "L’authentification 3DS Secure a été créée et exécutée avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/authenticationResponse"
            }
          }
        }
      },
      "createThreeDSecureAuthenticationChallengeResponse": {
        "description": "L’opération d’authentification MPI s’est avérée problématique.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/authenticationResponse"
            }
          }
        }
      },
      "retrieveThreeDSecureAuthenticationSuccessResponse": {
        "description": "L’authentification correspondant à l''authentication-id fourni.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/authenticationResponse"
            }
          }
        }
      },
      "threeDSecureAuthenticationLookupSuccessResponse": {
        "description": "L’opération d’authentification MPI a été authentifiée avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/authenticationResponse"
            }
          }
        }
      },
      "createThreeDSecureCardLookupSuccessResponse": {
        "description": "Opération de recherche de carte 3D-Secure créée avec succès",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/cardLookupResponse"
            }
          }
        }
      },
      "listKountInquiriesSuccessResponse": {
        "description": "Réponse du résultat de l’opération d’enquête Kount",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/kountInquiryList"
            }
          }
        }
      },
      "createKountInquirySuccessResponse": {
        "description": "L’enquête Kount a été approuvée avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/kountResponse"
            }
          }
        }
      },
      "createKountInquiryAcceptedResponse": {
        "description": "L’enquête Kount a été acceptée et est en cours d’examen.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/kountResponse"
            }
          }
        }
      },
      "retrieveKountInquiryResponse": {
        "description": "Réponse du résultat de l’opération d’acquisition de L’enquête Kount",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/kountResponse"
            }
          }
        }
      },
      "assertKountInquirySuccessResponse": {
        "description": "Réponse du résultat de l’opération d'affirmation de L’enquête Kount",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/kountResponse"
            }
          }
        }
      },
      "assertKountInquiryAcceptedResponse": {
        "description": "L’enquête Kount a été mise à jour et est en cours d’examen.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/kountResponse"
            }
          }
        }
      }
    },
    "examples": {
      "InvalidListRequestErrorResponse": {
        "summary": "Invalid query parameter",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_QUERY_PARAMETER",
          "status": 400,
          "detail": null,
          "instance": null,
          "category": "INVALID_REQUEST_ERROR",
          "errors": [
            {
              "parameterName": "created_from",
              "parameterValue": "2019/07/30",
              "reasonCode": "INVALID_FORMAT"
            }
          ]
        }
      },
      "regularPurchaseWithPaymentMethodId": {
        "summary": "Regular Purchase With Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "PAYMENT_METHOD_ID",
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "storePaymentMethod": "DO_NOT_STORE"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithCardPaymentMethod": {
        "summary": "Regular Purchase With Payment Method Details",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "CARD",
            "card": {
              "cardNumber": "4242424242424242",
              "expiryMonth": 1,
              "expiryYear": 2028,
              "cardSecurityCode": "123"
            },
            "storePaymentMethod": "DO_NOT_STORE"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithTemporaryPaymentMethod": {
        "summary": "Regular Purchase With Temporary Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "TEMPORARY_TOKEN",
            "temporaryToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithPermanentPaymentMethod": {
        "summary": "Regular Purchase With Permanent Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "PERMANENT_TOKEN",
            "permanentToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
            "credentialOnFileInformation": {
              "paymentIndicator": "UNSCHEDULED_CREDENTIAL_ON_FILE",
              "paymentInformation": "FIRST"
            }
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithApplePayEncryptedPaymentMethod": {
        "summary": "Regular Purchase With Apple Pay Encrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "APPLE_PAY_ENCRYPTED",
            "displayName": "MasterCard 4079",
            "cardBrand": "MASTERCARD",
            "applePayVersion": "EC_V1",
            "data": "ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh",
            "signature": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "publicKeyHash": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "ephemeralPublicKey": "ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh",
            "applePayTransactionId": "22iWw1ySnzwiav6ToJ7KOhkY49",
            "walletIndicator": "IN_BROWSER"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithApplePayDecryptedPaymentMethod": {
        "summary": "Regular Purchase With Apple Pay Decrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "APPLE_PAY_DECRYPTED",
            "applicationPrimaryAccountNumber": "4242424242424242",
            "expiryMonth": 1,
            "expiryYear": 2028,
            "deviceManufacturerIdentifier": "r7tBjIbr4eaTCgs8bkU0w7hB7s",
            "dataType": "THREE_D_SECURE",
            "cryptogram": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "walletEcommerceIndicator": "07",
            "cardBrand": "VISA",
            "walletIndicator": "IN_APPLICATION"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithGooglePayEncryptedPaymentMethod": {
        "summary": "Regular Purchase With Google Pay Encrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "GOOGLE_PAY_ENCRYPTED",
            "cardBrand": "MASTERCARD",
            "googlePayProtocolVersion": "EC_V1",
            "signedMessage": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "signature": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "walletIndicator": "IN_BROWSER"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithGooglePayDecryptedPaymentMethod": {
        "summary": "Regular Purchase With Google Pay Decrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "GOOGLE_PAY_DECRYPTED",
            "cardBrand": "VISA",
            "cardDetails": {
              "personalAccountNumber": "4242424242424242",
              "expiryMonth": 1,
              "expiryYear": 2028,
              "authenticationMethod": "CRYPTOGRAM_3DS",
              "cryptogram": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
              "walletEcommerceIndicator": "07"
            },
            "walletIndicator": "IN_BROWSER",
            "walletSource": "CARD"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "preAuthorizationWithPaymentMethodId": {
        "summary": "Pre-Authorization With Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "PAYMENT_METHOD_ID",
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": false,
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "preAuthorizationWithCardPaymentMethod": {
        "summary": "Pre-Authorization With Card Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "CARD",
            "card": {
              "cardNumber": "4242424242424242",
              "expiryMonth": 1,
              "expiryYear": 2028,
              "cardSecurityCode": "123"
            },
            "storePaymentMethod": "DO_NOT_STORE"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": false,
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "preAuthorizationWithTemporaryToken": {
        "summary": "Pre-Authorization With Temporary Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "TEMPORARY_TOKEN",
            "temporaryToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": false,
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "preAuthorizationWithPermanentToken": {
        "summary": "Pre-Authorization With Permanent Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "PERMANENT_TOKEN",
            "permanentToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
            "credentialOnFileInformation": {
              "paymentIndicator": "UNSCHEDULED_CREDENTIAL_ON_FILE",
              "paymentInformation": "FIRST"
            }
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": false,
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "PurchaseCompletedResponse": {
        "summary": "Successful Purchase",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "SUCCEEDED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "00",
            "responseCode": "000",
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "credentialOnFileResponse": null,
          "refundDetails": null,
          "customData": null
        }
      },
      "PreauthorizationCompletedResponse": {
        "summary": "Successful Pre-Authorization",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "amountDetails": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "AUTHORIZED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "27",
            "responseCode": "000",
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "credentialOnFileResponse": null,
          "refundDetails": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "InvalidRequestErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_ADDRESS",
          "status": 400,
          "detail": null,
          "instance": null,
          "category": "INVALID_REQUEST_ERROR",
          "errors": [
            {
              "reasonCode": "INVALID_FORMAT",
              "parameterName": "address.postalCode",
              "parameterValue": "MAP3J8"
            }
          ]
        }
      },
      "IdempotencyRequestErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "IDEMPOTENCY_KEY_ALREADY_EXISTS",
          "status": 409,
          "detail": null,
          "instance": null,
          "category": "IDEMPOTENCY_ERROR",
          "errors": []
        }
      },
      "DeclineErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "EXCESS PIN TRIES",
          "status": 400,
          "detail": "052-38 - PIN retries exceeded",
          "instance": "/payments/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "DECLINED_ERROR",
          "errors": []
        }
      },
      "PurchaseDeclinedResponse": {
        "summary": "Purchase Declined",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "DECLINED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "43",
            "responseCode": "421",
            "message": "Stolen card, pick up.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "credentialOnFileResponse": null,
          "refundDetails": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "PurchaseDeclinedRetryResponse": {
        "summary": "Purchase Declined with Retry",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "DECLINED_RETRY",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "79",
            "responseCode": "416",
            "message": "Life cycle declines.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "credentialOnFileResponse": null,
          "refundDetails": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "PurchaseCanceledResponse": {
        "summary": "Purchase Canceled",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "CANCELED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "00",
            "responseCode": "000",
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "credentialOnFileResponse": null,
          "refundDetails": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "InvalidPurchaseErrorResponse": {
        "summary": "Purchase already completed",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_STATE",
          "status": 400,
          "detail": "Invalid purchase state",
          "instance": "/payments/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "INVALID_REQUEST_ERROR"
        }
      },
      "cardPaymentMethodRequest": {
        "summary": "Card Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "cardholderInformation": {
            "cardholderName": "John Doe",
            "companyName": "SP Ltd"
          },
          "contactDetails": {
            "phoneNumber": "+18663197450",
            "email": "moneris@moneris.com"
          },
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor Street West",
            "city": "Toronto",
            "province": "ON",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethodSource": "CARD",
          "card": {
            "cardNumber": "4242424242424242",
            "expiryMonth": 1,
            "expiryYear": 2028,
            "cardSecurityCode": "123"
          },
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "temporaryTokenPaymentMethodRequest": {
        "summary": "Temporary Token Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentMethodSource": "TEMPORARY_TOKEN",
          "temporaryToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "permanentTokenPaymentMethodRequest": {
        "summary": "Permanent Token Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentMethodSource": "PERMANENT_TOKEN",
          "permanentToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "applePayEncryptedPaymentMethodRequest": {
        "summary": "Apple Pay Encrypted Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentMethodSource": "APPLE_PAY_ENCRYPTED",
          "displayName": "MasterCard 4079",
          "cardBrand": "MASTERCARD",
          "applePayVersion": "EC_V1",
          "data": "ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh",
          "signature": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
          "publicKeyHash": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
          "ephemeralPublicKey": "ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh",
          "applePayTransactionId": "22iWw1ySnzwiav6ToJ7KOhkY49",
          "walletIndicator": "IN_BROWSER",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "applePayDecryptedPaymentMethodRequest": {
        "summary": "Apple Pay Decrypted Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentMethodSource": "APPLE_PAY_DECRYPTED",
          "applicationPrimaryAccountNumber": "4242424242424242",
          "expiryMonth": 1,
          "expiryYear": 2028,
          "deviceManufacturerIdentifier": "r7tBjIbr4eaTCgs8bkU0w7hB7s",
          "dataType": "THREE_D_SECURE",
          "cryptogram": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
          "walletEcommerceIndicator": "07",
          "cardBrand": "VISA",
          "walletIndicator": "IN_APPLICATION",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "googlePayEncryptedPaymentMethodRequest": {
        "summary": "Google Pay Encrypted Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentMethodSource": "GOOGLE_PAY_ENCRYPTED",
          "cardBrand": "MASTERCARD",
          "googlePayProtocolVersion": "EC_V1",
          "signedMessage": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
          "signature": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
          "walletIndicator": "IN_BROWSER",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "googlePayDecryptedPaymentMethodRequest": {
        "summary": "Google Pay Decrypted Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentMethodSource": "GOOGLE_PAY_DECRYPTED",
          "cardBrand": "VISA",
          "cardDetails": {
            "personalAccountNumber": "4242424242424242",
            "expiryMonth": 1,
            "expiryYear": 2028,
            "authenticationMethod": "CRYPTOGRAM_3DS",
            "cryptogram": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "walletEcommerceIndicator": "07"
          },
          "walletIndicator": "IN_BROWSER",
          "walletSource": "CARD",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "updateCardPaymentMethodRequest": {
        "summary": "Card Payment Method request",
        "value": {
          "cardholderInformation": {
            "cardholderName": "John Doe",
            "companyName": "SP Ltd"
          },
          "contactDetails": {
            "phoneNumber": "+18663197450",
            "email": "moneris@moneris.com"
          },
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor Street West",
            "city": "Toronto",
            "province": "ON",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethodSource": "CARD",
          "card": {
            "cardNumber": "4242424242424242",
            "expiryMonth": 1,
            "expiryYear": 2028,
            "cardSecurityCode": "123"
          },
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "updateTemporaryTokenPaymentMethodRequest": {
        "summary": "Temporary Token Payment Method request",
        "value": {
          "paymentMethodSource": "TEMPORARY_TOKEN",
          "temporaryToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "updatePermanentTokenPaymentMethodRequest": {
        "summary": "Permanent Token Payment Method request",
        "value": {
          "paymentMethodSource": "PERMANENT_TOKEN",
          "permanentToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "concurrentRequestErrorResponse": {
        "summary": "Concurrent Access Error",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "CONCURRENCY_ERROR",
          "status": 409,
          "detail": null,
          "instance": null,
          "category": "API_ERROR",
          "errors": []
        }
      },
      "matchingRefundRequest": {
        "summary": "Matching Refund",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "refundAmount": {
            "amount": 1600,
            "currency": "CAD"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "104.75.173.179",
          "ipv6": "2600:1401:2::8a",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "reason": "Defective product",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "InvalidRefundErrorResponse": {
        "summary": "Invalid Matching Refund",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_PAYMENT",
          "status": 400,
          "detail": "Invalid payment Id or payment Id not found",
          "instance": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "category": "INVALID_REQUEST_ERROR"
        }
      },
      "exp-refundResponse_DeclineErrorResponse": {
        "summary": "Refund declined",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "EXPIRED CARD",
          "status": 400,
          "detail": "051-54 - Expired Card",
          "instance": "/refunds/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "DECLINED_ERROR",
          "errors": []
        }
      },
      "SucceededRefundResponse": {
        "summary": "Refund succeeded",
        "value": {
          "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "payment": {
            "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": "0123456789101",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "refundAmount": {
            "amount": 1600,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "refundStatus": "SUCCEEDED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "00",
            "responseCode": "000",
            "message": "SUCCESS",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "reason": "Defective product",
          "credentialOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "DeclinedRefundResponse": {
        "summary": "Refund succeeded",
        "value": {
          "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "payment": {
            "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": "0123456789101",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "refundAmount": {
            "amount": 1600,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "refundStatus": "DECLINED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "51",
            "responseCode": "054",
            "message": "Expired Card",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "reason": "Defective product",
          "credentialOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "validationWithPaymentMethodId": {
        "summary": "Validation With Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "PAYMENT_METHOD_ID",
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "storePaymentMethod": "DO_NOT_STORE"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithCardPaymentMethod": {
        "summary": "Validation With Payment Method Details",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "CARD",
            "card": {
              "cardNumber": "4242424242424242",
              "expiryMonth": 1,
              "expiryYear": 2028,
              "cardSecurityCode": "123"
            },
            "storePaymentMethod": "DO_NOT_STORE"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithTemporaryTokenPaymentMethod": {
        "summary": "Validation With Temporary Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "TEMPORARY_TOKEN",
            "temporaryToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
            "credentialOnFileInformation": {
              "paymentIndicator": "CUSTOMER_INITIATED",
              "paymentInformation": "FIRST",
              "issuerId": "123asd"
            }
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithPermanentTokenPaymentMethod": {
        "summary": "Validation With Permanent Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "PERMANENT_TOKEN",
            "permanentToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
            "credentialOnFileInformation": {
              "paymentIndicator": "UNSCHEDULED_CREDENTIAL_ON_FILE",
              "paymentInformation": "FIRST",
              "issuerId": null
            }
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithApplePayEncryptedPaymentMethod": {
        "summary": "Validation With Apple Pay Encrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "APPLE_PAY_ENCRYPTED",
            "displayName": "MasterCard 4079",
            "cardBrand": "MASTERCARD",
            "applePayVersion": "EC_V1",
            "data": "ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh",
            "signature": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "publicKeyHash": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "ephemeralPublicKey": "ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh",
            "applePayTransactionId": "22iWw1ySnzwiav6ToJ7KOhkY49",
            "walletIndicator": "IN_BROWSER"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithApplePayDecryptedPaymentMethod": {
        "summary": "Validation With Apple Pay Decrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "APPLE_PAY_DECRYPTED",
            "applicationPrimaryAccountNumber": "4242424242424242",
            "expiryMonth": 1,
            "expiryYear": 2028,
            "deviceManufacturerIdentifier": "r7tBjIbr4eaTCgs8bkU0w7hB7s",
            "dataType": "THREE_D_SECURE",
            "cryptogram": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "walletEcommerceIndicator": "07",
            "cardBrand": "VISA",
            "walletIndicator": "IN_APPLICATION"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithGooglePayEncryptedPaymentMethod": {
        "summary": "Validation With Google Pay Encrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "GOOGLE_PAY_ENCRYPTED",
            "cardBrand": "MASTERCARD",
            "googlePayProtocolVersion": "EC_V1",
            "signedMessage": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "signature": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "walletIndicator": "IN_BROWSER"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithGooglePayDecryptedPaymentMethod": {
        "summary": "Validation With Google Pay Decrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "GOOGLE_PAY_DECRYPTED",
            "cardBrand": "VISA",
            "cardDetails": {
              "personalAccountNumber": "4242424242424242",
              "expiryMonth": 1,
              "expiryYear": 2028,
              "authenticationMethod": "CRYPTOGRAM_3DS",
              "cryptogram": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
              "walletEcommerceIndicator": "07"
            },
            "walletIndicator": "IN_BROWSER",
            "walletSource": "CARD"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "exp-validationResponse_DeclineErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "EXCESS PIN TRIES",
          "status": 400,
          "detail": "052-38 - PIN retries exceeded",
          "instance": "/validations/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "DECLINED_ERROR",
          "errors": []
        }
      },
      "ValidationSucceededResponse": {
        "summary": "Successful Validation",
        "value": {
          "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": {
              "phoneNumber": "+18663197450",
              "email": "moneris@moneris.com"
            },
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": "2019-07-30T06:43:40.252Z",
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "validationStatus": "SUCCEEDED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "00",
            "responseCode": "000",
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH"
          },
          "credentialOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "ValidationDeclinedRetryResponse": {
        "summary": "Validation Declined with Retry",
        "value": {
          "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": {
              "phoneNumber": "+18663197450",
              "email": "moneris@moneris.com"
            },
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": "2019-07-30T06:43:40.252Z",
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "validationStatus": "DECLINED_RETRY",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "79",
            "responseCode": "416",
            "message": "Life cycle declines.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH"
          },
          "credentialOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "ValidationDeclinedResponse": {
        "summary": "Validation Declined",
        "value": {
          "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": {
              "phoneNumber": "+18663197450",
              "email": "moneris@moneris.com"
            },
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": "2019-07-30T06:43:40.252Z",
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "validationStatus": "DECLINED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "43",
            "responseCode": "421",
            "message": "Stolen card, pick up.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH"
          },
          "credentialOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "threeDSecureBrowserChannelWithPaymentMethodId": {
        "summary": "3D-Secure Browser channel, with Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "browserIpAddress": "104.75.173.179",
          "browserScreenHeight": 1080,
          "browserScreenWidth": 1920,
          "cardholderEmail": "moneris@moneris.com",
          "cardholderName": "John Doe",
          "cardholderPhoneNumber": "+18663197450",
          "threeDSecureDeviceChannel": "BROWSER",
          "threeDSecureMessageCategory": "PAYMENT",
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor",
            "city": "Toronto",
            "province": "ON",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethod": {
            "paymentMethodSource": "PAYMENT_METHOD_ID",
            "paymentMethodId": "pm0001J7HZZHPB20VCHWN8PEEPXZYH"
          },
          "threeDSecureRequestType": "CARDHOLDER",
          "threeDSecureNotificationUrl": "https%3A%2F%2Fputsreq.com%2FnMhp2fzHDgfzSs4GiNTD",
          "threeDSecureCompletionIndicator": "SUCCESS",
          "threeDSecureChallengeWindowSize": "FULL_SCREEN",
          "browserUserAgent": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})",
          "browserJavaEnabled": true,
          "browserJavascriptEnabled": true,
          "browserLanguage": "en"
        }
      },
      "threeDSecureBrowserChannelWithCardPaymentMethod": {
        "summary": "3D-Secure Browser channel, with Card Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "browserIpAddress": "104.75.173.179",
          "browserScreenHeight": 1080,
          "browserScreenWidth": 1920,
          "cardholderEmail": "moneris@moneris.com",
          "cardholderName": "John Doe",
          "cardholderPhoneNumber": "+18663197450",
          "threeDSecureDeviceChannel": "BROWSER",
          "threeDSecureMessageCategory": "PAYMENT",
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor",
            "city": "Toronto",
            "province": "ON",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethod": {
            "paymentMethodSource": "CARD",
            "card": {
              "cardNumber": "4365729291041247",
              "expiryMonth": 1,
              "expiryYear": 2028,
              "cardSecurityCode": "123"
            }
          },
          "threeDSecureRequestType": "CARDHOLDER",
          "threeDSecureNotificationUrl": "https%3A%2F%2Fputsreq.com%2FnMhp2fzHDgfzSs4GiNTD",
          "threeDSecureCompletionIndicator": "SUCCESS",
          "threeDSecureChallengeWindowSize": "FULL_SCREEN",
          "browserUserAgent": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})",
          "browserJavaEnabled": true,
          "browserJavascriptEnabled": true,
          "browserLanguage": "en"
        }
      },
      "threeDSecureBrowserChannelWithTemporaryToken": {
        "summary": "3D-Secure Browser channel, with Temporary Token",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "browserIpAddress": "104.75.173.179",
          "browserScreenHeight": 1080,
          "browserScreenWidth": 1920,
          "cardholderEmail": "moneris@moneris.com",
          "cardholderName": "John Doe",
          "cardholderPhoneNumber": "+18663197450",
          "threeDSecureDeviceChannel": "BROWSER",
          "threeDSecureMessageCategory": "PAYMENT",
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor",
            "city": "Toronto",
            "province": "ON",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethod": {
            "paymentMethodSource": "TEMPORARY_TOKEN",
            "temporaryToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2"
          },
          "threeDSecureRequestType": "CARDHOLDER",
          "threeDSecureNotificationUrl": "https%3A%2F%2Fputsreq.com%2FnMhp2fzHDgfzSs4GiNTD",
          "threeDSecureCompletionIndicator": "SUCCESS",
          "threeDSecureChallengeWindowSize": "FULL_SCREEN",
          "browserUserAgent": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})",
          "browserJavaEnabled": true,
          "browserJavascriptEnabled": true,
          "browserLanguage": "en"
        }
      },
      "threeDSecureBrowserChannelWithPermanentToken": {
        "summary": "3D-Secure Browser channel, with Permanent Token",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "browserIpAddress": "104.75.173.179",
          "browserScreenHeight": 1080,
          "browserScreenWidth": 1920,
          "cardholderEmail": "moneris@moneris.com",
          "cardholderName": "John Doe",
          "cardholderPhoneNumber": "+18663197450",
          "threeDSecureDeviceChannel": "BROWSER",
          "threeDSecureMessageCategory": "PAYMENT",
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor",
            "city": "Toronto",
            "province": "ON",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethod": {
            "paymentMethodSource": "PERMANENT_TOKEN",
            "permanentToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2"
          },
          "threeDSecureRequestType": "CARDHOLDER",
          "threeDSecureNotificationUrl": "https%3A%2F%2Fputsreq.com%2FnMhp2fzHDgfzSs4GiNTD",
          "threeDSecureCompletionIndicator": "SUCCESS",
          "threeDSecureChallengeWindowSize": "FULL_SCREEN",
          "browserUserAgent": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})",
          "browserJavaEnabled": true,
          "browserJavascriptEnabled": true,
          "browserLanguage": "en"
        }
      }
    }
  }
}