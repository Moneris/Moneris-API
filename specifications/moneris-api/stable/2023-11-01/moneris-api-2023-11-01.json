{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.1",
    "title": "Moneris API",
    "x-i18n-title-fr": "API de Moneris",
    "description": "Moneris API Platform\n\n[<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height:32px;\">](https://god.gw.postman.com/run-collection/25575461-ab82f3e6-bc3e-471e-bbf5-3875f1616ef9?action=collection%2Ffork&collection-url=entityId%3D25575461-ab82f3e6-bc3e-471e-bbf5-3875f1616ef9%26entityType%3Dcollection%26workspaceId%3D5d2a9a0f-57a7-441c-b2af-fe6315e80a08)\n",
    "x-i18n-description-fr": "Plateforme des API de Moneris\n\n[<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height:32px;\">](https://god.gw.postman.com/run-collection/25575461-ab82f3e6-bc3e-471e-bbf5-3875f1616ef9?action=collection%2Ffork&collection-url=entityId%3D25575461-ab82f3e6-bc3e-471e-bbf5-3875f1616ef9%26entityType%3Dcollection%26workspaceId%3D5d2a9a0f-57a7-441c-b2af-fe6315e80a08)\n",
    "termsOfService": "https://www.moneris.com/en/legal/terms-of-use",
    "x-i18n-termsOfService-fr": "https://www.moneris.com/fr-ca/juridiques/conditions-utilisation",
    "contact": {
      "x-i18n-name-fr": "Support Developpeur Moneris (MonDev)",
      "url": "https://api-developer.moneris.com",
      "email": "UnifiedAPI@moneris.com"
    },
    "license": {
      "name": "Moneris",
      "url": "https://developer.moneris.com/Agreements/Terms%20of%20Use"
    },
    "x-audience": "external-public"
  },
  "servers": [
    {
      "url": "https://api.moneris.io",
      "description": "Production server (uses live data)"
    },
    {
      "url": "https://api.sb.moneris.io",
      "description": "Sandbox server (uses test data)"
    }
  ],
  "paths": {
    "/payments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "List Payments",
        "description": "Returns a paginated list of payments.",
        "operationId": "getPayments",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "x-i18n-tags-fr": [
          "Paiements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all payments",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentResponseList"
                },
                "example": {
                  "data": [
                    {
                      "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "0123456789101",
                      "orderId": "1q2w3e4r5t6t78",
                      "invoiceNumber": "1a2s3d45v6",
                      "transactionDateTime": "2019-07-30T06:43:40.252Z",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "amount": {
                        "amount": 16000,
                        "currency": "CAD"
                      },
                      "authorizedAmount": {
                        "amount": 16000,
                        "currency": "CAD"
                      },
                      "capturableAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      },
                      "amountDetails": {
                        "subTotalAmount": {
                          "amount": 14000,
                          "currency": "CAD"
                        },
                        "tipAmount": {
                          "amount": 150,
                          "currency": "CAD"
                        }
                      },
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMethod": {
                        "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": null,
                        "contactDetails": null,
                        "billingAddress": null,
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2025,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": null,
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "paymentStatus": "SUCCEEDED",
                      "transactionDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 0,
                        "responseCode": 1,
                        "message": "approved",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "checkResults": {
                        "addressVerificationServiceResultCode": "M",
                        "cardSecurityCodeResultCode": "MATCH",
                        "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                      },
                      "cardOnFileResponse": null,
                      "refunds": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    },
                    {
                      "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAZ",
                      "merchantId": "0123456789101",
                      "orderId": "1q2w3e4r5t6t78",
                      "invoiceNumber": "1a2s3d45v6",
                      "transactionDateTime": "2019-07-30T06:43:40.252Z",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "amount": {
                        "amount": 16000,
                        "currency": "CAD"
                      },
                      "authorizedAmount": {
                        "amount": 16000,
                        "currency": "CAD"
                      },
                      "capturableAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      },
                      "amountDetails": {
                        "subTotalAmount": {
                          "amount": 14000,
                          "currency": "CAD"
                        },
                        "tipAmount": {
                          "amount": 150,
                          "currency": "CAD"
                        }
                      },
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMethod": {
                        "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": null,
                        "contactDetails": null,
                        "billingAddress": null,
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2025,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": null,
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "paymentStatus": "CANCELED",
                      "transactionDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 0,
                        "responseCode": 1,
                        "message": "approved",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "checkResults": {
                        "addressVerificationServiceResultCode": "M",
                        "cardSecurityCodeResultCode": "MATCH",
                        "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                      },
                      "cardOnFileResponse": null,
                      "refunds": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    },
                    {
                      "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAX",
                      "merchantId": "0123456789101",
                      "orderId": "1q2w3e4r5t6t78",
                      "invoiceNumber": "1a2s3d45v6",
                      "transactionDateTime": "2019-07-30T06:43:40.252Z",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "amount": {
                        "amount": 16000,
                        "currency": "CAD"
                      },
                      "authorizedAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      },
                      "capturableAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      },
                      "amountDetails": {
                        "subTotalAmount": {
                          "amount": 14000,
                          "currency": "CAD"
                        },
                        "tipAmount": {
                          "amount": 150,
                          "currency": "CAD"
                        }
                      },
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMethod": {
                        "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": null,
                        "contactDetails": null,
                        "billingAddress": null,
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2025,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": null,
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "paymentStatus": "DECLINED",
                      "transactionDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 421,
                        "responseCode": 43,
                        "message": "Stolen card, pick up.",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "checkResults": {
                        "addressVerificationServiceResultCode": "M",
                        "cardSecurityCodeResultCode": "MATCH",
                        "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                      },
                      "cardOnFileResponse": null,
                      "refunds": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    }
                  ],
                  "self": "/payments?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "first": "/payments?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "last": "/payments?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "next\"": null,
                  "previous": null
                }
              }
            },
            "x-i18n-description-fr": "Liste de tous les paiements"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Liste des paiements",
        "x-i18n-description-fr": "Renvoie une liste paginée de paiements."
      },
      "post": {
        "summary": "Create Payment",
        "description": "This operation is used to initiate a Payment.",
        "operationId": "createPayments",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "x-i18n-tags-fr": [
          "Paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createPaymentRequest"
              },
              "examples": {
                "regularPurchaseWithPaymentMethodId": {
                  "$ref": "#/components/examples/regularPurchaseWithPaymentMethodId"
                },
                "regularPurchaseWithPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithPaymentMethod"
                },
                "preAuthorizationWithPaymentMethodId": {
                  "$ref": "#/components/examples/preAuthorizationWithPaymentMethodId"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment operation created successfully.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentResponse"
                },
                "examples": {
                  "PurchaseCompleted": {
                    "$ref": "#/components/examples/PurchaseCompletedResponse"
                  },
                  "PreauthorizationCompletedResponse": {
                    "$ref": "#/components/examples/PreauthorizationCompletedResponse"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Opération de paiement créée avec succès."
          },
          "400": {
            "description": "Failed Payment operation result response",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "declined": {
                    "$ref": "#/components/examples/DeclineErrorResponse"
                  },
                  "invalid_request": {
                    "$ref": "#/components/examples/InvalidRequestErrorResponse"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Réponse du résultat de l’opération de paiement échoué"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Créer un paiement",
        "x-i18n-description-fr": "Cette opération est utilisée pour initier un paiement."
      }
    },
    "/payments/{payment-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/paymentId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Retrieve Payment",
        "description": "Retrieve a payment by its payment Id",
        "operationId": "getPayment",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "x-i18n-tags-fr": [
          "Paiements"
        ],
        "responses": {
          "200": {
            "description": "The payment corresponding to the provided `payment-id`",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentResponse"
                },
                "examples": {
                  "succeeded": {
                    "$ref": "#/components/examples/PurchaseCompletedResponse"
                  },
                  "authorized": {
                    "$ref": "#/components/examples/PreauthorizationCompletedResponse"
                  },
                  "declined": {
                    "$ref": "#/components/examples/PurchaseDeclinedResponse"
                  },
                  "declined_retry": {
                    "$ref": "#/components/examples/PurchaseDeclinedRetryResponse"
                  },
                  "canceled": {
                    "$ref": "#/components/examples/PurchaseCanceledResponse"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Le paiement correspondant à l''identifiant de paiement fourni."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Récupérer le paiement",
        "x-i18n-description-fr": "Récupérer un paiement à l’aide de son ID de paiement"
      }
    },
    "/payments/{payment-id}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/paymentId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Cancel Payment",
        "description": "Cancel a payment. This operation may not be possible if the payment has gone through.",
        "operationId": "cancelPayment",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "x-i18n-tags-fr": [
          "Paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cancelPaymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment canceled successfully.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentResponse"
                },
                "example": {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "invoiceNumber": "1a2s3d45v6",
                  "transactionDateTime": "2019-07-30T06:43:40.252Z",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "amount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "authorizedAmount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "capturableAmount": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "amountDetails": {
                    "subTotalAmount": {
                      "amount": 14000,
                      "currency": "CAD"
                    },
                    "tipAmount": {
                      "amount": 150,
                      "currency": "CAD"
                    }
                  },
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodType": "CARD",
                    "paymentMethodInformation": {
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2025,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778"
                    },
                    "paymentMethodStored": "DO_NOT_STORE",
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "paymentStatus": "CANCELED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": 0,
                    "responseCode": 1,
                    "message": "approved",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "checkResults": {
                    "addressVerificationServiceResultCode": "M",
                    "cardSecurityCodeResultCode": "MATCH",
                    "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                  },
                  "cardOnFileResponse": null,
                  "refunds": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Le paiement a été annulé avec succès."
          },
          "400": {
            "description": "Failed to cancel Payment operation result response",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "declined": {
                    "$ref": "#/components/examples/DeclineErrorResponse"
                  },
                  "invalid_request": {
                    "$ref": "#/components/examples/InvalidPurchaseErrorResponse"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Échec de l’annulation Réponse du résultat de l’opération de paiement"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Annuler le paiement",
        "x-i18n-description-fr": "Annuler un paiement. Cette opération peut ne pas être possible si le paiement a été effectué."
      }
    },
    "/payments/{payment-id}/complete": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/paymentId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Complete Payment",
        "description": "This will effectively capture a payment that has been authorized.",
        "operationId": "completePayment",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "x-i18n-tags-fr": [
          "Paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/completionRequest"
              },
              "example": {
                "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
                "invoiceNumber": "1a2s3d45v6",
                "customData": {
                  "property1": "string",
                  "property2": "string"
                },
                "amount": {
                  "amount": 16000,
                  "currency": "CAD"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment completed successfully.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentResponse"
                },
                "example": {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "invoiceNumber": "1a2s3d45v6",
                  "transactionDateTime": "2019-07-30T06:43:40.252Z",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "amount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "authorizedAmount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "capturableAmount": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "amountDetails": {
                    "subTotalAmount": {
                      "amount": 14000,
                      "currency": "CAD"
                    },
                    "tipAmount": {
                      "amount": 150,
                      "currency": "CAD"
                    }
                  },
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodType": "CARD",
                    "paymentMethodInformation": {
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2025,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778"
                    },
                    "paymentMethodStored": "DO_NOT_STORE",
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "paymentStatus": "SUCCEEDED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": 0,
                    "responseCode": 1,
                    "message": "approved",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "checkResults": {
                    "addressVerificationServiceResultCode": "M",
                    "cardSecurityCodeResultCode": "MATCH",
                    "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                  },
                  "cardOnFileResponse": null,
                  "refunds": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Le paiement s’est terminé avec succès."
          },
          "400": {
            "description": "Failed to complete purchase",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "declined": {
                    "$ref": "#/components/examples/DeclineErrorResponse"
                  },
                  "invalid_request": {
                    "$ref": "#/components/examples/InvalidPurchaseErrorResponse"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Echec de l’achat"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Paiement complet",
        "x-i18n-description-fr": "Cela permettra de saisir efficacement un paiement qui a été autorisé."
      }
    },
    "/payment-methods": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "List payment methods",
        "description": "Retrieves a paginated list of payment methods.",
        "operationId": "getPaymentMethods",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "x-i18n-tags-fr": [
          "Modes de paiements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          },
          {
            "$ref": "#/components/parameters/isExpiring"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of payment methods",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentMethodResponseList"
                },
                "example": {
                  "data": [
                    {
                      "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "0123456789101",
                      "cardholderInformation": null,
                      "contactDetails": null,
                      "billingAddress": null,
                      "paymentMethodType": "CARD",
                      "paymentMethodInformation": {
                        "cardInformation": {
                          "bankIdentificationNumber": "123456",
                          "lastFour": "1234",
                          "expiryMonth": 1,
                          "expiryYear": 2023,
                          "cardBrand": "MASTERCARD",
                          "cardType": "CREDIT",
                          "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                          "issuer": "RBC"
                        },
                        "paymentAccountReference": "11112222333344445555666677778"
                      },
                      "paymentMethodStored": "DO_NOT_STORE",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    },
                    {
                      "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "0123456789101",
                      "cardholderInformation": {
                        "cardholderName": "John Doe",
                        "companyName": "SP Ltd"
                      },
                      "contactDetails": {
                        "phoneNumber": "1-866-319-7450",
                        "email": "moneris@moneris.com"
                      },
                      "billingAddress": {
                        "unitNumber": "123A",
                        "streetNumber": "3300",
                        "streetName": "Bloor Street West",
                        "city": "Toronto",
                        "province": "Ontario",
                        "postalCode": "M8X 2X2",
                        "country": "CA"
                      },
                      "paymentMethodType": "TEMPORARY_TOKEN",
                      "paymentMethodInformation": {
                        "cardInformation": {
                          "bankIdentificationNumber": "123456",
                          "lastFour": "1234",
                          "expiryMonth": 1,
                          "expiryYear": 2023,
                          "cardBrand": "MASTERCARD",
                          "cardType": "CREDIT",
                          "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                          "issuer": "RBC"
                        },
                        "paymentAccountReference": "11112222333344445555666677778"
                      },
                      "paymentMethodStored": "DO_NOT_STORE",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    }
                  ],
                  "self": "/payment-methods?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "first": "/payment-methods?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "last": "/payment-methods?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "next\"": null,
                  "previous": null
                }
              }
            },
            "x-i18n-description-fr": "Liste paginée des modes de paiement"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Répertorier les modes de paiement",
        "x-i18n-description-fr": "Récupère une liste paginée des modes de paiement."
      },
      "post": {
        "summary": "Create Payment Method",
        "description": "Create a Payment Method.",
        "operationId": "createPaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "x-i18n-tags-fr": [
          "Modes de paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createPaymentMethodRequest"
              },
              "examples": {
                "card": {
                  "$ref": "#/components/examples/cardPaymentMethodRequest"
                },
                "temporary_token": {
                  "$ref": "#/components/examples/temporaryTokenPaymentMethodRequest"
                },
                "permanent_token": {
                  "$ref": "#/components/examples/permanentTokenPaymentMethodRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment method created successfully.  Response content contains the created payment method.\n",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentMethodResponse"
                },
                "example": {
                  "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "cardholderInformation": {
                    "cardholderName": "John Doe",
                    "companyName": "SP Ltd"
                  },
                  "contactDetails": {
                    "phoneNumber": "1-866-319-7450",
                    "email": "moneris@moneris.com"
                  },
                  "billingAddress": {
                    "unitNumber": "123A",
                    "streetNumber": "3300",
                    "streetName": "Bloor Street West",
                    "city": "Toronto",
                    "province": "Ontario",
                    "postalCode": "M8X 2X2",
                    "country": "CA"
                  },
                  "paymentMethodType": "CARD",
                  "paymentMethodInformation": {
                    "cardInformation": {
                      "bankIdentificationNumber": "123456",
                      "lastFour": "1234",
                      "expiryMonth": 1,
                      "expiryYear": 2023,
                      "cardBrand": "MASTERCARD",
                      "cardType": "CREDIT",
                      "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                      "issuer": "RBC"
                    },
                    "paymentAccountReference": "11112222333344445555666677778"
                  },
                  "paymentMethodStored": "DO_NOT_STORE",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Mode de paiement créé avec succès.  Le contenu de la réponse contient le mode de paiement créé.\n"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Créer un mode de paiement",
        "x-i18n-description-fr": "Créez un mode de paiement."
      }
    },
    "/payment-methods/{payment-method-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/paymentMethodId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Retrieve Payment Method",
        "description": "Retrieve a Payment Method by Id",
        "operationId": "getPaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "x-i18n-tags-fr": [
          "Modes de paiements"
        ],
        "responses": {
          "200": {
            "description": "Payment method found and returned in the response.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentMethodResponse"
                },
                "example": {
                  "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "cardholderInformation": {
                    "cardholderName": "John Doe",
                    "companyName": "SP Ltd"
                  },
                  "contactDetails": {
                    "phoneNumber": "1-866-319-7450",
                    "email": "moneris@moneris.com"
                  },
                  "billingAddress": {
                    "unitNumber": "123A",
                    "streetNumber": "3300",
                    "streetName": "Bloor Street West",
                    "city": "Toronto",
                    "province": "Ontario",
                    "postalCode": "M8X 2X2",
                    "country": "CA"
                  },
                  "paymentMethodType": "CARD",
                  "paymentMethodInformation": {
                    "cardInformation": {
                      "bankIdentificationNumber": "123456",
                      "lastFour": "1234",
                      "expiryMonth": 1,
                      "expiryYear": 2023,
                      "cardBrand": "MASTERCARD",
                      "cardType": "CREDIT",
                      "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                      "issuer": "RBC"
                    },
                    "paymentAccountReference": "11112222333344445555666677778"
                  },
                  "paymentMethodStored": "DO_NOT_STORE",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Mode de paiement trouvé et renvoyé dans la réponse."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Payment method not found.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            },
            "x-i18n-description-fr": "Mode de paiement introuvable."
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Récupérer le mode de paiement",
        "x-i18n-description-fr": "Récupérer un mode de paiement par ID"
      },
      "put": {
        "summary": "Update Payment method",
        "description": "Update payment method referenced by its Id. \nCertain details may not be updated if the payment method was used in a transaction.\n",
        "operationId": "updatePaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "x-i18n-tags-fr": [
          "Modes de paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updatePaymentMethodRequest"
              },
              "examples": {
                "card": {
                  "$ref": "#/components/examples/updateCardPaymentMethodRequest"
                },
                "temporary_token": {
                  "$ref": "#/components/examples/updateTemporaryTokenPaymentMethodRequest"
                },
                "permanent_token": {
                  "$ref": "#/components/examples/updatePermanentTokenPaymentMethodRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update payment method",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentMethodResponse"
                },
                "example": {
                  "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "cardholderInformation": {
                    "cardholderName": "John Doe",
                    "companyName": "SP Ltd"
                  },
                  "contactDetails": {
                    "phoneNumber": "1-866-319-7450",
                    "email": "moneris@moneris.com"
                  },
                  "billingAddress": {
                    "unitNumber": "123A",
                    "streetNumber": "3300",
                    "streetName": "Bloor Street West",
                    "city": "Toronto",
                    "province": "Ontario",
                    "postalCode": "M8X 2X2",
                    "country": "CA"
                  },
                  "paymentMethodType": "CARD",
                  "paymentMethodInformation": {
                    "cardInformation": {
                      "bankIdentificationNumber": "123456",
                      "lastFour": "1234",
                      "expiryMonth": 1,
                      "expiryYear": 2023,
                      "cardBrand": "MASTERCARD",
                      "cardType": "CREDIT",
                      "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                      "issuer": "RBC"
                    },
                    "paymentAccountReference": "11112222333344445555666677778"
                  },
                  "paymentMethodStored": "DO_NOT_STORE",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Mettre à jour le mode de paiement"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Payment method not found.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            },
            "x-i18n-description-fr": "Mode de paiement introuvable."
          },
          "409": {
            "$ref": "#/components/responses/concurrencyConflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Mettre à jour le mode de paiement",
        "x-i18n-description-fr": "Mettre à jour le mode de paiement référencé par son Id. \nCertaines informations peuvent ne pas être mises à jour si le mode de paiement a été utilisé dans une transaction.\n"
      },
      "delete": {
        "summary": "Delete Payment Method",
        "description": "Deletes a payment method.",
        "operationId": "deletePaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "x-i18n-tags-fr": [
          "Modes de paiements"
        ],
        "responses": {
          "204": {
            "description": "Payment method deleted successfully. \nResponse content contains the payment method details.\n",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "x-i18n-description-fr": "Le mode de paiement a été supprimé avec succès. \nLe contenu de la réponse contient les détails du mode de paiement.\n"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Payment method not found.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            },
            "x-i18n-description-fr": "Mode de paiement introuvable."
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Supprimer le mode de paiement",
        "x-i18n-description-fr": "Supprime un mode de paiement."
      }
    },
    "/refunds": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "List Refunds",
        "description": "Returns a paginated list of refund operations.",
        "operationId": "getRefunds",
        "security": [
          {
            "OAuth2": [
              "refund.read"
            ]
          },
          {
            "OAuth2": [
              "refund.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Refunds"
        ],
        "x-i18n-tags-fr": [
          "Remboursements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "description": "Refund list successfully returned.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refundResponseList"
                },
                "example": {
                  "data": [
                    {
                      "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "0123456789101",
                      "paymentMethod": {
                        "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": {
                          "cardholderName": "John Doe",
                          "companyName": "SP Ltd"
                        },
                        "contactDetails": {
                          "phoneNumber": "1-866-319-7450",
                          "email": "moneris@moneris.com"
                        },
                        "billingAddress": {
                          "unitNumber": "123A",
                          "streetNumber": "3300",
                          "streetName": "Bloor Street West",
                          "city": "Toronto",
                          "province": "Ontario",
                          "postalCode": "M8X 2X2",
                          "country": "CA"
                        },
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2023,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": "2019-07-30T06:43:40.252Z",
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "refundAmount": {
                        "amount": 1600,
                        "currency": "CAD"
                      },
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "status": "SUCCEEDED",
                      "statusDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 1,
                        "responseCode": 1,
                        "message": "SUCCESS",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "reason": "Defective product",
                      "cardOnFileResponse": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    },
                    {
                      "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "0123456789101",
                      "paymentMethod": {
                        "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": {
                          "cardholderName": "John Doe",
                          "companyName": "SP Ltd"
                        },
                        "contactDetails": {
                          "phoneNumber": "1-866-319-7450",
                          "email": "moneris@moneris.com"
                        },
                        "billingAddress": {
                          "unitNumber": "123A",
                          "streetNumber": "3300",
                          "streetName": "Bloor Street West",
                          "city": "Toronto",
                          "province": "Ontario",
                          "postalCode": "M8X 2X2",
                          "country": "CA"
                        },
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2023,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": "2019-07-30T06:43:40.252Z",
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": "2019-07-30T06:43:40.252Z",
                      "refundAmount": {
                        "amount": 1600,
                        "currency": "CAD"
                      },
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "status": "DECLINED",
                      "statusDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 51,
                        "responseCode": 54,
                        "message": "Expired Card",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "reason": "Defective product",
                      "cardOnFileResponse": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    }
                  ],
                  "self": "/refunds?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "first": "/refunds?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "last": "/refunds?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "next\"": null,
                  "previous": null
                }
              }
            },
            "x-i18n-description-fr": "Liste de remboursement renvoyée avec succès."
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Liste des remboursements",
        "x-i18n-description-fr": "Renvoie une liste paginée des opérations de remboursement."
      },
      "post": {
        "summary": "Create Refund",
        "description": "This operation is used to create a Refund. \nFor payment refunds, Payment Id is required while payment method is not required.\nFor independent refunds, no payment Id is required, however payment method is required.\n",
        "operationId": "createRefund",
        "security": [
          {
            "OAuth2": [
              "refund.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Refunds"
        ],
        "x-i18n-tags-fr": [
          "Remboursements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRefundRequest"
              },
              "examples": {
                "matching": {
                  "$ref": "#/components/examples/matchingRefundRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Refund operation result response",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refundResponse"
                },
                "example": {
                  "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "paymentMethod": {
                    "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": {
                      "cardholderName": "John Doe",
                      "companyName": "SP Ltd"
                    },
                    "contactDetails": {
                      "phoneNumber": "1-866-319-7450",
                      "email": "moneris@moneris.com"
                    },
                    "billingAddress": {
                      "unitNumber": "123A",
                      "streetNumber": "3300",
                      "streetName": "Bloor Street West",
                      "city": "Toronto",
                      "province": "Ontario",
                      "postalCode": "M8X 2X2",
                      "country": "CA"
                    },
                    "paymentMethodType": "CARD",
                    "paymentMethodInformation": {
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2023,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778"
                    },
                    "paymentMethodStored": "DO_NOT_STORE",
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": "2019-07-30T06:43:40.252Z",
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "refundAmount": {
                    "amount": 1600,
                    "currency": "CAD"
                  },
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "status": "SUCCEEDED",
                  "statusDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": 1,
                    "responseCode": 1,
                    "message": "SUCCESS",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "reason": "Defective product",
                  "cardOnFileResponse": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Réponse du résultat de l’opération de remboursement"
          },
          "400": {
            "description": "Refund operation declined",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "invalid_request": {
                    "$ref": "#/components/examples/InvalidRefundErrorResponse"
                  },
                  "declined": {
                    "$ref": "#/components/examples/exp-refundResponse_DeclineErrorResponse"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Opération de remboursement refusée"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Créer un remboursement",
        "x-i18n-description-fr": "Cette opération permet de créer un Remboursement. \nPour les remboursements de paiement, l’identifiant de paiement est requis tandis que le mode de paiement n’est pas requis.\nPour les remboursements indépendants, aucun identifiant de paiement n’est requis, mais le mode de paiement est requis.\n"
      }
    },
    "/refunds/{refund-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/refundId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Retrieve Refund",
        "description": "Retrieve a refund by its Id.",
        "operationId": "getRefundById",
        "security": [
          {
            "OAuth2": [
              "refund.read"
            ]
          },
          {
            "OAuth2": [
              "refund.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Refunds"
        ],
        "x-i18n-tags-fr": [
          "Remboursements"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the refund corresponding to the provided `refund-id`",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/refundResponse"
                },
                "examples": {
                  "succeeded": {
                    "$ref": "#/components/examples/SucceededRefundResponse"
                  },
                  "declined": {
                    "$ref": "#/components/examples/DeclinedRefundResponse"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Vous avez réussi à récupérer le remboursement correspondant à l’identifiant de remboursement fourni."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Refund not found.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/refunds/ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            },
            "x-i18n-description-fr": "Remboursement introuvable."
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Récupérer le remboursement",
        "x-i18n-description-fr": "Récupérer un remboursement par son Id."
      }
    },
    "/validations": {
      "description": "set up a payment method for future payments. \nSimilar to a payment, but no charge is created.\nUseful when onboarding customers but not charging them right away.\n",
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "List Card Validations",
        "description": "Returns a paginated list of the card validations the were executed.",
        "operationId": "getValidations",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Validations"
        ],
        "x-i18n-tags-fr": [
          "Validations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Card Validations",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationsResponseList"
                },
                "example": {
                  "data": [
                    {
                      "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "merchantId": "0123456789101",
                      "orderId": "1q2w3e4r5t6t78",
                      "invoiceNumber": "1a2s3d45v6",
                      "transactionDateTime": "2019-07-30T06:43:40.252Z",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": null,
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMethod": {
                        "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": {
                          "cardholderName": "John Doe",
                          "companyName": "SP Ltd"
                        },
                        "contactDetails": null,
                        "billingAddress": {
                          "unitNumber": "123A",
                          "streetNumber": "3300",
                          "streetName": "Bloor Street West",
                          "city": "Toronto",
                          "province": "Ontario",
                          "postalCode": "M8X 2X2",
                          "country": "CA"
                        },
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2025,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": null,
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "validationStatus": "SUCCEEDED",
                      "transactionDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 0,
                        "responseCode": 1,
                        "message": "approved",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "checkResults": {
                        "addressVerificationServiceResultCode": "M",
                        "cardSecurityCodeResultCode": "MATCH",
                        "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                      },
                      "cardOnFileResponse": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    },
                    {
                      "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAX",
                      "merchantId": "0123456789101",
                      "orderId": "1q2w3e4r5t6t78",
                      "invoiceNumber": "1a2s3d45v6",
                      "transactionDateTime": "2019-07-30T06:43:40.252Z",
                      "createdAt": "2019-07-30T06:43:40.252Z",
                      "modifiedAt": null,
                      "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                      "paymentMethod": {
                        "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                        "merchantId": "0123456789101",
                        "cardholderInformation": {
                          "cardholderName": "John Doe",
                          "companyName": "SP Ltd"
                        },
                        "contactDetails": {
                          "phoneNumber": "1-866-319-7450",
                          "email": "moneris@moneris.com"
                        },
                        "billingAddress": {
                          "unitNumber": "123A",
                          "streetNumber": "3300",
                          "streetName": "Bloor Street West",
                          "city": "Toronto",
                          "province": "Ontario",
                          "postalCode": "M8X 2X2",
                          "country": "CA"
                        },
                        "paymentMethodType": "CARD",
                        "paymentMethodInformation": {
                          "cardInformation": {
                            "bankIdentificationNumber": "123456",
                            "lastFour": "1234",
                            "expiryMonth": 1,
                            "expiryYear": 2025,
                            "cardBrand": "MASTERCARD",
                            "cardType": "CREDIT",
                            "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                            "issuer": "RBC"
                          },
                          "paymentAccountReference": "11112222333344445555666677778"
                        },
                        "paymentMethodStored": "DO_NOT_STORE",
                        "createdAt": "2019-07-30T06:43:40.252Z",
                        "modifiedAt": null,
                        "customData": {
                          "property1": "string",
                          "property2": "string"
                        }
                      },
                      "validationStatus": "DECLINED",
                      "transactionDetails": {
                        "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                        "isoResponseCode": 421,
                        "responseCode": 43,
                        "message": "Stolen card, pick up.",
                        "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                      },
                      "checkResults": {
                        "addressVerificationServiceResultCode": "M",
                        "cardSecurityCodeResultCode": "MATCH",
                        "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                      },
                      "cardOnFileResponse": null,
                      "customData": {
                        "property1": "string",
                        "property2": "string"
                      }
                    }
                  ],
                  "self": "/validations?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "first": "/validations?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "last": "/validations?cursor=d41d8cd98f00b&limit=50&api_version=2023-11-01",
                  "next\"": null,
                  "previous": null
                }
              }
            },
            "x-i18n-description-fr": "Liste des validations de cartes"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Validations de cartes de liste",
        "x-i18n-description-fr": "Renvoie une liste paginée des validations de cartes qui ont été exécutées."
      },
      "post": {
        "summary": "Create Card Validation",
        "description": "Initiate a new Card Validation request.",
        "operationId": "createValidation",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Validations"
        ],
        "x-i18n-tags-fr": [
          "Validations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createValidationRequest"
              },
              "examples": {
                "with_payment_method_id": {
                  "$ref": "#/components/examples/validationRequestWithPaymentMethodId"
                },
                "with_payment_method": {
                  "$ref": "#/components/examples/validationRequestWithPaymentMethodData"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Validation request created successfully.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationResponse"
                }
              }
            },
            "x-i18n-description-fr": "Demande de validation créée avec succès."
          },
          "400": {
            "description": "Failed Validation operation result response",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "declined": {
                    "$ref": "#/components/examples/exp-validationResponse_DeclineErrorResponse"
                  },
                  "invalid_request": {
                    "$ref": "#/components/examples/InvalidRequestErrorResponse"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Réponse du résultat de l’opération de validation ayant échoué"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Créer une validation de carte",
        "x-i18n-description-fr": "Lancez une nouvelle demande de validation de carte."
      },
      "x-i18n-description-fr": "Paramétrez un mode de paiement pour les paiements futurs. \nSimilaire à un paiement, mais aucun frais n’est créé.\nUtile lors de l’intégration des clients, mais ne les facturant pas immédiatement.\n"
    },
    "/validations/{validation-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/validationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Retrieve Card Validation.",
        "description": "Retrieve a Card Validation by Id.",
        "operationId": "getValidation",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Validations"
        ],
        "x-i18n-tags-fr": [
          "Validations"
        ],
        "responses": {
          "200": {
            "description": "Retrieve a Card Validation by Id",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationResponse"
                },
                "examples": {
                  "succeeded": {
                    "$ref": "#/components/examples/ValidationSucceededResponse"
                  },
                  "declined": {
                    "$ref": "#/components/examples/ValidationDeclinedRetryResponse"
                  },
                  "declined_retry": {
                    "$ref": "#/components/examples/ValidationDeclinedResponse"
                  }
                }
              }
            },
            "x-i18n-description-fr": "Récupérer une validation de carte par ID"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Card validation not found",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validationResponse"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/validations/vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            },
            "x-i18n-description-fr": "Validation de la carte introuvable"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Récupérer la validation de la carte.",
        "x-i18n-description-fr": "Récupérer une validation de carte par id."
      }
    },
    "/customers": {
      "description": "This API allows to manage past and recurring customers.\nVery useful when tracking and managing charges belonging to the same customer.\n",
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "List Customers",
        "description": "Returns a paginated list of customers.",
        "operationId": "getCustomers",
        "security": [
          {
            "OAuth2": [
              "customer.read"
            ]
          },
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "x-i18n-tags-fr": [
          "Clients"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all customers",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customerResponseList"
                }
              }
            },
            "x-i18n-description-fr": "Liste de tous les clients"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Liste des clients",
        "x-i18n-description-fr": "Renvoie une liste paginée de clients."
      },
      "post": {
        "summary": "Create Customer",
        "description": "This operation is used to created a new customer.",
        "operationId": "createCustomers",
        "security": [
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "x-i18n-tags-fr": [
          "Clients"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer operation result response",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customerResponse"
                }
              }
            },
            "x-i18n-description-fr": "Réponse du résultat de l’opération client"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Créer un client",
        "x-i18n-description-fr": "Cette opération permet de créer un nouveau client."
      },
      "x-i18n-description-fr": "Cette API permet de gérer les clients passés et récurrents.\nTrès utile lors du suivi et de la gestion des frais appartenant au même client.\n"
    },
    "/customers/{customer-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/customerId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Retrieve Customer",
        "description": "Retrieve a customer by their Id.",
        "operationId": "getCustomer",
        "security": [
          {
            "OAuth2": [
              "customer.read"
            ]
          },
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "x-i18n-tags-fr": [
          "Clients"
        ],
        "responses": {
          "200": {
            "description": "The customer corresponding to the provided `customerId`",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customerResponse"
                }
              }
            },
            "x-i18n-description-fr": "Le client correspondant au 'customerId' fourni"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Customer not found",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            },
            "x-i18n-description-fr": "Client introuvable"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Récupérer le client",
        "x-i18n-description-fr": "Récupérer un client par son Id."
      },
      "put": {
        "summary": "Update Customer",
        "description": "Updates customer's details such as name, address etc...",
        "operationId": "updateCustomer",
        "security": [
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "x-i18n-tags-fr": [
          "Clients"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated successfully.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customerResponse"
                }
              }
            },
            "x-i18n-description-fr": "Le client a mis à jour avec succès."
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Customer not found",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            },
            "x-i18n-description-fr": "Client introuvable"
          },
          "409": {
            "$ref": "#/components/responses/concurrencyConflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Mettre à jour le client",
        "x-i18n-description-fr": "Met à jour les coordonnées du client telles que le nom, l’adresse, etc."
      },
      "delete": {
        "summary": "Delete Customer",
        "description": "Delete a customer by their Id",
        "operationId": "deleteCustomer",
        "security": [
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "x-i18n-tags-fr": [
          "Clients"
        ],
        "responses": {
          "204": {
            "description": "Customer deleted successfully.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "x-i18n-description-fr": "Le client a été supprimé avec succès."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "description": "Customer not found",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "example": {
                  "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
                  "title": "NOT_FOUND",
                  "status": 404,
                  "detail": null,
                  "instance": "/customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "category": "INVALID_REQUEST_ERROR",
                  "errors": []
                }
              }
            },
            "x-i18n-description-fr": "Client introuvable"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Supprimer le client",
        "x-i18n-description-fr": "Supprimer un client par son identifiant"
      }
    },
    "/three-d-secure": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Create Authentication",
        "description": "This operation is used to create an Authentication request. \nThe authentication request is used to start the validation process of the card. \nThe result of this request determines whether 3DS is supported by the card and what type of authentication is required.\n",
        "operationId": "createAuthentication",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "3D Secure"
        ],
        "x-i18n-tags-fr": [
          "3D Secure"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authenticationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Card Lookup operation result response",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authenticationResponse"
                }
              }
            },
            "x-i18n-description-fr": "Réponse du résultat de l’opération de recherche de carte"
          },
          "202": {
            "description": "MPI Authentication operation resulted in a challenge.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authenticationResponse"
                }
              }
            },
            "x-i18n-description-fr": "L’opération d’authentification MPI s’est avérée problématique."
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Créer une authentification",
        "x-i18n-description-fr": "Cette opération permet de créer une demande d’authentification. \nLa demande d’authentification permet de lancer le processus de validation de la carte. \nLe résultat de cette demande détermine si 3DS est pris en charge par la carte et quel type d’authentification est requis.\n"
      }
    },
    "/three-d-secure/{authentication-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/authenticationId"
        }
      ],
      "get": {
        "summary": "Retrieve Authentication",
        "description": "Retrieve an authentication by its authentication Id",
        "operationId": "getAuthentication",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "3D Secure"
        ],
        "x-i18n-tags-fr": [
          "3D Secure"
        ],
        "responses": {
          "200": {
            "description": "The authentication corresponding to the provided `authentication-id`",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authenticationResponse"
                }
              }
            },
            "x-i18n-description-fr": "L’authentification correspondant à l''authentication-id fourni."
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Récupérer l’authentification",
        "x-i18n-description-fr": "Récupérer une authentification par son ID d’authentification"
      }
    },
    "/three-d-secure/{authentication-id}/lookup": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/authenticationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Authentication Value Lookup",
        "description": "The point of the 3-D Secure flow is to verify that the true cardholder is a part of the authorization. The challenge flow is used to present a way of authenticating the cardholder using e.g. OTP or a federated identification method.",
        "operationId": "authenticationValueLookup",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "3D Secure"
        ],
        "x-i18n-tags-fr": [
          "3D Secure"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lookupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MPI Authentication operation was successfully authenticated.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authenticationResponse"
                }
              }
            },
            "x-i18n-description-fr": "L’opération d’authentification MPI a été authentifiée avec succès."
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Recherche de valeur d’authentification",
        "x-i18n-description-fr": "L’intérêt du flux 3-D Secure est de vérifier que le véritable titulaire de la carte fait partie de l’autorisation. Le flux de défi est utilisé pour présenter un moyen d’authentifier le titulaire de la carte à l’aide, par exemple, d’un OTP ou d’une méthode d’identification fédérée."
      }
    },
    "/three-d-secure/card-lookups": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-common_apiVersion"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "3DS Card Lookup",
        "operationId": "cardLookup",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "3D Secure"
        ],
        "x-i18n-tags-fr": [
          "3D Secure"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cardLookupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "CAVV Lookup operation to read the challenge result.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cardLookupResponse"
                }
              }
            },
            "x-i18n-description-fr": "Opération de recherche CAVV pour lire le résultat du défi."
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          }
        },
        "x-i18n-summary-fr": "Recherche de carte 3DS"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Api-Key"
      },
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://api.moneris.io/oauth2/token",
            "scopes": {
              "payment.read": "Grants read access to payment related APIs",
              "payment.write": "Grants read & write access to payment related APIs",
              "refund.read": "Grants read access to refunds",
              "refund.write": "Grants read & write access to refunds",
              "customer.read": "Grants read access to customer data",
              "customer.write": "Grants read & write access to customer data"
            }
          }
        }
      }
    },
    "schemas": {
      "apiVersion": {
        "description": "The endpoint's API Version. \n\nMust be provided through the query string, or through headers.\n",
        "type": "string",
        "example": "2023-11-01",
        "x-i18n-description-fr": "Version de l’API du point de terminaison. \n\nDoit être fourni par le biais de la chaîne de requête ou d’en-têtes.\n"
      },
      "merchantId": {
        "type": "string",
        "description": "Thirteen character long identification provided to merchants by Moneris.\n",
        "minLength": 13,
        "maxLength": 13,
        "example": 123456789101,
        "x-i18n-description-fr": "Identification de treize caractères fournie aux marchands par Moneris.\n"
      },
      "dateTime": {
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z"
      },
      "orderId": {
        "type": "string",
        "description": "Indicates a Merchant-defined transaction identifier that is uniquely assigned to every Purchase, Pre-Authorization and Independent Refund transaction. \n\nNote: No two transactions of these types may have the same order ID.\n",
        "minLength": 1,
        "maxLength": 50,
        "example": "1q2w3e4r5t6t78",
        "pattern": "^[^\\s]+$",
        "nullable": true,
        "x-i18n-description-fr": "Indique un identificateur de transaction défini par le marchand qui est attribué de manière unique à chaque transaction d’achat, de préautorisation et de remboursement indépendant. \n\nRemarque : Il n’est pas possible que deux transactions de ce type aient le même ID de commande.\n"
      },
      "invoiceNumber": {
        "type": "string",
        "description": "The terminal uses the invoice number field to submit a unique value to identify a transaction. This data is logged by Moneris Solutions.",
        "minLength": 1,
        "maxLength": 17,
        "example": "1a2s3d45v6",
        "nullable": true,
        "x-i18n-description-fr": "Le terminal utilise le champ du numéro de facture pour soumettre une valeur unique afin d’identifier une transaction. Ces données sont enregistrées par Moneris Solutions."
      },
      "transactionDateTime": {
        "description": "Date and Time of transaction",
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z",
        "x-i18n-description-fr": "Date et heure de la transaction"
      },
      "createdAt": {
        "description": "Time at which the object was created",
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z",
        "x-i18n-description-fr": "Heure à laquelle l’objet a été créé"
      },
      "modifiedAt": {
        "description": "Time at which the object was modified",
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z",
        "x-i18n-description-fr": "Heure à laquelle l’objet a été modifié"
      },
      "amount": {
        "type": "integer",
        "format": "int32",
        "minimum": 0,
        "maximum": 999999999,
        "example": 10000
      },
      "currency": {
        "type": "string",
        "description": "Three letter currency code based on the ISO 4217 standard. See https://en.wikipedia.org/wiki/ISO_4217",
        "minLength": 3,
        "maxLength": 4,
        "example": "CAD",
        "x-i18n-description-fr": "Code monétaire à trois lettres basé sur la norme ISO 4217. Voir https://en.wikipedia.org/wiki/ISO_4217"
      },
      "transactionAmount": {
        "type": "object",
        "description": "The amount for the transaction. The value must be in cents. Therefore $10.59 must be sent as 1059",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 16000,
          "currency": "CAD"
        },
        "x-i18n-description-fr": "Le montant de la transaction. La valeur doit être exprimée en centimes. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059"
      },
      "subTotalAmount": {
        "type": "object",
        "description": "Sub total amount for the transaction. The value must be in cents. Therefore $10.59 must be sent as 1059",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "nullable": true,
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 2000,
          "currency": "CAD"
        },
        "x-i18n-description-fr": "Sous-montant total de la transaction. La valeur doit être exprimée en centimes. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059"
      },
      "tipAmount": {
        "type": "object",
        "description": "Total tip amount for the transaction. The value must be in cents. Therefore $10.59 must be sent as 1059",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "nullable": true,
        "example": {
          "amount": 1200,
          "currency": "CAD"
        },
        "x-i18n-description-fr": "Montant total du pourboire pour la transaction. La valeur doit être exprimée en centimes. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059"
      },
      "amountDetails": {
        "description": "Additional amount details",
        "type": "object",
        "nullable": true,
        "properties": {
          "subTotalAmount": {
            "$ref": "#/components/schemas/subTotalAmount"
          },
          "tipAmount": {
            "$ref": "#/components/schemas/tipAmount"
          }
        },
        "x-i18n-description-fr": "Détails supplémentaires sur le montant"
      },
      "cardholderName": {
        "type": "string",
        "description": "Cardholder name",
        "minLength": 1,
        "maxLength": 60,
        "example": "John Doe",
        "nullable": true,
        "x-i18n-description-fr": "Nom du titulaire de la carte"
      },
      "companyName": {
        "type": "string",
        "description": "Company name",
        "minLength": 1,
        "maxLength": 50,
        "example": "SP Ltd",
        "nullable": true,
        "x-i18n-description-fr": "Nom de l’entreprise"
      },
      "cardholderInformation": {
        "type": "object",
        "description": "Information about the holder of the card.",
        "nullable": true,
        "properties": {
          "cardholderName": {
            "$ref": "#/components/schemas/cardholderName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          }
        },
        "required": [
          "cardholderName"
        ],
        "x-i18n-description-fr": "Informations sur le titulaire de la carte."
      },
      "contactDetails": {
        "type": "object",
        "description": "Customer's contact details",
        "nullable": true,
        "properties": {
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Customer's phone number",
            "minLength": 1,
            "maxLength": 30,
            "example": "1-866-319-7450",
            "x-i18n-description-fr": "Numéro de téléphone du client"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "iso-639",
            "description": "Customer's email address. See https://www.rfc-editor.org/rfc/rfc5322",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com",
            "x-i18n-description-fr": "Adresse e-mail du client. Voir https://www.rfc-editor.org/rfc/rfc5322"
          }
        },
        "example": {
          "phoneNumber": "1-866-319-7450",
          "email": "moneris@moneris.com"
        },
        "x-i18n-description-fr": "Coordonnées du client"
      },
      "unitNumber": {
        "type": "string",
        "description": "Unit number",
        "minLength": 1,
        "maxLength": 19,
        "example": "123A",
        "x-i18n-description-fr": "Numéro d’unité"
      },
      "streetNumber": {
        "type": "string",
        "description": "Street number",
        "minLength": 1,
        "maxLength": 19,
        "example": 3300,
        "x-i18n-description-fr": "Numéro de rue"
      },
      "streetName": {
        "type": "string",
        "description": "Street name",
        "minLength": 1,
        "maxLength": 100,
        "example": "Bloor",
        "x-i18n-description-fr": "Nom de la rue"
      },
      "city": {
        "type": "string",
        "description": "City",
        "minLength": 1,
        "maxLength": 50,
        "example": "Toronto",
        "x-i18n-description-fr": "Ville"
      },
      "province": {
        "type": "string",
        "description": "Province or state",
        "minLength": 1,
        "maxLength": 30,
        "example": "Ontario",
        "x-i18n-description-fr": "Province ou État"
      },
      "postalCode": {
        "type": "string",
        "description": "Postal or zip code",
        "minLength": 1,
        "maxLength": 30,
        "example": "M8X 2X2",
        "x-i18n-description-fr": "Code postal"
      },
      "country": {
        "type": "string",
        "description": "Two letter country code based on the ISO 3166-1 alpha-2 standard. See https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2",
        "minLength": 2,
        "maxLength": 2,
        "example": "CA",
        "x-i18n-description-fr": "Code de pays à deux lettres basé sur la norme ISO 3166-1 alpha-2. Voir https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"
      },
      "address": {
        "type": "object",
        "description": "The postal address including street, town/city, province, and postal code.",
        "properties": {
          "unitNumber": {
            "$ref": "#/components/schemas/unitNumber"
          },
          "streetNumber": {
            "$ref": "#/components/schemas/streetNumber"
          },
          "streetName": {
            "$ref": "#/components/schemas/streetName"
          },
          "city": {
            "$ref": "#/components/schemas/city"
          },
          "province": {
            "$ref": "#/components/schemas/province"
          },
          "postalCode": {
            "$ref": "#/components/schemas/postalCode"
          },
          "country": {
            "$ref": "#/components/schemas/country"
          }
        },
        "example": {
          "unitNumber": "123A",
          "streetNumber": 3300,
          "streetName": "Bloor Street West",
          "city": "Toronto",
          "province": "Ontario",
          "postalCode": "M8X 2X2",
          "country": "CA"
        },
        "x-i18n-description-fr": "L’adresse postale, y compris la rue, la ville, la province et le code postal."
      },
      "paymentMethodType": {
        "type": "string",
        "description": "The type of Payment Method being used. It can be:\n  - Permanent Token.\n  - Temporary Token.\n  - Card.\n",
        "enum": [
          "PERMANENT_TOKEN",
          "TEMPORARY_TOKEN",
          "CARD"
        ],
        "example": "TEMPORARY_TOKEN",
        "x-i18n-description-fr": "Le type de Mode de paiement utilisé. Il peut s’agir de :\n  - Jeton permanent.\n  - Jeton temporaire.\n  - Carte.\n"
      },
      "bankIdentificationNumber": {
        "type": "string",
        "description": "Bank Identification Number (BIN) consists of the first six, up to eight, digits of the primary account number (PAN), and which identifies both the relevant payment network and the specific issuing institution.",
        "minLength": 6,
        "maxLength": 8,
        "example": 123456,
        "x-i18n-description-fr": "Le numéro d’identification bancaire (BIN) se compose des six premiers chiffres, jusqu’à huit, du numéro de compte principal (PAN), et identifie à la fois le réseau de paiement concerné et l’établissement émetteur spécifique."
      },
      "lastFour": {
        "type": "string",
        "description": "Last 4 digits of the card",
        "minLength": 4,
        "maxLength": 4,
        "example": 1234,
        "x-i18n-description-fr": "Les 4 derniers chiffres de la carte"
      },
      "expiryMonth": {
        "type": "integer",
        "format": "int32",
        "description": "Card expiration month. Format must be MM",
        "minimum": 1,
        "maximum": 12,
        "example": 1,
        "x-i18n-description-fr": "Mois d’expiration de la carte. Le format doit être MM"
      },
      "expiryYear": {
        "type": "integer",
        "format": "int32",
        "description": "Card expiration year. Format must be YYYY",
        "minimum": 2022,
        "maximum": 9999,
        "example": 2023,
        "x-i18n-description-fr": "Année d’expiration de la carte. Le format doit être YYYY"
      },
      "cardBrand": {
        "type": "string",
        "description": "Card brand name associated with the cardType.",
        "enum": [
          "MASTERCARD",
          "VISA",
          "AMERICAN_EXPRESS",
          "JCB",
          "DINERS_DISCOVER",
          "INTERAC",
          "UNIONPAY",
          "GIFT_MONERIS",
          "GIFT_DATACANDY",
          "GIFT_GIVEX"
        ],
        "example": "MASTERCARD",
        "x-i18n-description-fr": "Nom de la marque de la carte associé au cardType."
      },
      "cardType": {
        "type": "string",
        "description": "The terminal uses the card type field to specify the intended use for a card (debit or credit)",
        "enum": [
          "CREDIT",
          "DEBIT",
          "DOMESTIC_DEBIT",
          "PREPAID_RELOADABLE",
          "PREPAID_NON_RELOADABLE",
          "UNKNOWN",
          "GIFT",
          "LOYALTY",
          "FLEET",
          "CORPORATE"
        ],
        "example": "CREDIT",
        "x-i18n-description-fr": "Le terminal utilise le champ type de carte pour spécifier l’utilisation prévue d’une carte (débit ou crédit)"
      },
      "cardFingerprint": {
        "type": "string",
        "description": "Unique identifier for the card",
        "maxLength": 255,
        "example": "1Q2W3E4r5t6rfwewerwewrrw",
        "x-i18n-description-fr": "Identifiant unique de la carte"
      },
      "issuer": {
        "type": "string",
        "description": "Card Issuer.",
        "minLength": 1,
        "maxLength": 100,
        "example": "RBC",
        "x-i18n-description-fr": "Émetteur de la carte."
      },
      "cardInformation": {
        "type": "object",
        "description": "Information about the card being used for the transaction",
        "properties": {
          "bankIdentificationNumber": {
            "$ref": "#/components/schemas/bankIdentificationNumber"
          },
          "lastFour": {
            "$ref": "#/components/schemas/lastFour"
          },
          "expiryMonth": {
            "$ref": "#/components/schemas/expiryMonth"
          },
          "expiryYear": {
            "$ref": "#/components/schemas/expiryYear"
          },
          "cardBrand": {
            "$ref": "#/components/schemas/cardBrand"
          },
          "cardType": {
            "$ref": "#/components/schemas/cardType"
          },
          "cardFingerprint": {
            "$ref": "#/components/schemas/cardFingerprint"
          },
          "issuer": {
            "$ref": "#/components/schemas/issuer"
          }
        },
        "x-i18n-description-fr": "Informations sur la carte utilisée pour la transaction"
      },
      "paymentAccountReference": {
        "type": "string",
        "description": "Payment Account Reference (PAR) is used to link Primary Account Number (PAN) based transactions and transactions on associated payment tokens without using the PAN as the linking mechanism.",
        "minLength": 1,
        "maxLength": 29,
        "example": 1.1112222333344446e+28,
        "x-i18n-description-fr": "La référence de compte de paiement (PAR) est utilisée pour lier des transactions basées sur un numéro de compte principal (PAN) et des transactions sur des jetons de paiement associés sans utiliser le PAN comme mécanisme de liaison."
      },
      "paymentMethodInformation": {
        "title": "paymentMethodInformation",
        "description": "Details about the card used in the payment method.",
        "type": "object",
        "properties": {
          "cardInformation": {
            "$ref": "#/components/schemas/cardInformation"
          },
          "paymentAccountReference": {
            "$ref": "#/components/schemas/paymentAccountReference"
          }
        },
        "required": [
          "cardInformation"
        ],
        "x-i18n-description-fr": "Détails sur la carte utilisée dans le mode de paiement."
      },
      "storePaymentMethod": {
        "description": "Store this payment method created through this payment for future use. \n- DO_NOT_STORE: Payment method will not be stored.\n- CARDHOLDER_INITIATED: Payment method to be stored and can only re-used with cardholder's consent. Limited to purchase, pre-authorisation, and card validations.\"\n- MERCHANT_INITIATED: Payment method to be stored and can be reused without the cardholder's consent. For example, recurring payments.\n",
        "type": "string",
        "default": "DO_NOT_STORE",
        "enum": [
          "DO_NOT_STORE",
          "CARDHOLDER_INITIATED",
          "MERCHANT_INITIATED"
        ],
        "x-i18n-description-fr": "Stockez ce mode de paiement créé par le biais de ce paiement pour une utilisation ultérieure. \n- DO_NOT_STORE : Le mode de paiement ne sera pas enregistré.\n- CARDHOLDER_INITIATED : mode de paiement à enregistrer et ne peut être réutilisé qu’avec l’accord du titulaire de la carte. Limité à l’achat, à la pré-autorisation et à la validation de la carte.\n- MERCHANT_INITIATED : Mode de paiement à enregistrer et réutilisable sans le consentement du titulaire de la carte. Par exemple, les paiements récurrents.\n"
      },
      "customData": {
        "description": "Merchant can send custom meta data with the transaction in this object. Moneris will echo these values back in response.",
        "type": "object",
        "additionalProperties": {
          "type": "string",
          "minLength": 1,
          "maxLength": 50
        },
        "maxProperties": 10,
        "nullable": true,
        "x-i18n-description-fr": "Le marchand peut envoyer des métadonnées personnalisées avec la transaction dans cet objet. Moneris fera écho à ces valeurs en réponse."
      },
      "paymentMethodResponse": {
        "title": "paymentMethodResponse",
        "description": "Payment method response object",
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "description": "Unique Identifier of the payment method",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "cardholderInformation": {
            "$ref": "#/components/schemas/cardholderInformation"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/contactDetails"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/address"
          },
          "paymentMethodType": {
            "$ref": "#/components/schemas/paymentMethodType"
          },
          "paymentMethodInformation": {
            "$ref": "#/components/schemas/paymentMethodInformation"
          },
          "paymentMethodStored": {
            "$ref": "#/components/schemas/storePaymentMethod"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "x-i18n-description-fr": "Objet de réponse du mode de paiement"
      },
      "paymentStatus": {
        "type": "string",
        "description": "Payment Status description.",
        "enum": [
          "CANCELED",
          "DECLINED",
          "DECLINED_RETRY",
          "AUTHORIZED",
          "PROCESSING",
          "SUCCEEDED"
        ],
        "example": "SUCCEEDED",
        "x-i18n-description-fr": "Description du statut du paiement."
      },
      "iso": {
        "type": "string",
        "description": "This field represents the Moneris response code for the equivalent International Organization for Standardization (ISO) response code.",
        "minLength": 2,
        "maxLength": 2,
        "example": 0,
        "x-i18n-description-fr": "Ce champ représente le code de réponse de Moneris pour le code de réponse équivalent de l’Organisation internationale de normalisation (ISO)."
      },
      "responseCode": {
        "type": "string",
        "description": "Transaction Response Code < 50, Transaction approved >= 50, Transaction declined NULL Transaction was not sent for authorization. For further details on the response codes that are returned please see the Response Codes table",
        "minLength": 3,
        "maxLength": 3,
        "example": 1,
        "x-i18n-description-fr": "Code de réponse de transaction < 50, Transaction approuvée >= 50, Transaction refusée NULL La transaction n’a pas été envoyée pour autorisation. Pour plus de détails sur les codes de réponse retournés, veuillez consulter le tableau des codes de réponse"
      },
      "authorizationCode": {
        "type": "string",
        "maxLength": 8,
        "nullable": true,
        "pattern": "^[a-zA-Z0-9]*$",
        "description": "Contains a value generated by the authorizer for an approved financial transactions. \nThis operates as the authorizing host's transaction identification.\n",
        "example": "11223344",
        "x-i18n-description-fr": "Contient une valeur générée par l’autorisateur pour les transactions financières. \nIl s’agit de l’identification de transaction de l’hôte d’autorisation.\n"
      },
      "message": {
        "type": "string",
        "description": "Response description returned from issuing institution. This message should not be displayed on any cardholder facing materials.  For receipt purposes, please refer to the Receipt Requirements",
        "minLength": 1,
        "maxLength": 100,
        "example": "SUCCESS",
        "x-i18n-description-fr": "Description de la réponse renvoyée par l’institution émettrice. Ce message ne doit pas être affiché sur les supports de carte.  Pour obtenir des reçus, veuillez consulter les Exigences en matière de reçus."
      },
      "ecommerceIndicator": {
        "type": "string",
        "description": "E-commerce transaction category being processed.  When returned in the responese, it can be different from the value sent in the request in case transaction was downgraded by the issuer.\n",
        "enum": [
          "MAIL_TELEPHONE_ORDER_SINGLE",
          "MAIL_TELEPHONE_ORDER_RECURRING",
          "MAIL_TELEPHONE_ORDER_INSTALMENT",
          "MAIL_TELEPHONE_ORDER_UNKNOWN",
          "AUTHENTICATED_ECOMMERCE",
          "NON_AUTHENTICATED_ECOMMERCE",
          "SSL_MERCHANT"
        ],
        "example": "AUTHENTICATED_ECOMMERCE",
        "default": "SSL_MERCHANT",
        "x-i18n-description-fr": "Catégorie de transaction de commerce électronique en cours de traitement.  Lorsqu’elle est renvoyée dans le responese, elle peut être différente de la valeur envoyée dans la demande au cas où la transaction aurait été déclassée par l’émetteur.\n"
      },
      "statusDetails": {
        "type": "object",
        "description": "Additional details about the transaction outcome.",
        "properties": {
          "transactionUniqueId": {
            "type": "string",
            "description": "Realtime transaction identifier from the host.",
            "x-i18n-description-fr": "Identifiant de transaction en temps réel de l’hôte."
          },
          "isoResponseCode": {
            "$ref": "#/components/schemas/iso"
          },
          "responseCode": {
            "$ref": "#/components/schemas/responseCode"
          },
          "authorizationCode": {
            "$ref": "#/components/schemas/authorizationCode"
          },
          "message": {
            "$ref": "#/components/schemas/message"
          },
          "ecommerceIndicator": {
            "$ref": "#/components/schemas/ecommerceIndicator"
          }
        },
        "x-i18n-description-fr": "Détails supplémentaires sur le résultat de la transaction."
      },
      "addressVerificationServiceResult": {
        "type": "string",
        "description": "Indicates the address verification result. \nPlease refer to the AVS Result Code table for details.\n\n|Value|VISA|MASTERCARD|DISCOVER|Amex / JCB|\n|:----|:----|:----|:----|:----|\n|A|AVS street address only partial match|Address matches, postal code does not.|Address matches, five-digit postal code matches|Billing address matches, zip code does not.|\n|D|N/A|N/A|N/A|Customer name incorrect, postal code matches|\n|E|N/A|N/A|N/A|Customer name incorrect, billing address and postal code match|\n|F|N/A|N/A|N/A|Customer name incorrect, billing address matches.|\n|G|N/A|N/A|Address information not verified for international transaction|N/A|\n|K|N/A|N/A|N/A|Customer name matches|\n|L|N/A|N/A|N/A|Customer name and postal code match.|\n|M|N/A|N/A|N/A|Customer name, billing address, and postal code match.|\n|N|AVS non-match|Neither address nor postal code match.|Neither address nor postal code match.|Billing address and postal code do not match.|\n|O|N/A|N/A|N/A|Customer name and billing address match|\n|R|(AVS indeterminate outcome (retry)) V.I.P. will convert invalid values in Field 44.2 to R (AVS indeterminate outcome (retry)).|Retry; system unable to process.|N/A|System unavailable; retry.|\n|S|N/A|AVS currently not supported.|AVS currently not supported.|AVS currently not supported.|\n|T|N/A|N/A|Nine-digit zip code matches, address does not match.|N/A|\n|U|(AVS unable to verify) V.I.P. will convert a blank space in Field 44.2 to U (AVS unable to verify).|No data from Issuer/Authorization system.|Retry; system unable to process.|Information is unavailable.|\n|W|N/A|For U.S. Addresses, nine-digit postal code matches, address does not; for address outside the U.S. postal code matches, address does not.|No data from Issuer/Authorization system|Customer name, billing address, and postal code are all correct.|\n|X|N/A|For U.S. addresses, nine-digit postal code and addresses matches; for addresses outside the U.S., postal code and address match.|Address matches, nine-digit postal code matches|N/A|\n|Y|(AVS full match)|For U.S. addresses, five-digit postal code and address matches.|Address matches, postal code does not|Billing address and postal code both match|\n|Z|(AVS postal/zip code only (partial match))|For U.S. addresses, five-digit postal code matches, address does not match.|Five-digit postal code matches, address does not|Postal code matches, billing address does not.|\n",
        "x-extensible-enum": [
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "I",
          "K",
          "L",
          "M",
          "N",
          "O",
          "P",
          "R",
          "S",
          "T",
          "U",
          "W",
          "X",
          "Y",
          "Z"
        ],
        "example": "M",
        "x-i18n-description-fr": "Indique le résultat de la vérification de l’adresse. \nPour plus d’informations, reportez-vous au tableau des codes de résultat AVS.\n\n|Valeur|VISA|CARTE MASTERCARD|DÉCOUVRIR|Amex / JCB|\n|:----|:----|:----|:----|:----|\n|A|Correspondance partielle de l’adresse AVS|L’adresse correspond, pas le code postal.|Correspondances d’adresses, correspondances de codes postaux à cinq chiffres|L’adresse de facturation correspond, pas le code postal.|\n|D|N/A|N/A|N/A|Nom du client incorrect, correspondance avec le code postal|\n|E|N/A|N/A|N/A|Nom du client incorrect, correspondance entre l’adresse de facturation et le code postal|\n|F|N/A|N/A|N/A|Le nom du client est incorrect, l’adresse de facturation correspond.|\n|G|N/A|N/A|Les informations d’adresse ne sont pas vérifiées pour les transactions internationales|N/A|\n|K|N/A|N/A|N/A|Correspondances de noms de clients|\n|L|N/A|N/A|N/A|Le nom du client et le code postal correspondent.|\n|M|N/A|N/A|N/A|Correspondance entre le nom du client, l’adresse de facturation et le code postal.|\n|N|AVS non-match|Ni l’adresse ni le code postal ne correspondent.|Ni l’adresse ni le code postal ne correspondent.|L’adresse de facturation et le code postal ne correspondent pas.|\n|O|N/A|N/A|N/A|Correspondance entre le nom du client et l’adresse de facturation|\n|R|(AVS indéterminé outcome (retry)) V.I.P. convertira les valeurs non valides du champ 44.2 en R (AVS indetermined outcome (retry)).|Réessayer; système incapable de traiter.|N/A|Système indisponible ; Réessayer.|\n|S|N/A|AVS n’est actuellement pas pris en charge.|AVS n’est actuellement pas pris en charge.|AVS n’est actuellement pas pris en charge.|\n|L|N/A|N/A|Le code postal à neuf chiffres correspond, l’adresse ne correspond pas.|N/A|\n|U|(AVS impossible de vérifier) V.I.P. convertira un espace vide dans la zone 44.2 en U (AVS impossible de vérifier).|Aucune donnée du système d’émission/d’autorisation.|Réessayer; système incapable de traiter.|L’information n’est pas disponible.|\n|W|N/A|Pour les adresses américaines, le code postal à neuf chiffres correspond, l’adresse ne correspond pas ; pour une adresse en dehors du code postal américain correspond, l’adresse ne correspond pas.|Aucune donnée du système d’émetteur/d’autorisation|Le nom du client, l’adresse de facturation et le code postal sont tous corrects.|\n|X|N/A|Pour les adresses aux États-Unis, le code postal à neuf chiffres et les adresses correspondent ; pour les adresses en dehors des États-Unis, le code postal et l’adresse correspondent.|Appariement d’adresse, correspondance de code postal à neuf chiffres|N/A|\n|Y|(Match complet AVS)|Pour les adresses aux États-Unis, le code postal à cinq chiffres et l’adresse correspondent.|L’adresse correspond, le code postal ne correspond pas|L’adresse de facturation et le code postal correspondent|\n|Z|(Code postal/postal AVS uniquement (correspondance partielle))|Pour les adresses américaines, le code postal à cinq chiffres correspond, l’adresse ne correspond pas.|Le code postal à cinq chiffres correspond, l’adresse ne correspond pas|Le code postal correspond, pas l’adresse de facturation.|\n"
      },
      "cardSecurityCodeResult": {
        "type": "string",
        "description": "Indicates the CVD validation result. The first byte is the numeric CVD indicator sent in the request; the second byte is the response code. Possible response codes are shown in the CVD Result Code table (https://developer.moneris.com/More/Testing/CVD%20Result%20Codes).",
        "enum": [
          "MATCH",
          "NO_MATCH",
          "NOT_PROCESSED",
          "CVD_NOT_PRESENT",
          "NOT_CVD_PARTICIPANT",
          "AMEX_JCB_MATCH",
          "AMEX_JCB_INVALID",
          "OTHER"
        ],
        "example": "MATCH",
        "x-i18n-description-fr": "Indique le résultat de la validation CVD. Le premier octet est l’indicateur CVD numérique envoyé dans la demande ; Le deuxième octet est le code de réponse. Les codes de réponse possibles sont indiqués dans le tableau des codes de résultat CVD (https://developer.moneris.com/More/Testing/CVD%20Result%20Codes)."
      },
      "threeDSecureAuthenticationValueResult": {
        "type": "string",
        "description": "Indicates the Verified by Visa CAVV result. Possible response codes are shown in the CAVV Result Code table (https://developer.moneris.com/More/Testing/CAVV%20Result%20Codes).",
        "enum": [
          "AMEX_AEVV_FAILED_ATTEMPT_ISSUER_KEY",
          "AMEX_AEVV_FAILED_ATTEMPT_ISSUER_NOT_PARTICIPATING_NETWORK_KEY",
          "AMEX_AEVV_FAILED_ATTEMPT_PARTICIPATING_NOT_AVAILABLE_NETWORK_KEY",
          "AMEX_AEVV_FAILED_AUTHENTICATION_ISSUER_KEY",
          "AMEX_AEVV_PASSED_ATTEMPT_ISSUER_KEY",
          "AMEX_AEVV_PASSED_ATTEMPT_ISSUER_NOT_PARTICIPATING_NETWORK_KEY",
          "AMEX_AEVV_PASSED_ATTEMPT_PARTICIPATING_NOT_AVAILABLE_NETWORK_KEY",
          "AMEX_AEVV_PASSED_AUTHENTICATION_ISSUER_KEY",
          "AMEX_AEVV_UNCHECKED",
          "ISA_CAVV_NOT_PRESENT_OR_NOT_VERIFIED",
          "MASTERCARD_AUTHENTICATION_ATTEMPTED",
          "MASTERCARD_AUTHENTICATION_FAILED",
          "MASTERCARD_AUTHENTICATION_SUCCESSFUL",
          "VISA_CAVV_AUTHENTICATION_RESULTS_INVALID",
          "VISA_CAVV_FAILED_VALIDATION_ATTEMPTED",
          "VISA_CAVV_FAILED_VALIDATION_AUTHENTICATION",
          "VISA_CAVV_NOT_VALIDATED_ISSUER_NOT_PARTICIPATING",
          "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED",
          "VISA_CAVV_PASSED_VALIDATION_AUTHENTICATION",
          "VISA_CAVV_PASSED_VALIDATION_INFO_ONLY",
          "VISA_CAVV_WAS_NOT_VALIDATED_ATTEMPTED",
          "VISA_CAVV_WAS_NOT_VALIDATED_AUTHENTICATION"
        ],
        "example": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED",
        "x-i18n-description-fr": "Indique le résultat Verified by Visa CAVV. Les codes de réponse possibles sont indiqués dans le tableau des codes de résultat CAVV (https://developer.moneris.com/More/Testing/CAVV%20Result%20Codes)."
      },
      "checkResults": {
        "description": "CVD, AVS, 3DS, ITD Result Codes",
        "type": "object",
        "properties": {
          "addressVerificationServiceResultCode": {
            "$ref": "#/components/schemas/addressVerificationServiceResult"
          },
          "cardSecurityCodeResultCode": {
            "$ref": "#/components/schemas/cardSecurityCodeResult"
          },
          "threeDSecureAuthenticationValueResultCode": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationValueResult"
          }
        },
        "x-i18n-description-fr": "Codes de résultat CVD, AVS, 3DS, ITD"
      },
      "originalAmount": {
        "type": "object",
        "description": "Original amount for the transaction. The value must be in cents. Therefore $10.59 must be sent as 1059",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 15000,
          "currency": "CAD"
        },
        "x-i18n-description-fr": "Montant initial de la transaction. La valeur doit être exprimée en centimes. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059"
      },
      "issuerId": {
        "type": "string",
        "description": "Unique identifier for the cardholder's stored credentials. Sent back in the response from the card brand when processing a Credential on File transaction.",
        "minLength": 1,
        "maxLength": 15,
        "example": "A",
        "x-i18n-description-fr": "Identifiant unique des informations d’identification stockées du titulaire de la carte. Renvoyée dans la réponse de la marque de la carte lors du traitement d’une transaction d’informations d’identification enregistrées."
      },
      "cardOnFileResponse": {
        "type": "object",
        "description": "Contains fields related to the Credential on File (CoF) ",
        "properties": {
          "originalAmount": {
            "$ref": "#/components/schemas/originalAmount"
          },
          "issuerId": {
            "$ref": "#/components/schemas/issuerId"
          }
        },
        "x-i18n-description-fr": "Contient des champs liés aux informations d’identification enregistrées (CoF) "
      },
      "resourceId": {
        "type": "string",
        "description": "Displays a Unique Identifier required to identify API resources.\nNote: This field is required for any future follow-on transactions, including Refunds, Corrections, Completions, Reversals, etc.\n",
        "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
        "minLength": 30,
        "maxLength": 30,
        "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
        "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n"
      },
      "refundAmount": {
        "type": "object",
        "description": "Total refund amount for the transaction. The value must be in cents. Therefore $10.59 must be sent as 1059",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 17500,
          "currency": "CAD"
        },
        "x-i18n-description-fr": "Montant total du remboursement pour la transaction. La valeur doit être exprimée en centimes. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059"
      },
      "refundDetails": {
        "description": "Refund details if any has occured.",
        "type": "object",
        "properties": {
          "refundIds": {
            "description": "List of Refunds associated with this Payment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resourceId"
            },
            "x-i18n-description-fr": "Liste des remboursements associés à ce paiement"
          },
          "refundedAmount": {
            "$ref": "#/components/schemas/refundAmount"
          }
        },
        "x-i18n-description-fr": "Les détails du remboursement, le cas échéant."
      },
      "paymentResponse": {
        "title": "paymentResponse",
        "type": "object",
        "properties": {
          "paymentId": {
            "description": "The unique identifier of the payment.",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "transactionDateTime": {
            "$ref": "#/components/schemas/transactionDateTime"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "amount": {
            "description": "This amount excludes surcharge, application and convenience fee.",
            "$ref": "#/components/schemas/transactionAmount",
            "x-i18n-description-fr": "Ce montant ne comprend pas les frais supplémentaires, les frais de dossier et les frais de commodité."
          },
          "authorizedAmount": {
            "description": "This amount includes transactionAmount and all applicable fees (surcharge, application and convenience).",
            "$ref": "#/components/schemas/transactionAmount",
            "x-i18n-description-fr": "Ce montant comprend le transactionAmount et tous les frais applicables (supplément, application et commodité)."
          },
          "capturableAmount": {
            "$ref": "#/components/schemas/transactionAmount"
          },
          "amountDetails": {
            "$ref": "#/components/schemas/amountDetails"
          },
          "customerId": {
            "description": "Unique Customer Identifier.",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "paymentStatus": {
            "$ref": "#/components/schemas/paymentStatus"
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/statusDetails"
          },
          "checkResults": {
            "$ref": "#/components/schemas/checkResults"
          },
          "cardOnFileResponse": {
            "$ref": "#/components/schemas/cardOnFileResponse"
          },
          "refunds": {
            "$ref": "#/components/schemas/refundDetails"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "self": {
        "description": "Pagination link pointing to the current page.",
        "type": "string",
        "format": "uri",
        "nullable": true,
        "x-i18n-description-fr": "Lien de pagination pointant vers la page actuelle."
      },
      "first": {
        "description": "Pagination link pointing to the first page.",
        "type": "string",
        "format": "uri",
        "nullable": true,
        "x-i18n-description-fr": "Lien de pagination pointant vers la première page."
      },
      "last": {
        "description": "Pagination link pointing to the last page.",
        "type": "string",
        "format": "uri",
        "nullable": true,
        "x-i18n-description-fr": "Lien de pagination pointant vers la dernière page."
      },
      "next": {
        "description": "Pagination link pointing to the next page.",
        "type": "string",
        "format": "uri",
        "nullable": true,
        "x-i18n-description-fr": "Lien de pagination pointant vers la page suivante."
      },
      "previous": {
        "description": "Pagination link pointing to the previous page.",
        "type": "string",
        "format": "uri",
        "nullable": true,
        "x-i18n-description-fr": "Lien de pagination pointant vers la page précédente."
      },
      "paymentResponseList": {
        "title": "paymentResponseList",
        "type": "object",
        "properties": {
          "data": {
            "description": "Payments list.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/paymentResponse"
            },
            "x-i18n-description-fr": "Liste des paiements."
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "parameterError": {
        "title": "Parameter error",
        "description": "Request property or header related error.",
        "type": "object",
        "properties": {
          "parameterName": {
            "type": "string",
            "description": "Property or header name. Can contain nested path separated by '.'",
            "example": "address.postalCode",
            "x-i18n-description-fr": "Nom de la propriété ou de l’en-tête. Peut contenir des chemins d’accès imbriqués séparés par '.'"
          },
          "parameterValue": {
            "type": "string",
            "nullable": true,
            "description": "Property or header value string representation.",
            "example": "MAP3J8",
            "x-i18n-description-fr": "Représentation de chaîne de valeur de propriété ou d’en-tête."
          },
          "reasonCode": {
            "type": "string",
            "description": "Reason that triggered the error.",
            "enum": [
              "INVALID_FORMAT",
              "REQUIRED_FIELD",
              "INVALID_VALUE"
            ],
            "example": "INVALID_FORMAT",
            "x-i18n-description-fr": "Raison qui a déclenché l’erreur."
          },
          "errorMessage": {
            "type": "string",
            "nullable": true,
            "description": "Human readable message of the parameter error.",
            "example": "Required properties are missing from object: postalCode.",
            "x-i18n-description-fr": "Message lisible par l’homme de l’erreur de paramètre."
          }
        },
        "x-i18n-description-fr": "Erreur liée à la propriété ou à l’en-tête de la demande."
      },
      "error": {
        "description": "Error response details.",
        "properties": {
          "type": {
            "description": "A URI reference that identifies the problem type.  Ideally it should be a stable URL to the documentation of the details about this type of error but it also can be a URN.  If nothing can be provided, a \"about:blank\" value is returned.\n",
            "type": "string",
            "format": "uri",
            "example": "https://developer.moneris.com/docs/error-codes",
            "x-i18n-description-fr": "Référence d’URI qui identifie le type de problème.  Idéalement, il devrait s’agir d’une URL stable pour la documentation des détails de ce type d’erreur, mais il peut également s’agir d’un URN.  Si rien ne peut être fourni, une valeur « about :blank » est renvoyée.\n"
          },
          "title": {
            "description": "A short, human-readable summary of the problem type.   It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization\n",
            "type": "string",
            "example": "INSUFFICIENT_FUNDS",
            "nullable": true,
            "x-i18n-description-fr": "Un résumé court et lisible par l’homme du type de problème.   Il NE DEVRAIT PAS changer d’une occurrence à l’autre du problème, sauf à des fins de localisation\n"
          },
          "status": {
            "description": "it conveys the HTTP status code used for the convenience of the consumer.\n",
            "type": "integer",
            "format": "int32",
            "minimum": 100,
            "maximum": 505,
            "nullable": true,
            "x-i18n-description-fr": "il transmet le code d’état HTTP utilisé pour la commodité du consommateur.\n"
          },
          "detail": {
            "description": "A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n",
            "type": "string",
            "example": "Funds are insufficient to execute the operation.",
            "nullable": true,
            "x-i18n-description-fr": "Un message lisible par l’homme fournissant plus de détails sur l’erreur. Pour les erreurs de carte, ces messages peuvent être affichés à vos utilisateurs.\n"
          },
          "instance": {
            "description": "A URI reference that identifies the specific occurrence of the problem. Typically, this resolves to a resource that might include more details about the problem.\n",
            "type": "string",
            "example": "/payments/12f3e0a8-1d68-2b86-dd30-4ca51bb66e10",
            "format": "uri",
            "nullable": true,
            "x-i18n-description-fr": "Référence d’URI qui identifie l’occurrence spécifique du problème. En règle générale, cela se résout en une ressource qui peut inclure plus de détails sur le problème.\n"
          },
          "category": {
            "description": "The type of error returned. \n - `API_ERROR`: This occurs due to an intermittent issue.  \n - `IDEMPOTENCY_ERROR`: The idempotency key has already been used.\n - `INVALID_REQUEST_ERROR`: The data provided in the request is invalid.\n - `DECLINED_ERROR`: Transaction was declined by the issuer.\n - `UNAUTHORIZED_ERROR`: Caller not authenticated, or not allowed to execute the current operation.\n - `INTERNAL_SERVER_ERROR`: An internal issue with our servers has occured.\n",
            "enum": [
              "API_ERROR",
              "IDEMPOTENCY_ERROR",
              "INVALID_REQUEST_ERROR",
              "DECLINED_ERROR",
              "UNAUTHORIZED_ERROR",
              "INTERNAL_SERVER_ERROR"
            ],
            "type": "string",
            "example": "DECLINED_ERROR",
            "x-i18n-description-fr": "Type d’erreur renvoyé. \n - `API_ERROR` : cela se produit en raison d’un problème intermittent.  \n - `IDEMPOTENCY_ERROR` : la clé d’idempotence a déjà été utilisée.\n - `INVALID_REQUEST_ERROR` : les données fournies dans la demande ne sont pas valides.\n - `DECLINED_ERROR` : La transaction a été refusée par l’émetteur.\n - `UNAUTHORIZED_ERROR` : l’appelant n’est pas authentifié ou n’est pas autorisé à exécuter l’opération en cours.\n - `INTERNAL_SERVER_ERROR` : Un problème interne avec nos serveurs s’est produit.\n"
          },
          "errors": {
            "type": "array",
            "description": "List of validation errors when error category is INVALID_REQUEST_ERROR.",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/parameterError"
            },
            "example": [
              {
                "parameterName": "address.postalCode",
                "parameterValue": "MAP3J8",
                "reasonCode": "invalid_format"
              }
            ],
            "x-i18n-description-fr": "Liste des erreurs de validation lorsque la catégorie d’erreur est INVALID_REQUEST_ERROR."
          }
        },
        "title": "API Error",
        "type": "object",
        "x-i18n-description-fr": "Détails de la réponse d’erreur."
      },
      "idempotencyKey": {
        "type": "string",
        "description": "A Unique Identifier that is required for handling idempotent requests. \n\nNote: Moneris encourages the use of UUID Version 4 in APIs as an idempotency key.\"\n",
        "minLength": 1,
        "maxLength": 36,
        "example": "6q5w4e7r8t9y",
        "x-i18n-description-fr": "Identificateur unique requis pour le traitement des demandes idempotentes. \n\nRemarque : Moneris encourage l’utilisation de la version 4 de l’UUID dans les API comme clé d’idempotence.\n"
      },
      "cardNumber": {
        "type": "string",
        "description": "Customer's credit / debit card number (Primary Account Number).",
        "minLength": 14,
        "maxLength": 16,
        "example": 4444111122223333,
        "x-i18n-description-fr": "Numéro de carte de crédit/débit du client (numéro de compte principal)."
      },
      "cardSecurityCode": {
        "type": "string",
        "pattern": "[0-9]*",
        "description": "CVD value located on credit card. The CVD value (supplied by the cardholder) must only be passed to the payment gateway. Under no circumstances may it be stored for subsequent use or displayed as part of the receipt information.",
        "minLength": 3,
        "maxLength": 4,
        "example": 123,
        "x-i18n-description-fr": "Valeur CVD située sur la carte de crédit. La valeur CVD (fournie par le titulaire de la carte) ne doit être transmise qu’à la passerelle de paiement. En aucun cas, ils ne peuvent être stockés pour une utilisation ultérieure ou affichés dans le cadre des informations de reçu."
      },
      "paymentMethodCard": {
        "type": "object",
        "description": "Credit/Debit/Gift Card payment method details.",
        "properties": {
          "cardNumber": {
            "$ref": "#/components/schemas/cardNumber"
          },
          "expiryMonth": {
            "$ref": "#/components/schemas/expiryMonth"
          },
          "expiryYear": {
            "$ref": "#/components/schemas/expiryYear"
          },
          "cardSecurityCode": {
            "$ref": "#/components/schemas/cardSecurityCode"
          }
        },
        "required": [
          "cardNumber",
          "expiryMonth",
          "expiryYear",
          "cardSecurityCode"
        ],
        "x-i18n-description-fr": "Détails du mode de paiement par carte de crédit/débit/carte-cadeau."
      },
      "token": {
        "type": "string",
        "description": "This field is created when a temporary token is created and returned. It is a unique profile identifier, and is a required value for temporary token transactions.",
        "minLength": 25,
        "maxLength": 28,
        "example": "ot-HCUeCFtXJfEZSSUqvUJk0",
        "x-i18n-description-fr": "Ce champ est créé lorsqu’un jeton temporaire est créé et renvoyé. Il s’agit d’un identificateur de profil unique et d’une valeur obligatoire pour les transactions de jetons temporaires."
      },
      "paymentMethodData": {
        "title": "paymentMethodData",
        "type": "object",
        "description": "Payment method details",
        "properties": {
          "paymentMethodType": {
            "$ref": "#/components/schemas/paymentMethodType"
          },
          "card": {
            "$ref": "#/components/schemas/paymentMethodCard"
          },
          "temporaryToken": {
            "$ref": "#/components/schemas/token"
          },
          "permanentToken": {
            "$ref": "#/components/schemas/token"
          }
        },
        "required": [
          "paymentMethodType"
        ],
        "x-i18n-description-fr": "Détails du mode de paiement"
      },
      "paymentMethodRequest": {
        "title": "paymentMethodRequest",
        "description": "Payment Method details.\n\nNote: If defined, this will result in the creation of Payment Method as defined in the Payment Method API.\n",
        "type": "object",
        "nullable": true,
        "properties": {
          "cardholderInformation": {
            "$ref": "#/components/schemas/cardholderInformation"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/contactDetails"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/address"
          },
          "paymentMethodData": {
            "$ref": "#/components/schemas/paymentMethodData"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "paymentMethodData"
        ],
        "x-i18n-description-fr": "Détails du mode de paiement.\n\nRemarque : Si cette option est définie, cela entraînera la création d’un mode de paiement tel que défini dans l’API du mode de paiement.\n"
      },
      "automaticCapture": {
        "type": "boolean",
        "description": "This flag is used to overide the default payment transaction type enabled on the Merchant profile. Yes (Default) will cause Moneris to capture the payment when it is authorized. No will cause Moneris to place a hold on the funds when the payment is authorized.",
        "default": true,
        "x-i18n-description-fr": "Cet indicateur est utilisé pour remplacer le type de transaction de paiement par défaut activé sur le profil du marchand. Oui (par défaut) fera en sorte que Moneris saisira le paiement lorsqu’il est autorisé. Non, Moneris devra retenir les fonds lorsque le paiement est autorisé."
      },
      "threeDSecureAuthenticationValue": {
        "type": "string",
        "description": "The Cardholder Authentication Verification Value (CAVV), the Accountholder Authentication Value (AAV), and the American Express Verification Value (AEVV), are the values that allows Visa, Mastercard and American Express to validate the integrity of the Visa Secure, Mastercard Identity Check and American Express SafeKey transaction data. These values are passed back from the issuer to the merchant after the authentication has taken place. The merchant then integrates the CAVV/AAV/AEVV value into the authorization request using the Purchase or Pre-Authorization with 3-D Secure transaction type.",
        "maxLength": 50,
        "example": 109260000719349,
        "x-i18n-description-fr": "La valeur de vérification de l’authentification du titulaire de carte (CAVV), la valeur d’authentification du titulaire de compte (AAV) et la valeur de vérification American Express (AEVV) sont les valeurs qui permettent à Visa, Mastercard et American Express de valider l’intégrité des données de transaction Visa Secure, Mastercard Identity Check et American Express SafeKey. Ces valeurs sont renvoyées de l’émetteur au commerçant une fois l’authentification effectuée. Le commerçant intègre ensuite la valeur CAVV/AAV/AEVV dans la demande d’autorisation à l’aide du type de transaction Achat ou Pré-autorisation avec 3-D Secure."
      },
      "threeDSecureVersion": {
        "type": "string",
        "description": "Required if sending a 3-D Secure version 2.0+ transaction. Default to V2.1 if no value is provided.",
        "maxLength": 10,
        "example": 2.2,
        "x-i18n-description-fr": "Obligatoire en cas d’envoi d’une transaction 3-D Secure version 2.0+. Par défaut, V2.1 si aucune valeur n’est fournie."
      },
      "threeDSecureServerTransactionId": {
        "type": "string",
        "description": "Required if sending a version 3-D Secure 2.0+ transaction. Data is obtained from a Cavv Lookup Request or MPI 3DS Authentication Request transaction",
        "maxLength": 36,
        "format": "uuid",
        "example": "ad9b0eda-bf9b-4288-b188-9467993603e1",
        "x-i18n-description-fr": "Obligatoire en cas d’envoi d’une transaction en version 3-D Secure 2.0+. Les données sont obtenues à partir d’une transaction de demande de recherche Cavv ou de demande d’authentification MPI 3DS"
      },
      "threeDSecureDirectoryServerTransactionId": {
        "type": "string",
        "description": "Universally unique transaction identifier assigned by the 3DS Directory Server (DS) to identify a single transaction.",
        "maxLength": 36,
        "format": "uuid",
        "example": "ad9b0eda-bf9b-4288-b188-9467993603e1",
        "x-i18n-description-fr": "Identificateur de transaction unique universel attribué par le serveur d’annuaire 3DS (DS) pour identifier une transaction unique."
      },
      "threeDSecureData": {
        "description": "Data related to 3-D Secure",
        "type": "object",
        "properties": {
          "threeDSecureAuthenticationValue": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationValue"
          },
          "threeDSecureVersion": {
            "$ref": "#/components/schemas/threeDSecureVersion"
          },
          "threeDSecureServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureServerTransactionId"
          },
          "threeDSecureDirectoryServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureDirectoryServerTransactionId"
          }
        },
        "x-i18n-description-fr": "Données relatives à 3-D Secure"
      },
      "paymentIndicator": {
        "type": "string",
        "description": "Indicates the current or intended use of the credentials",
        "enum": [
          "UNSCHEDULED_COF",
          "RECURRING",
          "MERCHANT_INITIATED",
          "VARIABLE_RECURRING",
          "CUSTOMER_INITIATED"
        ],
        "example": "UNSCHEDULED_COF",
        "x-i18n-description-fr": "Indique l’utilisation actuelle ou prévue des informations d’identification"
      },
      "paymentInformation": {
        "type": "string",
        "description": "Describes whether the transaction is the first or subsequent in the series",
        "enum": [
          "FIRST",
          "SUBSEQUENT"
        ],
        "example": "FIRST",
        "x-i18n-description-fr": "Indique s’il s’agit de la première transaction ou d’une transaction ultérieure de la série"
      },
      "ipv4": {
        "type": "string",
        "format": "ipv4",
        "description": "Internet Protocol version 4 (IPv4).",
        "example": "104.75.173.179",
        "nullable": true,
        "x-i18n-description-fr": "Protocole Internet version 4 (IPv4)."
      },
      "ipv6": {
        "type": "string",
        "format": "ipv6",
        "description": "Internet Protocol version 6 (IPv6).",
        "example": "2600:1401:2::8a",
        "nullable": true,
        "x-i18n-description-fr": "Protocole Internet version 6 (IPv6)."
      },
      "createPaymentRequest": {
        "title": "paymentRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "amount": {
            "description": "This amount excludes surcharge, application and converience fee.",
            "$ref": "#/components/schemas/transactionAmount",
            "x-i18n-description-fr": "Ce montant ne comprend pas les frais supplémentaires, les frais de dossier et les frais de conversion."
          },
          "amountDetails": {
            "nullable": true,
            "description": "Additional amount details",
            "type": "object",
            "properties": {
              "subTotalAmount": {
                "$ref": "#/components/schemas/subTotalAmount"
              },
              "tipAmount": {
                "$ref": "#/components/schemas/tipAmount"
              }
            },
            "x-i18n-description-fr": "Détails supplémentaires sur le montant"
          },
          "customerId": {
            "nullable": true,
            "description": "Unique Customer Identifier.",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentMethodId": {
            "description": "Unique Payment Method Identifier.\n\nNote: Must be provided if no payment method object is defined in the request.\n",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodRequest"
          },
          "storePaymentMethod": {
            "$ref": "#/components/schemas/storePaymentMethod"
          },
          "ecommerceIndicator": {
            "description": "Describes the category of e-commerce transaction being processed.",
            "x-i18n-description-fr": "Catégorie de transaction de commerce électronique en cours de traitement.  Lorsqu’elle est renvoyée dans le responese, elle peut être différente de la valeur envoyée dans la demande au cas où la transaction aurait été déclassée par l’émetteur.\n",
            "type": "string",
            "enum": [
              "MAIL_TELEPHONE_ORDER_SINGLE",
              "MAIL_TELEPHONE_ORDER_RECURRING",
              "MAIL_TELEPHONE_ORDER_INSTALMENT",
              "MAIL_TELEPHONE_ORDER_UNKNOWN",
              "AUTHENTICATED_ECOMMERCE",
              "NON_AUTHENTICATED_ECOMMERCE",
              "SSL_MERCHANT"
            ],
            "example": "AUTHENTICATED_ECOMMERCE",
            "default": "SSL_MERCHANT"
          },
          "automaticCapture": {
            "$ref": "#/components/schemas/automaticCapture"
          },
          "customData": {
            "nullable": true,
            "description": "Merchant can send custom meta data with the transaction in this object. Moneris will echo these values back in response.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "minLength": 1,
              "maxLength": 50
            },
            "maxProperties": 10,
            "x-i18n-description-fr": "Le marchand peut envoyer des métadonnées personnalisées avec la transaction dans cet objet. Moneris fera écho à ces valeurs en réponse."
          },
          "dynamicDescriptor": {
            "nullable": true,
            "type": "string",
            "description": "Merchant defined description sent on a per-transaction basis that will appear on the credit card statement.  \nDependent on the card Issuer, the statement will typically show the dynamic descriptor appended to the merchant's existing business name separated by the '/' character.  \n\nNote: The combined length of the merchant's business name, forward slash '/' character, and the dynamic descriptor may not exceed 22 characters.\n",
            "minLength": 1,
            "maxLength": 20,
            "example": "moneris",
            "x-i18n-description-fr": "Description définie par le commerçant envoyée pour chaque transaction et qui apparaîtra sur le relevé de carte de crédit.  \nEn fonction de l’émetteur de la carte, le relevé affichera généralement le descripteur dynamique ajouté au nom commercial existant du commerçant, séparé par le caractère « / ».  \n\nRemarque : La longueur combinée du nom commercial du commerçant, de la barre oblique « / » et du descripteur dynamique ne doit pas dépasser 22 caractères.\n"
          },
          "threeDSecureAuthenticationId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "threeDSecureData": {
            "$ref": "#/components/schemas/threeDSecureData"
          },
          "cardOnFileInformation": {
            "nullable": true,
            "type": "object",
            "description": "Contains fields related to the Credential on File (CoF) ",
            "properties": {
              "paymentIndicator": {
                "$ref": "#/components/schemas/paymentIndicator"
              },
              "paymentInformation": {
                "$ref": "#/components/schemas/paymentInformation"
              },
              "issuerId": {
                "$ref": "#/components/schemas/issuerId"
              },
              "originalAmount": {
                "$ref": "#/components/schemas/originalAmount"
              }
            },
            "required": [
              "paymentIndicator",
              "paymentInformation",
              "issuerId"
            ],
            "example": {
              "paymentIndicator": "CUSTOMER_INITIATED",
              "paymentInformation": "FIRST",
              "issuerId": "123asd"
            },
            "x-i18n-description-fr": "Contient des champs liés aux informations d’identification enregistrées (CoF) "
          },
          "ipv4": {
            "$ref": "#/components/schemas/ipv4"
          },
          "ipv6": {
            "$ref": "#/components/schemas/ipv6"
          }
        },
        "required": [
          "idempotencyKey",
          "amount"
        ]
      },
      "cancelPaymentRequest": {
        "title": "cancelPaymentRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "reason": {
            "nullable": true,
            "description": "Optional reason for canceling the payment.",
            "x-i18n-description-fr": "Raison du remboursement.",
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "Defective product"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "completionRequest": {
        "title": "completionRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "amount": {
            "description": "Amount for the transaction",
            "$ref": "#/components/schemas/transactionAmount",
            "x-i18n-description-fr": "Montant de la transaction"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "paymentMethodResponseList": {
        "description": "List of Payment Methods",
        "type": "object",
        "title": "paymentMethodResponseList",
        "properties": {
          "data": {
            "description": "Payment Method list",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/paymentMethodResponse"
            },
            "x-i18n-description-fr": "Liste des modes de paiement"
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        },
        "x-i18n-description-fr": "Liste des modes de paiement"
      },
      "createPaymentMethodRequest": {
        "title": "paymentMethodRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "cardholderInformation": {
            "$ref": "#/components/schemas/cardholderInformation"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/contactDetails"
          },
          "billingAddress": {
            "nullable": true,
            "type": "object",
            "description": "The postal address including street, town/city, province, and postal code.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "x-i18n-description-fr": "L’adresse postale, y compris la rue, la ville, la province et le code postal."
          },
          "paymentMethodData": {
            "$ref": "#/components/schemas/paymentMethodData"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey",
          "paymentMethodData"
        ]
      },
      "updatePaymentMethodRequest": {
        "title": "paymentMethodRequest",
        "type": "object",
        "properties": {
          "cardholderInformation": {
            "$ref": "#/components/schemas/cardholderInformation"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/contactDetails"
          },
          "billingAddress": {
            "nullable": true,
            "type": "object",
            "description": "The postal address including street, town/city, province, and postal code.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "x-i18n-description-fr": "L’adresse postale, y compris la rue, la ville, la province et le code postal."
          },
          "paymentMethodData": {
            "$ref": "#/components/schemas/paymentMethodData"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "paymentMethodData"
        ]
      },
      "refundStatus": {
        "type": "string",
        "description": "Refund Status description.",
        "enum": [
          "DECLINED",
          "DECLINED_RETRY",
          "PROCESSING",
          "SUCCEEDED"
        ],
        "example": "SUCCEEDED",
        "x-i18n-description-fr": "Description de l’état du remboursement."
      },
      "reason": {
        "type": "string",
        "description": "Reason for the refund.",
        "minLength": 1,
        "maxLength": 100,
        "example": "Defective product",
        "nullable": true,
        "x-i18n-description-fr": "Raison du remboursement."
      },
      "refundResponse": {
        "title": "refundResponse",
        "type": "object",
        "properties": {
          "refundId": {
            "description": "The unique identifier of the refund",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "refundAmount": {
            "$ref": "#/components/schemas/refundAmount"
          },
          "customerId": {
            "description": "Unique Customer Identifier.",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "status": {
            "$ref": "#/components/schemas/refundStatus"
          },
          "statusDetails": {
            "$ref": "#/components/schemas/statusDetails"
          },
          "reason": {
            "$ref": "#/components/schemas/reason"
          },
          "cardOnFileResponse": {
            "$ref": "#/components/schemas/cardOnFileResponse"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "refundResponseList": {
        "title": "refundResponseList",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/refundResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "dynamicDescriptor": {
        "type": "string",
        "description": "Merchant defined description sent on a per-transaction basis that will appear on the credit card statement.  \nDependent on the card Issuer, the statement will typically show the dynamic descriptor appended to the merchant's existing business name separated by the '/' character.  \n\nNote: The combined length of the merchant's business name, forward slash '/' character, and the dynamic descriptor may not exceed 22 characters.\n",
        "minLength": 1,
        "maxLength": 20,
        "example": "moneris",
        "x-i18n-description-fr": "Description définie par le commerçant envoyée pour chaque transaction et qui apparaîtra sur le relevé de carte de crédit.  \nEn fonction de l’émetteur de la carte, le relevé affichera généralement le descripteur dynamique ajouté au nom commercial existant du commerçant, séparé par le caractère « / ».  \n\nRemarque : La longueur combinée du nom commercial du commerçant, de la barre oblique « / » et du descripteur dynamique ne doit pas dépasser 22 caractères.\n"
      },
      "createRefundRequest": {
        "title": "refundRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "paymentId": {
            "description": "The unique identifier of the payment",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "refundAmount": {
            "$ref": "#/components/schemas/refundAmount"
          },
          "customerId": {
            "nullable": true,
            "description": "Unique Customer Identifier.",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "dynamicDescriptor": {
            "$ref": "#/components/schemas/dynamicDescriptor"
          },
          "cofInformation": {
            "nullable": true,
            "type": "object",
            "description": "Contains fields related to the Credential on File (CoF) ",
            "properties": {
              "paymentIndicator": {
                "$ref": "#/components/schemas/paymentIndicator"
              },
              "paymentInformation": {
                "$ref": "#/components/schemas/paymentInformation"
              },
              "issuerId": {
                "$ref": "#/components/schemas/issuerId"
              },
              "originalAmount": {
                "$ref": "#/components/schemas/originalAmount"
              }
            },
            "required": [
              "paymentIndicator",
              "paymentInformation",
              "issuerId"
            ],
            "example": {
              "paymentIndicator": "CUSTOMER_INITIATED",
              "paymentInformation": "FIRST",
              "issuerId": "123asd"
            },
            "x-i18n-description-fr": "Contient des champs liés aux informations d’identification enregistrées (CoF) "
          },
          "ipv4": {
            "$ref": "#/components/schemas/ipv4"
          },
          "ipv6": {
            "$ref": "#/components/schemas/ipv6"
          },
          "ecommerceIndicator": {
            "$ref": "#/components/schemas/ecommerceIndicator"
          },
          "reason": {
            "$ref": "#/components/schemas/reason"
          }
        },
        "required": [
          "idempotencyKey",
          "refundAmount",
          "paymentId"
        ]
      },
      "validationStatus": {
        "type": "string",
        "description": "Validation Status description.",
        "enum": [
          "CANCELED",
          "DECLINED",
          "DECLINED_RETRY",
          "PROCESSING",
          "SUCCEEDED"
        ],
        "example": "SUCCEEDED",
        "x-i18n-description-fr": "Description du statut de validation."
      },
      "validationResponse": {
        "title": "createValidationResponse",
        "type": "object",
        "properties": {
          "validationId": {
            "description": "The unique identifier of the Validation",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "validationStatus": {
            "$ref": "#/components/schemas/validationStatus"
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/statusDetails"
          },
          "checkResults": {
            "$ref": "#/components/schemas/checkResults"
          },
          "cardOnFileResponse": {
            "$ref": "#/components/schemas/cardOnFileResponse"
          },
          "customerId": {
            "description": "Unique Customer Identifier.",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "validationsResponseList": {
        "title": "validationsResponseList",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/validationResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "createValidationRequest": {
        "title": "Creates a Validation Request",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "paymentMethodId": {
            "description": "Unique Payment Method Identifier.\n\nNote: Must be provided if no payment method object is defined in the request.\n",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodRequest"
          },
          "storePaymentMethod": {
            "$ref": "#/components/schemas/storePaymentMethod"
          },
          "customerId": {
            "nullable": true,
            "description": "Unique Customer Identifier.",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "cardOnFileInformation": {
            "nullable": true,
            "type": "object",
            "description": "Contains fields related to the Credential on File (CoF) ",
            "properties": {
              "paymentIndicator": {
                "$ref": "#/components/schemas/paymentIndicator"
              },
              "paymentInformation": {
                "$ref": "#/components/schemas/paymentInformation"
              },
              "issuerId": {
                "$ref": "#/components/schemas/issuerId"
              },
              "originalAmount": {
                "$ref": "#/components/schemas/originalAmount"
              }
            },
            "required": [
              "paymentIndicator",
              "paymentInformation",
              "issuerId"
            ],
            "example": {
              "paymentIndicator": "CUSTOMER_INITIATED",
              "paymentInformation": "FIRST",
              "issuerId": "123asd"
            },
            "x-i18n-description-fr": "Contient des champs liés aux informations d’identification enregistrées (CoF) "
          },
          "dynamicDescriptor": {
            "$ref": "#/components/schemas/dynamicDescriptor"
          },
          "threeDSecureAuthenticationId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "threeDSecureData": {
            "$ref": "#/components/schemas/threeDSecureData"
          },
          "ecommerceIndicator": {
            "description": "Describes the category of e-commerce transaction being processed.",
            "x-i18n-description-fr": "Catégorie de transaction de commerce électronique en cours de traitement.  Lorsqu’elle est renvoyée dans le responese, elle peut être différente de la valeur envoyée dans la demande au cas où la transaction aurait été déclassée par l’émetteur.\n",
            "type": "string",
            "enum": [
              "MAIL_TELEPHONE_ORDER_SINGLE",
              "MAIL_TELEPHONE_ORDER_RECURRING",
              "MAIL_TELEPHONE_ORDER_INSTALMENT",
              "MAIL_TELEPHONE_ORDER_UNKNOWN",
              "AUTHENTICATED_ECOMMERCE",
              "NON_AUTHENTICATED_ECOMMERCE",
              "SSL_MERCHANT"
            ],
            "example": "AUTHENTICATED_ECOMMERCE",
            "default": "SSL_MERCHANT"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "firstName": {
        "type": "string",
        "description": "Customer first name",
        "minLength": 1,
        "maxLength": 30,
        "example": "John",
        "nullable": true,
        "x-i18n-description-fr": "Prénom du client"
      },
      "middleName": {
        "type": "string",
        "description": "Customer middle name",
        "minLength": 1,
        "maxLength": 30,
        "example": "J.",
        "nullable": true,
        "x-i18n-description-fr": "Deuxième prénom du client"
      },
      "lastName": {
        "type": "string",
        "description": "Customer last name",
        "minLength": 1,
        "maxLength": 30,
        "example": "Doe",
        "nullable": true,
        "x-i18n-description-fr": "Nom de famille du client"
      },
      "phoneNumber": {
        "type": "string",
        "description": "Customer's phone number",
        "minLength": 1,
        "maxLength": 30,
        "example": "1-866-319-7450",
        "nullable": true,
        "x-i18n-description-fr": "Numéro de téléphone du client"
      },
      "email": {
        "type": "string",
        "format": "iso-639",
        "description": "Customer's email address. See https://www.rfc-editor.org/rfc/rfc5322",
        "minLength": 1,
        "maxLength": 320,
        "example": "moneris@moneris.com",
        "nullable": true,
        "x-i18n-description-fr": "Adresse e-mail du client. Voir https://www.rfc-editor.org/rfc/rfc5322"
      },
      "customerResponse": {
        "title": "customerResponse",
        "type": "object",
        "properties": {
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "customerId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/middleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/address"
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/phoneNumber"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "customerResponseList": {
        "title": "customerResponseList",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/customerResponse"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "createCustomerRequest": {
        "title": "customerRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/middleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          },
          "address": {
            "nullable": true,
            "type": "object",
            "description": "The postal address including street, town/city, province, and postal code.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "x-i18n-description-fr": "L’adresse postale, y compris la rue, la ville, la province et le code postal."
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "The postal address including street, town/city, province, and postal code.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "x-i18n-description-fr": "L’adresse postale, y compris la rue, la ville, la province et le code postal."
          },
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Customer's phone number",
            "minLength": 1,
            "maxLength": 30,
            "example": "1-866-319-7450",
            "x-i18n-description-fr": "Numéro de téléphone du client"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "iso-639",
            "description": "Customer's email address. See https://www.rfc-editor.org/rfc/rfc5322",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com",
            "x-i18n-description-fr": "Adresse e-mail du client. Voir https://www.rfc-editor.org/rfc/rfc5322"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "customerRequest": {
        "title": "customerRequest",
        "type": "object",
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/middleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          },
          "address": {
            "nullable": true,
            "type": "object",
            "description": "The postal address including street, town/city, province, and postal code.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "x-i18n-description-fr": "L’adresse postale, y compris la rue, la ville, la province et le code postal."
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "The postal address including street, town/city, province, and postal code.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "x-i18n-description-fr": "L’adresse postale, y compris la rue, la ville, la province et le code postal."
          },
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Customer's phone number",
            "minLength": 1,
            "maxLength": 30,
            "example": "1-866-319-7450",
            "x-i18n-description-fr": "Numéro de téléphone du client"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "iso-639",
            "description": "Customer's email address. See https://www.rfc-editor.org/rfc/rfc5322",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com",
            "x-i18n-description-fr": "Adresse e-mail du client. Voir https://www.rfc-editor.org/rfc/rfc5322"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "threeDSecureMessageCategory": {
        "type": "string",
        "description": "Identifies the category of the message for a specific use case.",
        "enum": [
          "PAYMENT",
          "NON_PAYMENT"
        ],
        "example": "PAYMENT",
        "x-i18n-description-fr": "Identifie la catégorie du message pour un cas d’utilisation spécifique."
      },
      "threeDSecureDeviceChannel": {
        "type": "string",
        "description": "Indicates the type of channel interface being used to initiate the transaction.",
        "enum": [
          "BROWSER",
          "THREE_D_SECURE_REQUESTOR_INITIATED"
        ],
        "example": "BROWSER",
        "x-i18n-description-fr": "Indique le type d’interface de canal utilisé pour lancer la transaction."
      },
      "threeDSecureRequestType": {
        "type": "string",
        "nullable": true,
        "description": "Type of payment that triggered the verification.\n  - **CARDHOLDER**: Cardholder initiated payment.\n  - **RECURRING**: Recurring payment.\n",
        "enum": [
          "CARDHOLDER",
          "RECURRING"
        ],
        "example": "CARDHOLDER",
        "x-i18n-description-fr": "Type de paiement qui a déclenché la vérification.\n  - **CARDHOLDER** : Le paiement initié par le titulaire de la carte.\n  - **RECURRING** : Paiement récurrent.\n"
      },
      "threeDSecureRecurringFrequency": {
        "type": "integer",
        "format": "int32",
        "description": "Indicates the minimum number of days between authorisations.",
        "minimum": 1,
        "maximum": 9999,
        "example": 1,
        "nullable": true,
        "x-i18n-description-fr": "Indique le nombre minimum de jours entre les autorisations."
      },
      "threeDSecureRecurringExpiry": {
        "type": "string",
        "description": "Date after which no further authorisations shall be performed. This is a required field for recurring transactions, we suggest setting it at a reasonably high value if you don't have a defined expiry date.",
        "format": "date",
        "minLength": 10,
        "maxLength": 10,
        "example": "2019-07-30",
        "nullable": true,
        "x-i18n-description-fr": "Date à partir de laquelle aucune autre autorisation ne sera effectuée. Il s’agit d’un champ obligatoire pour les transactions récurrentes, nous vous suggérons de le définir à une valeur raisonnablement élevée si vous n’avez pas de date d’expiration définie."
      },
      "threeDSecureRequestorInitiatedIndicator": {
        "type": "string",
        "description": "Indicates the type of 3RI request. This data element provides additional information to the ACS to determine the best approach for handing a 3RI request.",
        "enum": [
          "RECURRING_TRANSACTION",
          "INSTALMENT_TRANSACTION",
          "ADD_CARD",
          "MAINTAIN_CARD_INFORMATION",
          "ACCOUNT_VERIFICATION",
          "SPLIT_DELAYED_SHIPMENT",
          "TOP_UP",
          "MAIL_ORDER",
          "TELEPHONE_ORDER",
          "WHITELIST_STATUS_CHECK",
          "OTHER_PAYMENT"
        ],
        "example": "RECURRING_TRANSACTION",
        "nullable": true,
        "x-i18n-description-fr": "Indique le type de requête 3RI. Cet élément de données fournit des informations supplémentaires à l’ACS pour déterminer la meilleure approche pour traiter une demande 3RI."
      },
      "threeDSecurePriorAuthenticationData": {
        "type": "string",
        "description": "Data that documents and supports a specific authentication process. In the current version of the specification this data element is not defined in detail, however the intention is that for each 3DS Requestor Authentication Method, this field carry data that the ACS can use to verify the authentication process. In future versions of the specification, these details are expected to be included.",
        "maxLength": 2048,
        "example": 12345678,
        "nullable": true,
        "x-i18n-description-fr": "Données qui documentent et soutiennent un processus d’authentification spécifique. Dans la version actuelle de la spécification, cet élément de données n’est pas défini en détail, mais l’intention est que pour chaque méthode d’authentification du demandeur 3DS, ce champ contienne des données que l’ACS peut utiliser pour vérifier le processus d’authentification. Dans les futures versions de la spécification, ces détails devraient être inclus."
      },
      "threeDSecurePriorAuthenticationMethod": {
        "type": "string",
        "description": "Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor.",
        "enum": [
          "FRICTIONLESS_AUTHENTICATION_OCCURRED_BY_ACS",
          "CARDHOLDER_CHALLENGE_OCCURRED_BY_ACS",
          "AVS_VERIFIED",
          "OTHER_ISSUER_METHODS"
        ],
        "example": "AVS_VERIFIED",
        "nullable": true,
        "x-i18n-description-fr": "Mécanisme utilisé par le Titulaire de la Carte pour s’authentifier préalablement auprès du Demandeur 3DS."
      },
      "threeDSecurePriorAuthenticationTimestamp": {
        "type": "string",
        "description": "Date and time in UTC of the prior cardholder authentication.",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z",
        "nullable": true,
        "x-i18n-description-fr": "Date et heure en UTC de l’authentification précédente du titulaire de la carte."
      },
      "threeDSecurePriorAuthenticationReference": {
        "type": "string",
        "description": "This data element provides additional information to the ACS to determine the best approach for handing a request.",
        "maxLength": 36,
        "example": 12345678,
        "nullable": true,
        "x-i18n-description-fr": "Cet élément de données fournit des renseignements supplémentaires au SCA afin de déterminer la meilleure approche pour traiter une demande."
      },
      "threeDSecurePriorAuthenticationInformation": {
        "type": "object",
        "description": "Information about how the 3DS Requestor authenticated the cardholder as part of a previous 3DS transaction.",
        "nullable": true,
        "properties": {
          "threeDSecurePriorAuthenticationData": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationData"
          },
          "threeDSecurePriorAuthenticationMethod": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationMethod"
          },
          "threeDSecurePriorAuthenticationTimestamp": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationTimestamp"
          },
          "threeDSecurePriorAuthenticationReference": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationReference"
          }
        },
        "x-i18n-description-fr": "Informations sur la manière dont le demandeur 3DS a authentifié le titulaire de la carte dans le cadre d’une transaction 3DS précédente."
      },
      "threeDSecureCompletionIndicator": {
        "type": "string",
        "description": "Indicates whether 3DS Card Lookup was successfully completed.  A successful Card Lookup increases the chances of a frictionless card authentication.\n  - **SUCCESS**: Successfully completed.\n  - **FAILURE**: 3DS Card Lookup attempted, but failed.\n  - **UNAVAILABLE**: Unavailable or not attempted.\n",
        "enum": [
          "SUCCESS",
          "FAILURE",
          "UNAVAILABLE"
        ],
        "example": "SUCCESS",
        "nullable": true,
        "x-i18n-description-fr": "Indique si la recherche de carte 3DS s’est terminée avec succès.  Une recherche de carte réussie augmente les chances d’une authentification de carte sans friction.\n  - **SUCCESS** : Terminé avec succès.\n  - **FAILURE** : La recherche de carte 3DS a échoué, mais a échoué.\n  - **UNAVAILABLE** : Indisponible ou non tenté.\n"
      },
      "threeDSecureChallengeRequested": {
        "type": "string",
        "description": "Indicates whether a browser-based challenge is requested for this transaction. Standard is 'No Preference'",
        "enum": [
          "NO_PREFERENCE",
          "NO_CHALLENGE_REQUESTED",
          "CHALLENGE_REQUESTED_MANDATE"
        ],
        "example": "NO_PREFERENCE",
        "nullable": true,
        "default": "NO_PREFERENCE",
        "x-i18n-description-fr": "Indique si une demande d’authentification basée sur le navigateur est demandée pour cette transaction. La norme est « aucune préférence »"
      },
      "threeDSecureChallengeWindowSize": {
        "type": "string",
        "description": "Dimensions of the challenge window that has been displayed to the Cardholder in the browser.\n  - **X_SMALL**: 250 x 400\n  - **SMALL**: 390 x 400\n  - **MEDIUM**: 500 x 600\n  - **LARGE**: 600 x 400\n  - **FULL_SCREEN**: Full Screen\n",
        "enum": [
          "X_SMALL",
          "SMALL",
          "MEDIUM",
          "LARGE",
          "FULL_SCREEN"
        ],
        "example": "FULL_SCREEN",
        "nullable": true,
        "x-i18n-description-fr": "Dimensions de la fenêtre du défi qui a été affichée au titulaire de la carte dans le navigateur.\n  - **X_SMALL** : 250 x 400\n  - **SMALL** : 390 x 400\n  - **MEDIUM** : 500 x 600\n  - **LARGE** : 600 x 400\n  - **FULL_SCREEN** : Plein écran\n"
      },
      "browserUserAgent": {
        "type": "string",
        "description": "Exact content of the HTTP user-agent header. Note, If the total length of the User-Agent sent by the browser exceeds 2048 characters, truncate the excess portion.",
        "maxLength": 2048,
        "example": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})",
        "nullable": true,
        "x-i18n-description-fr": "Contenu exact de l’en-tête HTTP de l’agent utilisateur. Remarque, si la longueur totale du User-Agent envoyé par le navigateur dépasse 2048 caractères, tronquez la partie excédentaire."
      },
      "browserJavaEnabled": {
        "type": "boolean",
        "description": "Indicates whether Java is enabled in the browser",
        "example": true,
        "x-i18n-description-fr": "Indique si Java est activé dans le navigateur"
      },
      "browserJavascriptEnabled": {
        "type": "boolean",
        "description": "Indicates whether Javascript is enabled in the browser",
        "example": true,
        "x-i18n-description-fr": "Indique si Javascript est activé dans le navigateur"
      },
      "browserScreenHeight": {
        "type": "integer",
        "format": "int32",
        "description": "Total height of the Cardholder’s screen in pixels.",
        "minimum": 0,
        "maximum": 999999,
        "example": 1080,
        "nullable": true,
        "x-i18n-description-fr": "Hauteur totale de l’écran du titulaire de la carte en pixels."
      },
      "browserScreenWidth": {
        "type": "integer",
        "format": "int32",
        "description": "Total width of the cardholder’s screen in pixels.",
        "minimum": 0,
        "maximum": 999999,
        "example": 1920,
        "nullable": true,
        "x-i18n-description-fr": "Largeur totale de l’écran du titulaire de la carte en pixels."
      },
      "language": {
        "type": "string",
        "format": "iso-639",
        "description": "Two letter language code based on the ISO 639-1 standard. See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes",
        "minLength": 2,
        "maxLength": 2,
        "example": "en",
        "x-i18n-description-fr": "Code de langue à deux lettres basé sur la norme ISO 639-1. Voir https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes"
      },
      "authenticationRequest": {
        "title": "authenticationRequest",
        "description": "Use the 3DS Authentication request to start the validation process of the card and cardholder identity. This request supports all 3DS authentication methods, including 3DS Requestor Initiated (3RI) and Decoupled Authentication. The fields device_channel and message_category control the type of 3DS request made. To perform a standard 3DS Authentication with a cardholder browser experience, send device_channel = 02 for BRW. The result of this request determines whether the card supports 3DS features and, if supported, whether the transaction uses a frictionless or challenge flow. To perform a 3DS Requestor Initiated Authentication without a cardholder browser experience, send device_channel = 03 for 3RI. Any fields related to the browser’s challenge prompt are no longer required, but other conditional fields for 3RI become mandatory.",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "cardLookupId": {
            "nullable": true,
            "type": "string",
            "description": "Displays a Unique Identifier required to identify API resources.\nNote: This field is required for any future follow-on transactions, including Refunds, Corrections, Completions, Reversals, etc.\n",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "x-i18n-description-fr": "Affiche un identificateur unique requis pour identifier les ressources d’API.\nRemarque : Ce champ est obligatoire pour toutes les transactions ultérieures futures, y compris les remboursements, les corrections, les achèvements, les annulations, etc.\n"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "amount": {
            "$ref": "#/components/schemas/transactionAmount"
          },
          "cardholderName": {
            "$ref": "#/components/schemas/cardholderName"
          },
          "cardholderEmail": {
            "$ref": "#/components/schemas/email"
          },
          "cardholderPhoneNumber": {
            "$ref": "#/components/schemas/phoneNumber"
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "The postal address including street, town/city, province, and postal code.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "x-i18n-description-fr": "L’adresse postale, y compris la rue, la ville, la province et le code postal."
          },
          "billingAddress": {
            "type": "object",
            "description": "The postal address including street, town/city, province, and postal code.",
            "properties": {
              "unitNumber": {
                "$ref": "#/components/schemas/unitNumber"
              },
              "streetNumber": {
                "$ref": "#/components/schemas/streetNumber"
              },
              "streetName": {
                "$ref": "#/components/schemas/streetName"
              },
              "city": {
                "$ref": "#/components/schemas/city"
              },
              "province": {
                "$ref": "#/components/schemas/province"
              },
              "postalCode": {
                "$ref": "#/components/schemas/postalCode"
              },
              "country": {
                "$ref": "#/components/schemas/country"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": 3300,
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "required": [
              "streetNumber",
              "streetName",
              "city",
              "province",
              "postalCode",
              "country"
            ],
            "x-i18n-description-fr": "L’adresse postale, y compris la rue, la ville, la province et le code postal."
          },
          "paymentMethodId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodRequest"
          },
          "threeDSecureMessageCategory": {
            "$ref": "#/components/schemas/threeDSecureMessageCategory"
          },
          "threeDSecureDeviceChannel": {
            "$ref": "#/components/schemas/threeDSecureDeviceChannel"
          },
          "threeDSecureRequestType": {
            "$ref": "#/components/schemas/threeDSecureRequestType"
          },
          "threeDSecureRecurringFrequency": {
            "$ref": "#/components/schemas/threeDSecureRecurringFrequency"
          },
          "threeDSecureRecurringExpiry": {
            "$ref": "#/components/schemas/threeDSecureRecurringExpiry"
          },
          "threeDSecureRequestorInitiatedIndicator": {
            "$ref": "#/components/schemas/threeDSecureRequestorInitiatedIndicator"
          },
          "threeDSecurePriorAuthenticationInformation": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationInformation"
          },
          "threeDSecureNotificationUrl": {
            "nullable": true,
            "type": "string",
            "description": "Fully qualified Encode URL of the system that receives the Response message or Error Message.",
            "minLength": 1,
            "maxLength": 256,
            "example": "https%3A%2F%2Fdeveloper.moneris.com%2F",
            "x-i18n-description-fr": "URL d’encodage complète du système qui reçoit le message de réponse ou le message d’erreur."
          },
          "threeDSecureCompletionIndicator": {
            "$ref": "#/components/schemas/threeDSecureCompletionIndicator"
          },
          "threeDSecureChallengeRequested": {
            "$ref": "#/components/schemas/threeDSecureChallengeRequested"
          },
          "threeDSecureChallengeWindowSize": {
            "$ref": "#/components/schemas/threeDSecureChallengeWindowSize"
          },
          "browserIpAddress": {
            "$ref": "#/components/schemas/ipv4"
          },
          "browserUserAgent": {
            "$ref": "#/components/schemas/browserUserAgent"
          },
          "browserJavaEnabled": {
            "$ref": "#/components/schemas/browserJavaEnabled"
          },
          "browserJavascriptEnabled": {
            "$ref": "#/components/schemas/browserJavascriptEnabled"
          },
          "browserScreenHeight": {
            "$ref": "#/components/schemas/browserScreenHeight"
          },
          "browserScreenWidth": {
            "$ref": "#/components/schemas/browserScreenWidth"
          },
          "browserLanguage": {
            "$ref": "#/components/schemas/language"
          }
        },
        "required": [
          "amount",
          "billingAddress",
          "cardholderEmail",
          "cardholderName",
          "cardholderPhoneNumber",
          "idempotencyKey",
          "threeDSecureDeviceChannel",
          "threeDSecureMessageCategory"
        ],
        "x-i18n-description-fr": "Utilisez la demande d’authentification 3DS pour lancer le processus de validation de la carte et de l’identité du titulaire de la carte. Cette demande prend en charge toutes les méthodes d’authentification 3DS, y compris l’authentification 3RI (3DS Requestor Initiat) et l’authentification découplée. Les champs device_channel et message_category contrôler le type de requête 3DS effectuée. Pour effectuer une authentification 3DS standard avec une expérience de navigateur de titulaire de carte, envoyez device_channel = 02 pour BRW. Le résultat de cette demande détermine si la carte prend en charge les fonctionnalités 3DS et, le cas échéant, si la transaction utilise un flux sans friction ou un flux d’authentification. Pour effectuer une authentification initiée par le demandeur 3DS sans expérience de navigateur du titulaire de carte, envoyez device_channel = 03 pour 3RI. Tous les champs liés à l’invite d’authentification du navigateur ne sont plus obligatoires, mais les autres champs conditionnels pour 3RI deviennent obligatoires."
      },
      "threeDSecureMessageType": {
        "type": "string",
        "description": "Indicates response type in 3DS flow",
        "enum": [
          "AUTHENTICATION_RESPONSE_MESSAGE",
          "AUTHENTICATION_REQUEST_MESSAGE",
          "PREPARATION_RESPONSE_MESSAGE",
          "PREPARATION_REQUEST_MESSAGE",
          "CHALLENGE_RESPONSE_MESSAGE",
          "CHALLENGE_REQUEST_MESSAGE",
          "RESULTS_REQUEST_MESSAGE",
          "RESULTS_RESPONSE_MESSAGE",
          "ERROR_MESSAGE"
        ],
        "example": "CHALLENGE_RESPONSE_MESSAGE",
        "x-i18n-description-fr": "Indique le type de réponse dans le flux 3DS"
      },
      "threeDSecureTransactionStatus": {
        "type": "string",
        "description": "Indicates the Transaction result.  For more information about this field, please review https://docs.3dsecure.io/3dsv2/specification_220.html#attr-ARes-transStatus\n  - **AUTHENTICATED**: Authentication/ Account Verification Successful.\n  - **AUTHENTICATION_ATTEMPTED**: Attempts Processing Performed; Not Authenticated/Verified , but a proof of attempted authentication/verification is provided.\n  - **CHALLENGE_AUTHENTICATION_REQUIRED**: Challenge Required; Additional authentication is required using the `challengeUrl` and `challengeData`.\n  - **CHALLENGE_DECOUPLED_AUTHENTICATION_CONFIRMED**: Challenge Required; Decoupled Authentication confirmed. \n  - **TECHNICAL_ISSUE**: Authentication/ Account Verification Could Not Be Performed; Technical or other problem.\n  - **NOT_AUTHENTICATED**: Not Authenticated /Account Not Verified; Transaction denied.\n  - **REJECTED**: Authentication/ Account Verification Rejected; Issuer is rejecting authentication/verification and request that authorisation not be attempted.\n  - **CHALLENGE_PREFERENCE_ACKNOWLEDGED**: Informational Only; 3DS Requestor challenge preference acknowledged.\n",
        "enum": [
          "AUTHENTICATED",
          "AUTHENTICATION_ATTEMPTED",
          "CHALLENGE_AUTHENTICATION_REQUIRED",
          "CHALLENGE_DECOUPLED_AUTHENTICATION_CONFIRMED",
          "TECHNICAL_ISSUE",
          "NOT_AUTHENTICATED",
          "REJECTED",
          "CHALLENGE_PREFERENCE_ACKNOWLEDGED"
        ],
        "x-i18n-description-fr": "Indique le résultat de la transaction.  Pour plus d’informations sur ce domaine, veuillez consulter https://docs.3dsecure.io/3dsv2/specification_220.html#attr-ARes-transStatus\n  - **AUTHENTICATED** : Authentification/vérification du compte réussie.\n  - **AUTHENTICATION_ATTEMPTED** : Tentatives de traitement effectuées ; Non authentifié/vérifié, mais une preuve de tentative d’authentification/vérification est fournie.\n  - **CHALLENGE_AUTHENTICATION_REQUIRED** : Défi requis ; Une authentification supplémentaire est requise à l’aide des fichiers 'challengeUrl' et 'challengeData'.\n  - **CHALLENGE_DECOUPLED_AUTHENTICATION_CONFIRMED** : Défi requis ; Authentification découplée confirmée. \n  - **TECHNICAL_ISSUE** : L’authentification/vérification du compte n’a pas pu être effectuée ; Problème technique ou autre.\n  - **NOT_AUTHENTICATED** : Non authentifié / Compte non vérifié ; Transaction refusée.\n  - **REJECTED** : Authentification/vérification de compte rejetée ; L’émetteur rejette l’authentification/vérification et demande que l’autorisation ne soit pas tentée.\n  - **CHALLENGE_PREFERENCE_ACKNOWLEDGED** : à titre informatif seulement ; Reconnaissance de la préférence du demandeur 3DS.\n"
      },
      "threeDSecureTransactionStatusReasonCode": {
        "type": "string",
        "description": "3-D Secure Transaction Status Response Code.\n",
        "nullable": true,
        "maxLength": 3,
        "example": 1,
        "x-i18n-description-fr": "Code de réponse de l’état des transactions 3-D Secure.\n"
      },
      "threeDSecureTransactionStatusReasonDescription": {
        "type": "string",
        "description": "Provides information on why the Transaction Status field has the specified value.",
        "enum": [
          "ACQUIRER_EXEMPTION_ACCEPTED",
          "ACS_MAXIMUM_CHALLENGES",
          "ACS_TECHNICAL_ISSUE",
          "ACS_TIMED_OUT",
          "AUTHENTICATION_ATTEMPTED_BUT_NOT_PERFORMED_BY_THE_CARDHOLDER",
          "CARDHOLDER_NOT_ENROLLED_IN_SERVICE",
          "CARD_AUTHENTICATION_FAILED",
          "CAVV_IS_INCLUDED_IN_RESPONSE",
          "CHALLENGE_CANCELATION_INDICATOR_POPULATED",
          "CHALLENGE_MANDATE_REQUESTED_BUT_COULD_NOT_BE_PERFORMED",
          "DECOUPLED_AUTHENTICATION_REQUIRED_BY_ACS_BUT_NOT_REQUESTED_BY_THREE_D_SECURE_REQUESTOR",
          "DECOUPLED_AUTHENTICATION_WAS_PROVIDED_INSUFFICIENT_TIME_TO_AUTHENTICATE_CARDHOLDER_ACS_WILL_NOT_MAKE_ATTEMPT",
          "DS_DROPPED_REASON_CODE_RECEIVED_FROM_ACS",
          "EXCEEDS_AUTHENTICATION_FREQUENCY_LIMIT",
          "EXPIRED_CARD",
          "HIGH_CONFIDENCE",
          "INTERNAL_ERROR_WHILE_GENERATING_CAVV",
          "INVALID_CARD_NUMBER",
          "INVALID_RESPONSE_FROM_ACS",
          "INVALID_TRANSACTION",
          "ISSUER_SCA_REQUIRED",
          "LOW_CONFIDENCE",
          "MEDIUM_CONFIDENCE",
          "NON_PAYMENT_TRANSACTION_NOT_SUPPORTED",
          "NO_CARD_RECORD",
          "PROTOCOL_VERSION_NOT_SUPPORTED_BY_ACS",
          "REQUESTED_PROGRAM_NOT_SUPPORTED_BY_THE_ACS",
          "SECURITY_FAILURE",
          "STOLEN_CARD",
          "SUSPECTED_FRAUD",
          "SYSTEM_ERROR_RESPONSE_FROM_ACS",
          "THREE_D_SECURE_REQUESTOR_DECOUPLED_MAX_EXPIRY_TIME_EXCEEDED",
          "THREE_RI_TRANSACTION_NOT_SUPPORTED",
          "TRANSACTION_IS_EXCLUDED_FROM_ATTEMPTS_PROCESSING",
          "TRANSACTION_NOT_PERMITTED_TO_CARDHOLDER",
          "TRANSACTION_PROCESSED_AS_IDENTITY_CHECK_INSIGHTS",
          "TRANSACTION_TIMED_OUT_AT_THE_ACS",
          "UNKNOWN_DEVICE",
          "UNSUPPORTED_DEVICE",
          "VERY_HIGH_CONFIDENCE",
          "VMID_NOT_ELIGIBLE_FOR_REQUESTED_PROGRAM"
        ],
        "example": "RECURRING_TRANSACTION",
        "x-i18n-description-fr": "Fournit des informations sur la raison pour laquelle le champ Statut de la transaction a la valeur spécifiée."
      },
      "threeDSecureTransactionStatusReason": {
        "type": "object",
        "description": "Provides information on why the Transaction Status field has the specified value.",
        "properties": {
          "threeDSecureTransactionStatusReasonCode": {
            "$ref": "#/components/schemas/threeDSecureTransactionStatusReasonCode"
          },
          "threeDSecureTransactionStatusReasonDescription": {
            "$ref": "#/components/schemas/threeDSecureTransactionStatusReasonDescription"
          }
        },
        "x-i18n-description-fr": "Fournit des informations sur la raison pour laquelle le champ Statut de la transaction a la valeur spécifiée."
      },
      "threeDSecureChallengeUrl": {
        "type": "string",
        "description": "If the transStatus is “C” this field will be populated with the URL to POST the challengeData to create the cardholder challenge screen",
        "format": "uri",
        "minLength": 1,
        "maxLength": 2048,
        "example": "https://developer.moneris.com/",
        "x-i18n-description-fr": "Si le transStatus est « C », ce champ sera renseigné avec l’URL pour POST le challengeData afin de créer l’écran de défi du titulaire de carte"
      },
      "threeDSecureChallengeData": {
        "type": "string",
        "description": "String that must be POSTed to the Challenge URL to create challenge screen",
        "minLength": 1,
        "maxLength": 2048,
        "x-i18n-description-fr": "Chaîne qui doit être postée sur l’URL du défi pour créer l’écran de défi"
      },
      "threeDSecureChallengeCompletionIndicator": {
        "type": "string",
        "description": "Indicator of the state of the ACS challenge cycle and whether the challenge has completed or will require additional messages.",
        "enum": [
          "YES",
          "NO"
        ],
        "x-i18n-description-fr": "Indicateur de l’état du cycle de défi ACS et si le défi est terminé ou nécessitera des messages supplémentaires."
      },
      "threeDSecureAccessControlServerTransactionId": {
        "type": "string",
        "description": "Required if sending a version 3-D Secure 2.0+ transaction. Data is obtained from a Cavv Lookup Request or MPI 3DS Authentication Request transaction",
        "maxLength": 36,
        "format": "uuid",
        "example": "ad9b0eda-bf9b-4288-b188-9467993603e1",
        "x-i18n-description-fr": "Obligatoire en cas d’envoi d’une transaction en version 3-D Secure 2.0+. Les données sont obtenues à partir d’une transaction de demande de recherche Cavv ou de demande d’authentification MPI 3DS"
      },
      "threeDSecureAuthenticationType": {
        "type": "string",
        "description": "Indicates the type of authentication method the Issuer will use to challenge the Cardholder, whether in the ARes message or what was used by the ACS when in the RReq message.",
        "enum": [
          "STATIC",
          "DYNAMIC",
          "OOB",
          "DECOUPLED"
        ],
        "example": "DYNAMIC",
        "x-i18n-description-fr": "Indique le type de méthode d’authentification que l’émetteur utilisera pour défier le titulaire de la carte, que ce soit dans le message ARes ou ce qui a été utilisé par l’ACS dans le message RReq."
      },
      "threeDSecureAuthenticationTimestamp": {
        "type": "string",
        "description": "Date and time in UTC of the cardholder authentication.",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z",
        "x-i18n-description-fr": "Date et heure en UTC de l’authentification du titulaire de la carte."
      },
      "authenticationResponse": {
        "title": "authenticationResponse",
        "type": "object",
        "properties": {
          "threeDSecureAuthenticationId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "cardLookupId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "threeDSecureMessageType": {
            "$ref": "#/components/schemas/threeDSecureMessageType"
          },
          "threeDSecureTransactionStatus": {
            "$ref": "#/components/schemas/threeDSecureTransactionStatus"
          },
          "threeDSecureTransactionStatusReason": {
            "$ref": "#/components/schemas/threeDSecureTransactionStatusReason"
          },
          "ecommerceIndicator": {
            "$ref": "#/components/schemas/ecommerceIndicator"
          },
          "threeDSecureChallengeUrl": {
            "$ref": "#/components/schemas/threeDSecureChallengeUrl"
          },
          "threeDSecureChallengeData": {
            "$ref": "#/components/schemas/threeDSecureChallengeData"
          },
          "threeDSecureAuthenticationValue": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationValue"
          },
          "threeDSecureChallengeCompletionIndicator": {
            "$ref": "#/components/schemas/threeDSecureChallengeCompletionIndicator"
          },
          "threeDSecureServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureServerTransactionId"
          },
          "threeDSecureDirectoryServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureDirectoryServerTransactionId"
          },
          "threeDSecureAccessControlServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureAccessControlServerTransactionId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "threeDSecureCardholderInformation": {
            "type": "string",
            "description": "Text provided by the ACS/Issuer to Cardholder during a Frictionless or Decoupled transaction. The Issuer can provide information to Cardholder.",
            "maxLength": 128,
            "example": "Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx.",
            "x-i18n-description-fr": "Texte fourni par l’AEC/l’émetteur au titulaire de la carte lors d’une transaction sans friction ou découplée. L’émetteur peut fournir des informations au titulaire de la carte."
          },
          "threeDSecureVersion": {
            "$ref": "#/components/schemas/threeDSecureVersion"
          },
          "threeDSecureAuthenticationType": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationType"
          },
          "threeDSecureAuthenticationTimestamp": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationTimestamp"
          }
        }
      },
      "threeDSecureChallengeResponseData": {
        "type": "string",
        "description": "Response data from the challenge",
        "example": "TBD",
        "x-i18n-description-fr": "Données de réponse du défi"
      },
      "lookupRequest": {
        "title": "challengeFlowRequest",
        "description": "The point of the 3-D Secure flow is to verify that the true cardholder is a part of the authorization. The challenge flow is used to present a way of authenticating the cardholder using e.g. OTP or a federated identification method.",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "threeDSecureChallengeResponseData": {
            "$ref": "#/components/schemas/threeDSecureChallengeResponseData"
          }
        },
        "required": [
          "idempotencyKey",
          "threeDSecureChallengeResponseData"
        ],
        "x-i18n-description-fr": "L’intérêt du flux 3-D Secure est de vérifier que le véritable titulaire de la carte fait partie de l’autorisation. Le flux de défi est utilisé pour présenter un moyen d’authentifier le titulaire de la carte à l’aide, par exemple, d’un OTP ou d’une méthode d’identification fédérée."
      },
      "threeDSecureNotificationUrl": {
        "type": "string",
        "description": "Fully qualified Encode URL of the system that receives the Response message or Error Message.",
        "minLength": 1,
        "maxLength": 256,
        "example": "https%3A%2F%2Fdeveloper.moneris.com%2F",
        "x-i18n-description-fr": "URL d’encodage complète du système qui reçoit le message de réponse ou le message d’erreur."
      },
      "cardLookupRequest": {
        "title": "cardLookupRequest",
        "description": "The card_lookup request verifies the applicability of 3DS on the card and returns the 3DS version supported by the card. It also returns the 3DS Method URL and 3DS Method Data for submitting a device fingerprinting POST to issuer’s ACS.",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "paymentMethodId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodRequest"
          },
          "threeDSecureNotificationUrl": {
            "$ref": "#/components/schemas/threeDSecureNotificationUrl"
          }
        },
        "required": [
          "idempotencyKey",
          "threeDSecureNotificationUrl"
        ],
        "x-i18n-description-fr": "La demande card_lookup vérifie l’applicabilité de 3DS sur la carte et renvoie la version 3DS prise en charge par la carte. Il renvoie également l’URL de la méthode 3DS et les données de la méthode 3DS pour l’envoi d’un POST d’empreinte d’appareil à l’ACS de l’émetteur."
      },
      "threeDSecureMethodUrl": {
        "type": "string",
        "format": "uri",
        "description": "Returns the URL for the Device Fingerprinting step.",
        "minLength": 1,
        "maxLength": 256,
        "example": "https://developer.moneris.com/",
        "x-i18n-description-fr": "Renvoie l’URL de l’étape de prise d’empreinte de l’appareil."
      },
      "threeDSecureMethodData": {
        "type": "string",
        "description": "Data that must be posted to 3DS Method URL for the Device Fingerprinting step.",
        "minLength": 1,
        "maxLength": 254,
        "x-i18n-description-fr": "Données qui doivent être publiées sur l’URL de la méthode 3DS pour l’étape de prise d’empreinte de l’appareil."
      },
      "cardLookupResponse": {
        "title": "cardLookupResponse",
        "type": "object",
        "properties": {
          "cardLookupId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "threeDSecureServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureServerTransactionId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodResponse"
          },
          "threeDSecureVersion": {
            "$ref": "#/components/schemas/threeDSecureVersion"
          },
          "threeDSecureMethodUrl": {
            "$ref": "#/components/schemas/threeDSecureMethodUrl"
          },
          "threeDSecureMethodData": {
            "$ref": "#/components/schemas/threeDSecureMethodData"
          }
        }
      }
    },
    "parameters": {
      "apiVersion": {
        "in": "header",
        "name": "Api-Version",
        "required": false,
        "example": "2023-11-01",
        "description": "The endpoint's API Version. \n\nMust be provided through the query string, or through headers. \n",
        "schema": {
          "$ref": "#/components/schemas/apiVersion"
        },
        "x-i18n-description-fr": "Version de l’API. \n\nDoit être fourni par le biais de la chaîne de requête ou d’en-têtes. \n"
      },
      "correlationId": {
        "in": "header",
        "name": "X-Correlation-Id",
        "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4",
        "description": "Correlates a series of requests within the same flow.\n\nNote: This ID is generated by Moneris with every request or response, if it doesn't exist. \nMerchants are to echo back the value with every request that is part of the call flow.\"\n",
        "required": false,
        "schema": {
          "type": "string",
          "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4"
        },
        "x-i18n-description-fr": "Corrèle une série de requêtes au sein d’un même flux.\n\nRemarque : Cet identifiant est généré par Moneris avec chaque demande ou réponse, s’il n’existe pas. \nLes commerçants doivent faire écho à la valeur avec chaque demande qui fait partie du flux d’appels.\n"
      },
      "prm-common_apiVersion": {
        "in": "query",
        "name": "api_version",
        "required": false,
        "example": "2023-11-01",
        "description": "The endpoint's API Version. \n\nMust be provided through the query string, or through headers. \n",
        "schema": {
          "$ref": "#/components/schemas/apiVersion"
        },
        "x-i18n-description-fr": "Version de l’API du point de terminaison. \n\nDoit être fourni par le biais de la chaîne de requête ou d’en-têtes. \n"
      },
      "merchantId": {
        "in": "header",
        "name": "X-Merchant-Id",
        "example": 123456789101,
        "description": "Thirteen character identification code. \n\nNote: This code is provided by Moneris and is required to identify the Merchant executing the transaction.\"\n",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/merchantId"
        },
        "x-i18n-description-fr": "Code d’identification de treize caractères. \n\nRemarque : Ce code est fourni par Moneris et est requis pour identifier le commerçant qui effectue la transaction.\n"
      },
      "pageBeforeCursor": {
        "in": "query",
        "name": "cursor",
        "description": "Pagination cursor to return items located after it.",
        "required": false,
        "example": "d41d8cd98f00b204e9800998ecf8427e",
        "schema": {
          "type": "string",
          "example": "d41d8cd98f00b204e9800998ecf8427e"
        },
        "x-i18n-description-fr": "Curseur de pagination pour renvoyer les éléments situés après."
      },
      "pageLimit": {
        "in": "query",
        "name": "limit",
        "description": "Maximum number of items to return in the response.",
        "example": 50,
        "schema": {
          "type": "integer",
          "default": 10,
          "minimum": 1,
          "maximum": 100,
          "example": 50
        },
        "x-i18n-description-fr": "Nombre maximal d’éléments à renvoyer dans la réponse."
      },
      "createdFrom": {
        "name": "created_from",
        "in": "query",
        "description": "Returns items created after the specified date. Defaults to three months ago from today.",
        "required": false,
        "example": "2019-07-30T06:43:40.252Z",
        "schema": {
          "$ref": "#/components/schemas/dateTime"
        },
        "x-i18n-description-fr": "Renvoie les éléments créés après la date spécifiée. La valeur par défaut est il y a trois mois à partir d’aujourd’hui."
      },
      "createdTo": {
        "name": "created_to",
        "in": "query",
        "description": "Returns items created before the specified date. \n\nDefaults to current date and time, and must be later than \"created_from\" date. \n",
        "required": false,
        "example": "2019-10-30T06:43:40.252Z",
        "schema": {
          "$ref": "#/components/schemas/dateTime"
        },
        "x-i18n-description-fr": "Renvoie les éléments créés avant la date spécifiée. \n\nPar défaut, la date et l’heure actuelles sont et doit être postérieure à la date « created_from ». \n"
      },
      "paymentId": {
        "in": "path",
        "name": "payment-id",
        "description": "The unique identifier of the payment",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        },
        "x-i18n-description-fr": "L’identifiant unique du paiement"
      },
      "isExpiring": {
        "name": "is_expiring",
        "in": "query",
        "description": "Returns payment methods that have cards expiring during the current and next calendar month.",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "x-i18n-description-fr": "Retourne les modes de paiement dont les cartes expirent au cours du mois civil en cours et du mois civil suivant."
      },
      "paymentMethodId": {
        "name": "payment-method-id",
        "in": "path",
        "description": "Payment Method ID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        },
        "x-i18n-description-fr": "ID du mode de paiement"
      },
      "refundId": {
        "in": "path",
        "name": "refund-id",
        "description": "The unique identifier of the refund",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        },
        "x-i18n-description-fr": "L’identifiant unique du remboursement"
      },
      "validationId": {
        "in": "path",
        "name": "validation-id",
        "description": "The unique identifier of the Validation",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        },
        "x-i18n-description-fr": "L’identifiant unique de la Validation"
      },
      "customerId": {
        "in": "path",
        "name": "customer-id",
        "description": "The unique identifier of the customer",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        },
        "x-i18n-description-fr": "L’identifiant unique du client"
      },
      "authenticationId": {
        "in": "path",
        "name": "authentication-id",
        "description": "The unique identifier of the authentication",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        },
        "x-i18n-description-fr": "L’identifiant unique de l’authentification"
      }
    },
    "headers": {
      "apiVersion": {
        "description": "The endpoint's API Version.",
        "example": "2023-11-01",
        "schema": {
          "type": "string"
        },
        "x-i18n-description-fr": "Version de l’API."
      },
      "correlationId": {
        "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4",
        "description": "Correlates a series of requests within the same flow. \n\nNote: This ID is generated by Moneris with every request or response, if it doesn't exist, and the Merchant is recommended to echo back the value.\"  \n",
        "schema": {
          "type": "string",
          "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4"
        },
        "x-i18n-description-fr": "Corrèle une série de requêtes au sein d’un même flux. \n\nRemarque : Cet identifiant est généré par Moneris avec chaque demande ou réponse, s’il n’existe pas, et il est recommandé au commerçant de faire écho à la valeur.  \n"
      },
      "sunset": {
        "example": "2025-07-30T06:43:40.252Z",
        "description": "Optional.\n\nIndicates that the resource URI will be decommissioned, and put out of service at the specified point in the future. \nMore details are available at [RFC 8594](https://www.rfc-editor.org/rfc/rfc8594.html)\n",
        "schema": {
          "type": "string",
          "format": "date-time"
        },
        "x-i18n-description-fr": "Optionnel.\n\nIndique que l’URI de ressource sera mis hors service au moment spécifié à l’avenir. \nPlus de détails sont disponibles sur [RFC 8594](https://www.rfc-editor.org/rfc/rfc8594.html)\n"
      },
      "rateLimitCount": {
        "description": "The maximum number of requests that the client can make in this window.",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 1000,
        "x-i18n-description-fr": "Nombre maximal de requêtes que le client peut effectuer dans cette fenêtre."
      },
      "rateLimitRemaining": {
        "description": "The number of requests allowed in the current window.",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 0,
        "x-i18n-description-fr": "Le nombre de requêtes autorisées dans la fenêtre actuelle."
      },
      "rateLimitReset": {
        "description": "The relative time in seconds when the rate limit window will be reset.",
        "schema": {
          "type": "integer",
          "format": "int32"
        },
        "example": 3600,
        "x-i18n-description-fr": "Temps relatif en secondes lorsque la fenêtre de limite de débit sera réinitialisée."
      }
    },
    "examples": {
      "InvalidListRequestErrorResponse": {
        "summary": "Invalid query parameter",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_QUERY_PARAMETER",
          "status": 400,
          "detail": null,
          "instance": null,
          "category": "INVALID_REQUEST_ERROR",
          "errors": [
            {
              "parameter": "created_from",
              "value": "2019/07/30",
              "reasonCode": "INVALID_FORMAT"
            }
          ]
        }
      },
      "regularPurchaseWithPaymentMethodId": {
        "summary": "Regular Purchase With Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "storePaymentMethod": "DO_NOT_STORE",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithPaymentMethod": {
        "summary": "Regular Purchase With Payment Method Details",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodData": {
              "paymentMethodType": "CARD",
              "card": {
                "cardNumber": "4444111122223333",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardSecurityCode": 123
              }
            }
          },
          "storePaymentMethod": "DO_NOT_STORE",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "preAuthorizationWithPaymentMethodId": {
        "summary": "Pre-Authorization With Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "storePaymentMethod": "DO_NOT_STORE",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": false,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "PurchaseCompletedResponse": {
        "summary": "Successful Purchase",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "SUCCEEDED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 0,
            "responseCode": 1,
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "refunds": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "PreauthorizationCompletedResponse": {
        "summary": "Successful Pre-Authorization",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "AUTHORIZED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 27,
            "responseCode": 0,
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "refunds": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "DeclineErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "EXCESS PIN TRIES",
          "status": 400,
          "detail": "052-38 - PIN retries exceeded",
          "instance": "/payments/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "DECLINED_ERROR",
          "errors": []
        }
      },
      "InvalidRequestErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_ADDRESS",
          "status": 400,
          "detail": null,
          "instance": null,
          "category": "INVALID_REQUEST_ERROR",
          "errors": [
            {
              "reasonCode": "INVALID_FORMAT",
              "parameterName": "address.postalCode",
              "parameterValue": "MAP3J8"
            }
          ]
        }
      },
      "IdempotencyRequestErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "IDEMPOTENCY_KEY_ALREADY_EXISTS",
          "status": 409,
          "detail": null,
          "instance": null,
          "category": "IDEMPOTENCY_ERROR",
          "errors": []
        }
      },
      "PurchaseDeclinedResponse": {
        "summary": "Purchase Declined",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "DECLINED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 421,
            "responseCode": 43,
            "message": "Stolen card, pick up.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "refunds": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "PurchaseDeclinedRetryResponse": {
        "summary": "Purchase Declined with Retry",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "DECLINED_RETRY",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 416,
            "responseCode": 79,
            "message": "Life cycle declines.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "refunds": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "PurchaseCanceledResponse": {
        "summary": "Purchase Canceled",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": {
            "subTotalAmount": {
              "amount": 14000,
              "currency": "CAD"
            },
            "tipAmount": {
              "amount": 150,
              "currency": "CAD"
            }
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "CANCELED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 0,
            "responseCode": 1,
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "refunds": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "InvalidPurchaseErrorResponse": {
        "summary": "Purchase already completed",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_STATE",
          "status": 400,
          "detail": "Invalid purchase state",
          "instance": "/payments/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "INVALID_REQUEST_ERROR"
        }
      },
      "cardPaymentMethodRequest": {
        "summary": "Card Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "cardholderInformation": {
            "cardholderName": "John Doe",
            "companyName": "SP Ltd"
          },
          "contactDetails": {
            "phoneNumber": "1-866-319-7450",
            "email": "moneris@moneris.com"
          },
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor Street West",
            "city": "Toronto",
            "province": "Ontario",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethodData": {
            "paymentMethodType": "CARD",
            "card": {
              "cardNumber": "4444111122223333",
              "expiryMonth": 1,
              "expiryYear": 2023,
              "cardSecurityCode": 123
            }
          },
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "temporaryTokenPaymentMethodRequest": {
        "summary": "Temporary Token Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "cardholderInformation": null,
          "contactDetails": null,
          "billingAddress": null,
          "paymentMethodData": {
            "paymentMethodType": "TEMPORARY_TOKEN",
            "temporaryToken": "ot-HCUeCFtXJfEZSSUqvUJk0"
          },
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "permanentTokenPaymentMethodRequest": {
        "summary": "Permanent Token Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "cardholderInformation": null,
          "contactDetails": null,
          "billingAddress": null,
          "paymentMethodData": {
            "paymentMethodType": "PERMANENT_TOKEN",
            "permanentToken": "HCUeCFtXJfEZSSUqvUJk0"
          },
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "updateCardPaymentMethodRequest": {
        "summary": "Card Payment Method request",
        "value": {
          "cardholderInformation": {
            "cardholderName": "John Doe",
            "companyName": "SP Ltd"
          },
          "contactDetails": {
            "phoneNumber": "1-866-319-7450",
            "email": "moneris@moneris.com"
          },
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor Street West",
            "city": "Toronto",
            "province": "Ontario",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethodData": {
            "paymentMethodType": "CARD",
            "card": {
              "cardNumber": "4444111122223333",
              "expiryMonth": 12,
              "expiryYear": 2033,
              "cardSecurityCode": 123
            }
          },
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "updateTemporaryTokenPaymentMethodRequest": {
        "summary": "Temporary Token Payment Method request",
        "value": {
          "cardholderInformation": null,
          "contactDetails": null,
          "billingAddress": null,
          "paymentMethodData": {
            "paymentMethodType": "TEMPORARY_TOKEN",
            "temporaryToken": "ot-HCUeCFtXJfEZSSUqvXYl9"
          }
        }
      },
      "updatePermanentTokenPaymentMethodRequest": {
        "summary": "Permanent Token Payment Method request",
        "value": {
          "cardholderInformation": null,
          "contactDetails": null,
          "billingAddress": null,
          "paymentMethodData": {
            "paymentMethodType": "PERMANENT_TOKEN",
            "permanentToken": "HCUeCFtXJfEZSSUqvFRu9"
          },
          "customData": {
            "property1": "string"
          }
        }
      },
      "concurrentRequestErrorResponse": {
        "summary": "Concurrent Access Error",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "CONCURRENCY_ERROR",
          "status": 409,
          "detail": null,
          "instance": null,
          "category": "API_ERROR",
          "errors": []
        }
      },
      "matchingRefundRequest": {
        "summary": "Matching Refund",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "refundAmount": {
            "amount": 1600,
            "currency": "CAD"
          },
          "dynamicDescriptor": "moneris",
          "cofInformation": null,
          "ipv4": "104.75.173.179",
          "ipv6": "2600:1401:2::8a",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "reason": "Defective product",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "InvalidRefundErrorResponse": {
        "summary": "Invalid Matching Refund",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_PAYMENT",
          "status": 400,
          "detail": "Invalid payment Id or payment Id not found",
          "instance": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "category": "INVALID_REQUEST_ERROR"
        }
      },
      "exp-refundResponse_DeclineErrorResponse": {
        "summary": "Refund declined",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "EXPIRED CARD",
          "status": 400,
          "detail": "051-54 - Expired Card",
          "instance": "/refunds/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "DECLINED_ERROR",
          "errors": []
        }
      },
      "SucceededRefundResponse": {
        "summary": "Refund succeeded",
        "value": {
          "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "paymentMethod": {
            "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": {
              "phoneNumber": "1-866-319-7450",
              "email": "moneris@moneris.com"
            },
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2023,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": "2019-07-30T06:43:40.252Z",
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "refundAmount": {
            "amount": 1600,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "status": "SUCCEEDED",
          "statusDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 1,
            "responseCode": 1,
            "message": "SUCCESS",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "reason": "Defective product",
          "cardOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "DeclinedRefundResponse": {
        "summary": "Refund succeeded",
        "value": {
          "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "paymentMethod": {
            "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": {
              "phoneNumber": "1-866-319-7450",
              "email": "moneris@moneris.com"
            },
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2023,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": "2019-07-30T06:43:40.252Z",
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "refundAmount": {
            "amount": 1600,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "status": "DECLINED",
          "statusDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 51,
            "responseCode": 54,
            "message": "Expired Card",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "reason": "Defective product",
          "cardOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "validationRequestWithPaymentMethodId": {
        "summary": "With Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "storePaymentMethod": "DO_NOT_STORE",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "validationRequestWithPaymentMethodData": {
        "summary": "With Payment Method Details",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "Gallenkamp"
            },
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodData": {
              "paymentMethodType": "CARD",
              "card": {
                "cardNumber": "4444111122223333",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardSecurityCode": 123
              }
            }
          },
          "storePaymentMethod": "DO_NOT_STORE",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "exp-validationResponse_DeclineErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "EXCESS PIN TRIES",
          "status": 400,
          "detail": "052-38 - PIN retries exceeded",
          "instance": "/validations/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "DECLINED_ERROR",
          "errors": []
        }
      },
      "ValidationSucceededResponse": {
        "summary": "Successful Validation",
        "value": {
          "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": null,
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "validationStatus": "SUCCEEDED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 0,
            "responseCode": 1,
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "ValidationDeclinedRetryResponse": {
        "summary": "Validation Declined with Retry",
        "value": {
          "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": null,
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "validationStatus": "DECLINED_RETRY",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 416,
            "responseCode": 79,
            "message": "Life cycle declines.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "ValidationDeclinedResponse": {
        "summary": "Validation Declined",
        "value": {
          "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": null,
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "Ontario",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodType": "CARD",
            "paymentMethodInformation": {
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2025,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778"
            },
            "paymentMethodStored": "DO_NOT_STORE",
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "validationStatus": "DECLINED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": 421,
            "responseCode": 43,
            "message": "Stolen card, pick up.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "checkResults": {
            "addressVerificationServiceResultCode": "M",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "cardOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      }
    },
    "responses": {
      "invalidListbadRequest": {
        "description": "Bad Request.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "idempotency_error": {
                "$ref": "#/components/examples/InvalidListRequestErrorResponse"
              }
            }
          }
        },
        "x-i18n-description-fr": "Mauvaise demande."
      },
      "unauthorized": {
        "description": "Not authorized. The user does not have a valid API Key or Access Token.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "example": "Bearer, error=\"invalid_token\""
            }
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "UNAUTHORIZED_REQUEST",
              "status": 401,
              "detail": null,
              "instance": null,
              "category": "UNAUTHORIZED_ERROR",
              "errors": []
            }
          }
        },
        "x-i18n-description-fr": "Non autorisé. L’utilisateur ne dispose pas d’une clé API ou d’un jeton d’accès valide."
      },
      "forbidden": {
        "description": "Forbidden. The user does not have permission to access the requested resource.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "example": "Bearer, error=\"insufficient_scope\""
            }
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "FORBIDDEN_REQUEST",
              "status": 403,
              "detail": null,
              "instance": null,
              "category": "UNAUTHORIZED_ERROR",
              "errors": []
            }
          }
        },
        "x-i18n-description-fr": "Interdit. L’utilisateur n’est pas autorisé à accéder à la ressource demandée."
      },
      "tooManyRequests": {
        "description": "Too Many Requests",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/rateLimitReset"
          },
          "Retry-After": {
            "$ref": "#/components/headers/rateLimitReset"
          }
        },
        "x-i18n-description-fr": "Trop de requêtes"
      },
      "internalServer": {
        "description": "Unexpected error.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "INTERNAL_SERVER_ERROR",
              "status": 500,
              "detail": null,
              "instance": null,
              "category": "INTERNAL_SERVER_ERROR",
              "errors": []
            }
          }
        },
        "x-i18n-description-fr": "Erreur inattendue."
      },
      "notFound": {
        "description": "Not Found.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "NOT_FOUND",
              "status": 404,
              "detail": null,
              "instance": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "category": "INVALID_REQUEST_ERROR",
              "errors": []
            }
          }
        },
        "x-i18n-description-fr": "Introuvable."
      },
      "conflict": {
        "description": "Request could not be completed due to a conflict with resource state or existing idempotency key.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "idempotency_error": {
                "$ref": "#/components/examples/IdempotencyRequestErrorResponse"
              }
            }
          }
        },
        "x-i18n-description-fr": "La demande n’a pas pu être terminée en raison d’un conflit avec l’état de la ressource ou la clé d’idempotence existante."
      },
      "badRequest": {
        "description": "Bad Request.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        },
        "x-i18n-description-fr": "Mauvaise demande."
      },
      "concurrencyConflict": {
        "description": "Request could not be completed due to a concurrent access issue.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "concurrency_error": {
                "$ref": "#/components/examples/concurrentRequestErrorResponse"
              }
            }
          }
        },
        "x-i18n-description-fr": "La demande n’a pas pu être complétée en raison d’un problème d’accès simultané."
      }
    }
  }
}