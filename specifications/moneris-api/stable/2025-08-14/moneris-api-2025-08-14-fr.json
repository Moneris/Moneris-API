{
  "openapi": "3.0.3",
  "info": {
    "version": "2.4.0",
    "title": "API de Moneris",
    "description": "Plateforme des API de Moneris\n",
    "termsOfService": "https://www.moneris.com/fr-ca/juridiques/conditions-utilisation",
    "contact": {
      "url": "https://api-developer.moneris.com",
      "email": "UnifiedAPI@moneris.com"
    },
    "license": {
      "name": "Moneris",
      "url": "https://developer.moneris.com/Agreements/Terms%20of%20Use"
    },
    "x-audience": "external-public"
  },
  "servers": [
    {
      "url": "https://api.moneris.io",
      "description": "Serveur de production (utilise des données réelles)"
    },
    {
      "url": "https://api.sb.moneris.io",
      "description": "Serveur de test (utilise des données de test)"
    }
  ],
  "tags": [
    {
      "name": "Paiements",
      "description": "Effectuer et gérer les paiements"
    },
    {
      "name": "Modes de Paiement",
      "description": "Créer et gérer les modes paiements"
    },
    {
      "name": "Remboursements",
      "description": "Effectuer et gérer les remboursements"
    },
    {
      "name": "Validations",
      "description": "Effectuer et gérer les validations"
    },
    {
      "name": "Clients",
      "description": "Créer et gérer les clients"
    },
    {
      "name": "Authentification 3DS",
      "description": "Effectuer des authentications 3D-Secure sur des moyens de paiements"
    },
    {
      "name": "Kount",
      "description": "Effectuer et gérer les demandes d'évaluation des risques Kount"
    },
    {
      "name": "Abonnements",
      "description": "Effectuer et gérer les Abonnements"
    },
    {
      "name": "Paiements en plusieurs versements",
      "description": "Effectuer et gérer les paiements en plusieurs versements"
    },
    {
      "name": "Commerçants",
      "description": "Gérer les commerçants"
    },
    {
      "name": "Commandes de terminaux et de services",
      "description": "Gérer les commandes de terminaux et de services Moneris"
    },
    {
      "name": "Produits",
      "description": "Recommandations de produits"
    },
    {
      "name": "Événements",
      "description": "Recevoire des événements en temps réel concernant vos ressources API de Moneris."
    }
  ],
  "paths": {
    "/payments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Liste des paiements",
        "description": "Renvoie une liste paginée de paiements.",
        "operationId": "getPayments",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listPaymentsResponse"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "post": {
        "summary": "Créer un paiement",
        "description": "Cette opération est utilisée pour initier un paiement.",
        "operationId": "createPayments",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createPaymentRequest"
              },
              "examples": {
                "regularPurchaseWithPaymentMethodId": {
                  "$ref": "#/components/examples/regularPurchaseWithPaymentMethodId"
                },
                "regularPurchaseWithCardPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithCardPaymentMethod"
                },
                "regularPurchaseWithTemporaryPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithTemporaryPaymentMethod"
                },
                "regularPurchaseWithPermanentPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithPermanentPaymentMethod"
                },
                "regularPurchaseWithApplePayEncryptedPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithApplePayEncryptedPaymentMethod"
                },
                "regularPurchaseWithApplePayDecryptedPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithApplePayDecryptedPaymentMethod"
                },
                "regularPurchaseWithGooglePayEncryptedPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithGooglePayEncryptedPaymentMethod"
                },
                "regularPurchaseWithGooglePayDecryptedPaymentMethod": {
                  "$ref": "#/components/examples/regularPurchaseWithGooglePayDecryptedPaymentMethod"
                },
                "preAuthorizationWithPaymentMethodId": {
                  "$ref": "#/components/examples/preAuthorizationWithPaymentMethodId"
                },
                "preAuthorizationWithCardPaymentMethod": {
                  "$ref": "#/components/examples/preAuthorizationWithCardPaymentMethod"
                },
                "preAuthorizationWithTemporaryToken": {
                  "$ref": "#/components/examples/preAuthorizationWithTemporaryToken"
                },
                "preAuthorizationWithPermanentToken": {
                  "$ref": "#/components/examples/preAuthorizationWithPermanentToken"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createPaymentSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/createPaymentBadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/createPaymentUnprocessableContentResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/payments/{payment-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/paymentId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Récupérer le paiement",
        "description": "Récupérer un paiement à l’aide de son ID de paiement",
        "operationId": "getPayment",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrievePaymentSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/payments/{payment-id}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/paymentId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Annuler le paiement",
        "description": "Annuler un paiement. Cette opération peut ne pas être possible si le paiement a été effectué.",
        "operationId": "cancelPayment",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cancelPaymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/cancelPaymentSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/cancelPaymentUnprocessableContentResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/payments/{payment-id}/complete": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/paymentId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Effectuer le paiement",
        "description": "Cela permettra de saisir efficacement un paiement qui a été autorisé.",
        "operationId": "completePayment",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Paiements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/completionRequest"
              },
              "example": {
                "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
                "invoiceNumber": "1a2s3d45v6",
                "customData": {
                  "property1": "string",
                  "property2": "string"
                },
                "amount": {
                  "amount": 16000,
                  "currency": "CAD"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/completePaymentSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/completePaymentBadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/completePaymentUnprocessableContentResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/payment-methods": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Répertorier les modes de paiement",
        "description": "Récupère une liste paginée des modes de paiement.",
        "operationId": "getPaymentMethods",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de Paiement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listPaymentMethodsResponse"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "post": {
        "summary": "Créer un mode de paiement",
        "description": "Créez un mode de paiement.",
        "operationId": "createPaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de Paiement"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createPaymentMethodRequest"
              },
              "examples": {
                "card": {
                  "$ref": "#/components/examples/cardPaymentMethodRequest"
                },
                "temporary_token": {
                  "$ref": "#/components/examples/temporaryTokenPaymentMethodRequest"
                },
                "permanent_token": {
                  "$ref": "#/components/examples/permanentTokenPaymentMethodRequest"
                },
                "apple_pay_encrypted": {
                  "$ref": "#/components/examples/applePayEncryptedPaymentMethodRequest"
                },
                "apple_pay_decrypted": {
                  "$ref": "#/components/examples/applePayDecryptedPaymentMethodRequest"
                },
                "google_pay_encrypted": {
                  "$ref": "#/components/examples/googlePayEncryptedPaymentMethodRequest"
                },
                "google_pay_decrypted": {
                  "$ref": "#/components/examples/googlePayDecryptedPaymentMethodRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createPaymentMethodSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/payment-methods/{payment-method-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/paymentMethodId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Récupérer le mode de paiement",
        "description": "Récupérer un moyen de paiement par ID",
        "operationId": "getPaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de Paiement"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrievePaymentMethodSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/paymentMethodNotFoundResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "put": {
        "summary": "Mettre à jour le mode de paiement",
        "description": "Mettre à jour le mode de paiement référencé par son Id. \nCertaines informations peuvent ne pas être mises à jour si le mode de paiement a été utilisé dans une transaction.\n",
        "operationId": "updatePaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de Paiement"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updatePaymentMethodRequest"
              },
              "examples": {
                "card": {
                  "$ref": "#/components/examples/updateCardPaymentMethodRequest"
                },
                "temporary_token": {
                  "$ref": "#/components/examples/updateTemporaryTokenPaymentMethodRequest"
                },
                "permanent_token": {
                  "$ref": "#/components/examples/updatePermanentTokenPaymentMethodRequest"
                },
                "apple_pay_encrypted": {
                  "$ref": "#/components/examples/applePayEncryptedPaymentMethodRequest"
                },
                "apple_pay_decrypted": {
                  "$ref": "#/components/examples/applePayDecryptedPaymentMethodRequest"
                },
                "google_pay_encrypted": {
                  "$ref": "#/components/examples/googlePayEncryptedPaymentMethodRequest"
                },
                "google_pay_decrypted": {
                  "$ref": "#/components/examples/googlePayDecryptedPaymentMethodRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/paymentMethodUpdateSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/paymentMethodNotFoundResponse"
          },
          "409": {
            "$ref": "#/components/responses/concurrencyConflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "delete": {
        "summary": "Supprimer le mode de paiement",
        "description": "Supprime un mode de paiement.",
        "operationId": "deletePaymentMethod",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Modes de Paiement"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/paymentMethodDeleteSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/paymentMethodNotFoundResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/refunds": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Liste des remboursements",
        "description": "Renvoie une liste paginée des opérations de remboursement.",
        "operationId": "getRefunds",
        "security": [
          {
            "OAuth2": [
              "refund.read"
            ]
          },
          {
            "OAuth2": [
              "refund.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Remboursements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listRefundsSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "post": {
        "summary": "Créer un remboursement",
        "description": "Cette opération est utilisée pour créer un remboursement. \nPour les remboursements de paiement, l’ID de paiement est requis tandis que le mode de paiement n’est pas requis.\nPour les remboursements indépendants, aucun identifiant de paiement n’est requis, mais le mode de paiement est requis.\n",
        "operationId": "createRefund",
        "security": [
          {
            "OAuth2": [
              "refund.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Remboursements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRefundRequest"
              },
              "examples": {
                "matching": {
                  "$ref": "#/components/examples/matchingRefundRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createRefundSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/createRefundBadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/createRefundDeclinedResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/refunds/{refund-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/refundId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Récupérer le remboursement",
        "description": "Récupérer un remboursement par son Id.",
        "operationId": "getRefundById",
        "security": [
          {
            "OAuth2": [
              "refund.read"
            ]
          },
          {
            "OAuth2": [
              "refund.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Remboursements"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrieveRefundSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/refundNotFoundResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/validations": {
      "description": "Paramétrez un mode de paiement pour les paiements futurs. \nSimilaire à un paiement, mais aucun frais n’est créé.\nUtile lors de l’intégration des clients, mais pas pour les facturer tout de suite.\n",
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Validations de cartes de liste",
        "description": "Renvoie une liste paginée des validations de cartes qui ont été exécutées.",
        "operationId": "getValidations",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Validations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listValidationsSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "post": {
        "summary": "Créer une validation de carte",
        "description": "Lancez une nouvelle demande de validation de carte.",
        "operationId": "createValidation",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Validations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createValidationRequest"
              },
              "examples": {
                "with_payment_method_id": {
                  "$ref": "#/components/examples/validationWithPaymentMethodId"
                },
                "with_card_payment_method": {
                  "$ref": "#/components/examples/validationWithCardPaymentMethod"
                },
                "with_temporary_token_payment_method": {
                  "$ref": "#/components/examples/validationWithTemporaryTokenPaymentMethod"
                },
                "with_permanent_token_payment_method": {
                  "$ref": "#/components/examples/validationWithPermanentTokenPaymentMethod"
                },
                "with_apple_pay_encrypted_payment_method": {
                  "$ref": "#/components/examples/validationWithApplePayEncryptedPaymentMethod"
                },
                "with_apple_pay_decrypted_payment_method": {
                  "$ref": "#/components/examples/validationWithApplePayDecryptedPaymentMethod"
                },
                "with_google_pay_encrypted_payment_method": {
                  "$ref": "#/components/examples/validationWithGooglePayEncryptedPaymentMethod"
                },
                "with_google_pay_decrypted_payment_method": {
                  "$ref": "#/components/examples/validationWithGooglePayDecryptedPaymentMethod"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Demande de validation créée avec succès.",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validation"
                }
              }
            }
          },
          "400": {
            "description": "Réponse du résultat de l’opération de validation ayant échoué",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              }
            },
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "invalid_request": {
                    "$ref": "#/components/examples/InvalidRequestErrorResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "description": "Réponse du résultat de l’opération de validation ayant échoué",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              }
            },
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "declined": {
                    "$ref": "#/components/examples/exp-validationResponse_DeclineErrorResponse"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/validations/{validation-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/validationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Récupérer la validation de la carte.",
        "description": "Récupérer une validation de carte par id.",
        "operationId": "getValidation",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Validations"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrieveValidationSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/validationNotFoundResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/subscriptions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Créer un abonnement",
        "description": "Cette opération permet de créer un abonnement.",
        "operationId": "createSubscriptions",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Abonnements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createSubscriptionRequest"
              },
              "examples": {
                "subscriptionRequestWithImmediateInitialAmount": {
                  "$ref": "#/components/examples/subscriptionRequestWithImmediateInitialAmount"
                },
                "dailyPaymentRequestToStartAtbillingStartDate": {
                  "$ref": "#/components/examples/dailyPaymentRequestToStartAtbillingStartDate"
                },
                "weeklyPaymentRequestToStartAtbillingStartDate": {
                  "$ref": "#/components/examples/weeklyPaymentRequestToStartAtbillingStartDate"
                },
                "biweeklyPaymentRequestToStartAtbillingStartDate": {
                  "$ref": "#/components/examples/biweeklyPaymentRequestToStartAtbillingStartDate"
                },
                "monthlyPaymentRequestToStartAtbillingStartDate": {
                  "$ref": "#/components/examples/monthlyPaymentRequestToStartAtbillingStartDate"
                },
                "endOfMonthPaymentRequestToStartAtbillingStartDate": {
                  "$ref": "#/components/examples/endOfMonthPaymentRequestToStartAtbillingStartDate"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createSubscriptionSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "get": {
        "summary": "Lister les abonnements",
        "description": "Renvoie une liste paginée des abonnements.",
        "operationId": "getSubscriptions",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Abonnements"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listSubscriptionsResponse"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/subscriptions/{subscription-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/subscriptionId"
        }
      ],
      "get": {
        "summary": "Récupérer un abonnement",
        "description": "Récupérer les détails d'un abonnement par identifiant",
        "operationId": "getSubscription",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Abonnements"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrieveSubscriptionSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "patch": {
        "summary": "Mettre à jour l'abonnement",
        "description": "Mettre à jour l'abonnement",
        "operationId": "updateSubscription",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Abonnements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/updateSubscriptionDetails"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updateSubscriptionSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/subscriptions/{subscription-id}/resume": {
      "parameters": [
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/subscriptionId"
        }
      ],
      "post": {
        "summary": "Reprendre un abonnement",
        "description": "Reprend une facturation d'abonnement.\nLorsqu'une transaction est en attente, elle n'est pas facturée pour le montant récurrent.\nCependant, le nombre de récurrences restantes continue d'être décrémenté pendant cette période.\n",
        "operationId": "resumeSubscription",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Abonnements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resumeSubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/resumeSubscriptionSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/subscriptions/{subscription-id}/pause": {
      "parameters": [
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/subscriptionId"
        }
      ],
      "post": {
        "summary": "Suspendre un abonnement",
        "description": "Suspend temporairement la facturation d'abonnement.\nLorsqu'une transaction est en attente, elle n'est pas facturée pour le montant d'abonnement.\nToutefois, le nombre de transactions d'abonnement restantes continue de diminuer pendant cette période.\n",
        "operationId": "pauseSubscription",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Abonnements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pauseSubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/pauseSubscriptionSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/subscriptions/{subscription-id}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/subscriptionId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Annuler un abonnement",
        "description": "Annuler un abonnement.",
        "operationId": "cancelSubscription",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Abonnements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cancelSubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/cancelSubscriptionSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/subscriptions/{subscription-id}/extend": {
      "parameters": [
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/subscriptionId"
        }
      ],
      "post": {
        "summary": "Prolonger un abonnement",
        "description": "Ajoute le nombre donné de transactions d'abonnement au nombre actuel (restant).\nCela peut être utilisé si un client décide de prolonger un abonnement.\nCependant, comme ce nombre doit être positif, il ne peut pas être utilisé pour diminuer le nombre actuel de transactions d'abonnement. Pour cela, utilisez Mettre à jour un abonnement.",
        "operationId": "extendSubscription",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Abonnements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/extendSubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/extendSubscriptionSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/customers": {
      "description": "Cette API permet de gérer les clients passés et récurrents.\nTrès utile lors du suivi et de la gestion des frais appartenant au même client.\n",
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Liste des clients",
        "description": "Renvoie une liste paginée de clients.",
        "operationId": "getCustomers",
        "security": [
          {
            "OAuth2": [
              "customer.read"
            ]
          },
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listCustomersSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/invalidListbadRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "post": {
        "summary": "Créer un client",
        "description": "Cette opération permet de créer un nouveau client.",
        "operationId": "createCustomers",
        "security": [
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createCustomerSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/customers/{customer-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/customerId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "get": {
        "summary": "Récupérer le client",
        "description": "Récupérer un client par son Id.",
        "operationId": "getCustomer",
        "security": [
          {
            "OAuth2": [
              "customer.read"
            ]
          },
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrieveCustomerSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/customerNotFoundResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "put": {
        "summary": "Mettre à jour le client",
        "description": "Met à jour les données du client telles que le nom, l’adresse, etc.",
        "operationId": "updateCustomer",
        "security": [
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/customerUpdateSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/customerNotFoundResponse"
          },
          "409": {
            "$ref": "#/components/responses/concurrencyConflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "delete": {
        "summary": "Supprimer le client",
        "description": "Supprimer un client par son identifiant",
        "operationId": "deleteCustomer",
        "security": [
          {
            "OAuth2": [
              "customer.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Clients"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/customerDeleteSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/customerNotFoundResponse"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/three-d-secure/authentications": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Créer une authentification",
        "description": "Cette opération permet de créer une demande d’authentification. \nLa demande d’authentification sert à lancer le processus de validation de la carte. \nLe résultat de cette demande détermine si 3DS est pris en charge par la carte et quel type d’authentification est requis.\n",
        "operationId": "createAuthentication",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Authentification 3DS"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authenticationRequest"
              },
              "examples": {
                "threeDSecureBrowserChannelWithPaymentMethodId": {
                  "$ref": "#/components/examples/threeDSecureBrowserChannelWithPaymentMethodId"
                },
                "threeDSecureBrowserChannelWithCardPaymentMethod": {
                  "$ref": "#/components/examples/threeDSecureBrowserChannelWithCardPaymentMethod"
                },
                "threeDSecureBrowserChannelWithTemporaryToken": {
                  "$ref": "#/components/examples/threeDSecureBrowserChannelWithTemporaryToken"
                },
                "threeDSecureBrowserChannelWithPermanentToken": {
                  "$ref": "#/components/examples/threeDSecureBrowserChannelWithPermanentToken"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createThreeDSecureAuthenticationSuccessResponse"
          },
          "202": {
            "$ref": "#/components/responses/createThreeDSecureAuthenticationChallengeResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/three-d-secure/authentications/{authentication-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/authenticationId"
        }
      ],
      "get": {
        "summary": "Récupérer l’authentification",
        "description": "Récupérer une authentification par son ID d’authentification",
        "operationId": "getAuthentication",
        "security": [
          {
            "OAuth2": [
              "payment.read"
            ]
          },
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Authentification 3DS"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrieveThreeDSecureAuthenticationSuccessResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/three-d-secure/authentications/{authentication-id}/lookup": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/authenticationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Recherche de valeur d’authentification",
        "description": "L’objectif du flux 3-D Secure est de vérifier que le véritable titulaire de la carte fait partie de l’autorisation. Le flux d’authentification est utilisé pour présenter un moyen d’authentifier le titulaire de la carte à l’aide, par exemple, de l’OTP ou d’une méthode d’identification fédérée.",
        "operationId": "authenticationValueLookup",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Authentification 3DS"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lookupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/threeDSecureAuthenticationLookupSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/three-d-secure/card-lookups": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Recherche de carte 3DS",
        "operationId": "cardLookup",
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Authentification 3DS"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cardLookupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createThreeDSecureCardLookupSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/kount-inquiries": {
      "parameters": [
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        }
      ],
      "post": {
        "summary": "Créer une demande Kount",
        "operationId": "createKountInquiry",
        "security": [
          {
            "OAuth2": [
              "kount.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Kount"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kountInquiryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/createKountInquirySuccessResponse"
          },
          "202": {
            "$ref": "#/components/responses/createKountInquiryAcceptedResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "get": {
        "summary": "Liste Kount Demandes de renseignements",
        "operationId": "getKountInquiries",
        "security": [
          {
            "OAuth2": [
              "kount.read"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Kount"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/pageBeforeCursor"
          },
          {
            "$ref": "#/components/parameters/pageLimit"
          },
          {
            "$ref": "#/components/parameters/createdFrom"
          },
          {
            "$ref": "#/components/parameters/createdTo"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listKountInquiriesSuccessResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/kount-inquiries/{kount-inquiry-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/kountInquiryId"
        }
      ],
      "get": {
        "summary": "Obtenir Kount Inquiry by Id",
        "operationId": "getKountInquiryById",
        "security": [
          {
            "OAuth2": [
              "kount.read"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Kount"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/retrieveKountInquiryResponse"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/kount-inquiries/{kount-inquiry-id}/assert": {
      "parameters": [
        {
          "$ref": "#/components/parameters/merchantId"
        },
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/kountInquiryId"
        }
      ],
      "post": {
        "summary": "Kount Inquiry Assert",
        "operationId": "kountInquiryAssert",
        "security": [
          {
            "OAuth2": [
              "kount.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Kount"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kountAssertRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/assertKountInquirySuccessResponse"
          },
          "202": {
            "$ref": "#/components/responses/assertKountInquiryAcceptedResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/installments/plans": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/merchantId"
        }
      ],
      "post": {
        "summary": "Recherche de plan d'installments",
        "description": "Retourne la liste des plans d'installments pour lesquels le titulaire de la carte est éligible.",
        "operationId": "installmentLookup",
        "tags": [
          "Installments"
        ],
        "security": [
          {
            "OAuth2": [
              "payment.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Requête de recherche de plan d'installments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/installmentEligibilityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/installmentLookupResponse"
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/onboarding/merchants": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        }
      ],
      "post": {
        "summary": "Create Merchant",
        "description": "Submit a merchant payload to create a merchant",
        "operationId": "createMerchant",
        "security": [
          {
            "OAuth2": [
              "onboarding.merchant.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Commerçants"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createMerchantRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              },
              "Location": {
                "$ref": "#/components/headers/location"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/merchant"
                },
                "example": {
                  "merchantId": "0030211900875",
                  "businessDetails": {
                    "isSeasonalMerchant": false,
                    "merchantCategoryCode": "0742",
                    "averageTicketSize": 3,
                    "directSellingPercentage": 86,
                    "motoTransactionPercentage": 14,
                    "ecommerceTransactionPercentage": 0,
                    "businessUrl": "https://www.test.io",
                    "serviceProvider": "moneris.com",
                    "serviceDeliverToCanadaAvailable": true,
                    "serviceDeliverToUSAvailable": true,
                    "creditTransactionVolume": 250000,
                    "masterCardTransactionVolume": 100000,
                    "visaTransactionVolume": 100000,
                    "visaDebitTransactionVolume": 0,
                    "amexTransactionVolume": 25000,
                    "interacTransactionVolume": 50000,
                    "masterCardDebitTransactionVolume": 0,
                    "category": "CONTRACTED_SERVICES",
                    "subCategory": "VETERINARY_SERVICES",
                    "offeredProductsAndServicesDescription": "food"
                  },
                  "merchantDetails": {
                    "contactInformation": {
                      "firstName": "Joe",
                      "lastName": "Test",
                      "phone": "+11234567890"
                    },
                    "merchantInformation": {
                      "cardholderName": "Joe Test",
                      "language": "en",
                      "legalName": "Joe",
                      "operatingAsName": "Joe OPS",
                      "yearsOfOwnership": 3,
                      "monthsOfOwnership": 2,
                      "customerServicePhoneNumber": "+11234567890",
                      "email": "qa-test@moneris.com",
                      "merchantType": "NATIONAL"
                    },
                    "locationAddress": {
                      "postalCode": "M5T2G2",
                      "city": "TORONTO",
                      "province": "ON",
                      "streetName": "SPADINA AVE",
                      "country": "CA"
                    }
                  },
                  "businessActivity": {
                    "dropShipping": true
                  },
                  "securityDetails": {
                    "legalEntity": {
                      "businessType": "PRIVATE_CORPORATION"
                    },
                    "signingOfficers": [
                      {
                        "signingOfficerIdentifier": 1234,
                        "dateOfBirth": "1980-01-01",
                        "creditReportAllowed": true,
                        "firstName": "DOMEMIC",
                        "lastName": "TESTPOTKIDIS",
                        "address": {
                          "postalCode": "K1M1N8",
                          "city": "OTTAWA",
                          "province": "ON",
                          "streetName": "STANLEY",
                          "country": "CA"
                        },
                        "ownershipPercentage": 100,
                        "title": "VICE_PRESIDENT"
                      }
                    ]
                  },
                  "riskDetails": {
                    "merchantRiskRate": "A_PLUS"
                  },
                  "pointOfSaleOptions": {
                    "settlementOption": "MERCHANT_CLOSE",
                    "settlementTime": "23:00:00",
                    "debitPerTransactionRefundLimit": {
                      "amount": 0,
                      "currency": "CAD"
                    },
                    "dailyRefundLimit": {
                      "amount": 0,
                      "currency": "CAD"
                    },
                    "dailyCancellationLimit": {
                      "amount": 0,
                      "currency": "CAD"
                    }
                  },
                  "bankingDetails": {
                    "creditDepositAccount": {
                      "currency": "CAD",
                      "institutionNumber": "00809",
                      "transitNumber": "00160",
                      "accountNumber": "3333333333"
                    },
                    "additionalBankingAccounts": []
                  },
                  "chainId": "0030600062664",
                  "createdAt": "2025-01-01T00:00:00Z",
                  "modifiedAt": "2025-01-01T00:00:00Z"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/onboarding/merchants/{merchant-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-merchants_merchantId"
        }
      ],
      "get": {
        "summary": "Get the details of a Merchant",
        "operationId": "getMerchantDetailsByMerchantId",
        "tags": [
          "Commerçants"
        ],
        "description": "Get merchant details by ID\n",
        "security": [
          {
            "OAuth2": [
              "onboarding.merchant.read"
            ]
          },
          {
            "OAuth2": [
              "onboarding.merchant.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response corresponding to the provided merchant id parameter",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/merchant"
                },
                "example": {
                  "merchantId": "0030211900875",
                  "businessDetails": {
                    "isSeasonalMerchant": false,
                    "merchantCategoryCode": "0742",
                    "averageTicketSize": 3,
                    "directSellingPercentage": 86,
                    "motoTransactionPercentage": 14,
                    "ecommerceTransactionPercentage": 0,
                    "businessUrl": "https://www.test.io",
                    "serviceProvider": "moneris.com",
                    "serviceDeliverToCanadaAvailable": true,
                    "serviceDeliverToUSAvailable": true,
                    "creditTransactionVolume": 250000,
                    "masterCardTransactionVolume": 100000,
                    "visaTransactionVolume": 100000,
                    "visaDebitTransactionVolume": 0,
                    "amexTransactionVolume": 25000,
                    "interacTransactionVolume": 50000,
                    "masterCardDebitTransactionVolume": 0,
                    "category": "CONTRACTED_SERVICES",
                    "subCategory": "VETERINARY_SERVICES",
                    "offeredProductsAndServicesDescription": "food"
                  },
                  "merchantDetails": {
                    "contactInformation": {
                      "firstName": "Joe",
                      "lastName": "Test",
                      "phone": "+11234567890"
                    },
                    "merchantInformation": {
                      "cardholderName": "Joe Test",
                      "language": "en",
                      "legalName": "Joe",
                      "operatingAsName": "Joe OPS",
                      "yearsOfOwnership": 3,
                      "monthsOfOwnership": 2,
                      "customerServicePhoneNumber": "+11234567890",
                      "email": "qa-test@moneris.com",
                      "merchantType": "NATIONAL"
                    },
                    "locationAddress": {
                      "postalCode": "M5T2G2",
                      "city": "TORONTO",
                      "province": "ON",
                      "streetName": "SPADINA AVE",
                      "country": "CA"
                    }
                  },
                  "businessActivity": {
                    "dropShipping": true
                  },
                  "securityDetails": {
                    "legalEntity": {
                      "businessType": "PRIVATE_CORPORATION"
                    },
                    "signingOfficers": [
                      {
                        "signingOfficerIdentifier": 1234,
                        "dateOfBirth": "1980-01-01",
                        "creditReportAllowed": true,
                        "firstName": "DOMEMIC",
                        "lastName": "TESTPOTKIDIS",
                        "address": {
                          "postalCode": "K1M1N8",
                          "city": "OTTAWA",
                          "province": "ON",
                          "streetName": "STANLEY",
                          "country": "CA"
                        },
                        "ownershipPercentage": 100,
                        "title": "VICE_PRESIDENT"
                      }
                    ]
                  },
                  "riskDetails": {
                    "merchantRiskRate": "A_PLUS"
                  },
                  "pointOfSaleOptions": {
                    "settlementOption": "MERCHANT_CLOSE",
                    "settlementTime": "23:00:00",
                    "debitPerTransactionRefundLimit": {
                      "amount": 0,
                      "currency": "CAD"
                    },
                    "dailyRefundLimit": {
                      "amount": 0,
                      "currency": "CAD"
                    },
                    "dailyCancellationLimit": {
                      "amount": 0,
                      "currency": "CAD"
                    }
                  },
                  "bankingDetails": {
                    "creditDepositAccount": {
                      "currency": "CAD",
                      "institutionNumber": "00809",
                      "transitNumber": "00160",
                      "accountNumber": "3333333333"
                    },
                    "additionalBankingAccounts": []
                  },
                  "chainId": "0030600062664",
                  "createdAt": "2025-01-01T00:00:00Z",
                  "modifiedAt": "2025-01-01T00:00:00Z"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "put": {
        "summary": "Update Merchant",
        "operationId": "updateMerchant",
        "security": [
          {
            "OAuth2": [
              "onboarding.merchant.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Commerçants"
        ],
        "description": "Update merchant based on the supplied payload.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/merchantPayload"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful response",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/onboarding/merchants/{merchant-id}/supplies": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-merchants_merchantId"
        }
      ],
      "get": {
        "summary": "List merchant supplies",
        "operationId": "listMerchantSupplies",
        "security": [
          {
            "OAuth2": [
              "onboarding.merchant.read"
            ]
          },
          {
            "OAuth2": [
              "onboarding.merchant.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Commerçants"
        ],
        "description": "Get merchant supplies by merchant ID\n",
        "responses": {
          "200": {
            "description": "Successful response corresponding to the provided payload",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/merchantSupplies"
                },
                "example": {
                  "data": [
                    {
                      "deviceName": "iWL220 + Communication Base",
                      "carriers": [
                        "Telus",
                        "Rogers"
                      ],
                      "softwareVendors": [
                        "DataCandy"
                      ],
                      "serviceCode": "0010",
                      "unitPrice": {
                        "amount": 10,
                        "currency": "CAD"
                      },
                      "supplyType": "wireless",
                      "supplies": [
                        {
                          "supplyName": "Manual Flatbed Imprinter and Plate",
                          "unitPrice": {
                            "amount": 1600,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Manual Flatbed Imprinter Replacement Plate",
                          "unitPrice": {
                            "amount": 2000,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - 2.25\"x1.64\"x62 (15)",
                          "unitPrice": {
                            "amount": 1650,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Torx 25 Security Wrench and Screws",
                          "unitPrice": {
                            "amount": 950,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - Thermal 2.25\"x1.64\" (100)",
                          "unitPrice": {
                            "amount": 7080,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - Phenol-free: 62' (100)",
                          "unitPrice": {
                            "amount": 7080,
                            "currency": "CAD"
                          }
                        }
                      ]
                    },
                    {
                      "deviceName": "iWL220 + Charge Base",
                      "carriers": [
                        "Telus",
                        "Rogers"
                      ],
                      "softwareVendors": [
                        "DataCandy"
                      ],
                      "serviceCode": "0011",
                      "unitPrice": {
                        "amount": 11,
                        "currency": "CAD"
                      },
                      "supplyType": "wireless",
                      "supplies": [
                        {
                          "supplyName": "Manual Flatbed Imprinter and Plate",
                          "unitPrice": {
                            "amount": 1600,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Manual Flatbed Imprinter Replacement Plate",
                          "unitPrice": {
                            "amount": 2000,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - 2.25\"x1.64\"x62 (15)",
                          "unitPrice": {
                            "amount": 1650,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Torx 25 Security Wrench and Screws",
                          "unitPrice": {
                            "amount": 950,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - Thermal 2.25\"x1.64\" (100)",
                          "unitPrice": {
                            "amount": 7080,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - Phenol-free: 62' (100)",
                          "unitPrice": {
                            "amount": 7080,
                            "currency": "CAD"
                          }
                        }
                      ]
                    },
                    {
                      "deviceName": "iWL220 Communication Base",
                      "carriers": [
                        "Telus",
                        "Rogers"
                      ],
                      "softwareVendors": [
                        "DataCandy"
                      ],
                      "serviceCode": "0014",
                      "unitPrice": {
                        "amount": 14,
                        "currency": "CAD"
                      },
                      "supplyType": "wireless",
                      "supplies": [
                        {
                          "supplyName": "Manual Flatbed Imprinter and Plate",
                          "unitPrice": {
                            "amount": 1600,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Manual Flatbed Imprinter Replacement Plate",
                          "unitPrice": {
                            "amount": 2000,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - 2.25\"x1.64\"x62 (15)",
                          "unitPrice": {
                            "amount": 1650,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Torx 25 Security Wrench and Screws",
                          "unitPrice": {
                            "amount": 950,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - Thermal 2.25\"x1.64\" (100)",
                          "unitPrice": {
                            "amount": 7080,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - Phenol-free: 62' (100)",
                          "unitPrice": {
                            "amount": 7080,
                            "currency": "CAD"
                          }
                        }
                      ]
                    },
                    {
                      "deviceName": "iWL220 Charge Base",
                      "carriers": [
                        "Telus",
                        "Rogers"
                      ],
                      "softwareVendors": [
                        "DataCandy"
                      ],
                      "serviceCode": "0019",
                      "unitPrice": {
                        "amount": 19,
                        "currency": "CAD"
                      },
                      "supplyType": "wireless",
                      "supplies": [
                        {
                          "supplyName": "Manual Flatbed Imprinter and Plate",
                          "unitPrice": {
                            "amount": 1600,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Manual Flatbed Imprinter Replacement Plate",
                          "unitPrice": {
                            "amount": 2000,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - 2.25\"x1.64\"x62 (15)",
                          "unitPrice": {
                            "amount": 1650,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Torx 25 Security Wrench and Screws",
                          "unitPrice": {
                            "amount": 950,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - Thermal 2.25\"x1.64\" (100)",
                          "unitPrice": {
                            "amount": 7080,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - Phenol-free: 62' (100)",
                          "unitPrice": {
                            "amount": 7080,
                            "currency": "CAD"
                          }
                        }
                      ]
                    },
                    {
                      "deviceName": "iWL255 + Charge Base",
                      "carriers": [
                        "Rogers",
                        "Telus"
                      ],
                      "softwareVendors": [
                        "DataCandy"
                      ],
                      "serviceCode": "0460",
                      "unitPrice": {
                        "amount": 9900,
                        "currency": "CAD"
                      },
                      "supplyType": "wireless",
                      "supplies": [
                        {
                          "supplyName": "Torx 25 Security Wrench and Screws",
                          "unitPrice": {
                            "amount": 950,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Case/Shoulder Strap for iWL255",
                          "unitPrice": {
                            "amount": 4700,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Manual Flatbed Imprinter and Plate",
                          "unitPrice": {
                            "amount": 1600,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Manual Flatbed Imprinter Replacement Plate",
                          "unitPrice": {
                            "amount": 2000,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - 2.25\"x1.64\"x62 (15)",
                          "unitPrice": {
                            "amount": 1650,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - Thermal 2.25\"x1.64\" (100)",
                          "unitPrice": {
                            "amount": 7080,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Car Charger for iWL255",
                          "unitPrice": {
                            "amount": 3350,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - Phenol-free: 62' (100)",
                          "unitPrice": {
                            "amount": 7080,
                            "currency": "CAD"
                          }
                        }
                      ]
                    },
                    {
                      "deviceName": "iWL255",
                      "carriers": [
                        "Rogers",
                        "Telus"
                      ],
                      "softwareVendors": [
                        "DataCandy"
                      ],
                      "serviceCode": "0461",
                      "unitPrice": {
                        "amount": 461,
                        "currency": "CAD"
                      },
                      "supplyType": "wireless",
                      "supplies": [
                        {
                          "supplyName": "Torx 25 Security Wrench and Screws",
                          "unitPrice": {
                            "amount": 950,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Case/Shoulder Strap for iWL255",
                          "unitPrice": {
                            "amount": 4700,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Manual Flatbed Imprinter and Plate",
                          "unitPrice": {
                            "amount": 1600,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Manual Flatbed Imprinter Replacement Plate",
                          "unitPrice": {
                            "amount": 2000,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - 2.25\"x1.64\"x62 (15)",
                          "unitPrice": {
                            "amount": 1650,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - Thermal 2.25\"x1.64\" (100)",
                          "unitPrice": {
                            "amount": 7080,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Car Charger for iWL255",
                          "unitPrice": {
                            "amount": 3350,
                            "currency": "CAD"
                          }
                        },
                        {
                          "supplyName": "Paper Rolls - Phenol-free: 62' (100)",
                          "unitPrice": {
                            "amount": 7080,
                            "currency": "CAD"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/onboarding/merchants/{merchant-id}/orders": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-merchants_merchantId"
        }
      ],
      "post": {
        "summary": "Create Order",
        "description": "Submit an order payload to create an order for the merchant",
        "operationId": "createOrder",
        "security": [
          {
            "OAuth2": [
              "onboarding.order.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createOrderRequest"
              },
              "examples": {
                "OrderPayload": {
                  "$ref": "#/components/examples/CreateStandardOrderPayload"
                },
                "OrderPayloadPartnerBank": {
                  "$ref": "#/components/examples/CreatePartnerBankOrderPayload"
                }
              }
            }
          }
        },
        "tags": [
          "Commandes de terminaux et de services"
        ],
        "responses": {
          "201": {
            "description": "Successful response corresponding to the provided payload",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                },
                "example": {
                  "merchantOrderId": 1471632,
                  "merchantId": "0030211900586",
                  "userIdentifier": "001",
                  "representativeCode": "0A",
                  "adjudicationRequired": true,
                  "orderStatus": "APPLICATION_SUBMITTED",
                  "orderType": "NET_NEW_MERCHANT",
                  "orderOpenedAt": "2025-06-17T16:39:01.85-05:00",
                  "orderChangedAt": "2025-06-17T17:40:55.577-05:00",
                  "feeDetails": {
                    "minimumMerchantDiscountRateFee": {
                      "unitPrice": {
                        "amount": 699,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "paperStatementFee": {
                      "unitPrice": {
                        "amount": 795,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "pciSecurityFee": {
                      "unitPrice": {
                        "amount": 895,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "totalAdminFee": {
                      "unitPrice": {
                        "amount": 200,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "agedCloseBatchFee": {
                      "unitPrice": {
                        "amount": 250,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "mastercardComplianceFee": {
                      "unitPrice": {
                        "amount": 8000,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "dialCommunicationFee": {
                      "unitPrice": {
                        "amount": 8,
                        "currency": "CAD"
                      },
                      "taxes": []
                    }
                  },
                  "promotionInformation": {
                    "promotionCode": "1MONTHOFF",
                    "promotionName": "1MONTHOFF",
                    "promotionExpirationDate": "2024-06-27T00:00:00-05:00"
                  },
                  "supplies": [
                    {
                      "supplyName": "2-PLY Sales Draft Slips (25)",
                      "unitPrice": {
                        "amount": 2,
                        "currency": "CAD"
                      },
                      "quantity": 1
                    },
                    {
                      "supplyName": "Physical Distancing Arrow Decal",
                      "unitPrice": {
                        "amount": 6,
                        "currency": "CAD"
                      },
                      "quantity": 3
                    }
                  ],
                  "productDetails": {
                    "wireless": {
                      "feeDetails": {
                        "goSoftwareFee": {
                          "feeType": "GoSoftwareFee",
                          "unitPrice": {
                            "amount": 5,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        }
                      }
                    },
                    "monerisGateway": {
                      "feeDetails": {
                        "monthlyFee": {
                          "feeType": "MonthlyFee",
                          "unitPrice": {
                            "amount": 0,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        },
                        "visa3dSecureAuthenticationTransactionFee": {
                          "feeType": "Visa3DSecureAuthTxn",
                          "unitPrice": {
                            "amount": 25,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        },
                        "mastercard3dSecureAuthenticationTransactionFee": {
                          "feeType": "Mastercard3DSecureAuthTxn",
                          "unitPrice": {
                            "amount": 11,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        },
                        "visa3dSecureAuthenticationMerchantDiscountRateFee": {
                          "feeType": "Visa3DSecureAuthMdr",
                          "unitPrice": {
                            "amount": 13,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        },
                        "mastercard3dSecureAuthenticationMerchantDiscountRateFee": {
                          "feeType": "Mastercard3DSecureAuthMdr",
                          "unitPrice": {
                            "amount": 10,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        }
                      }
                    },
                    "monerisGoPointOfSaleRetail": {
                      "feeDetails": {
                        "goRetailFee": {
                          "feeType": "GoRetailFee",
                          "unitPrice": {
                            "amount": 10,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        }
                      }
                    }
                  },
                  "bankerInformation": {
                    "bankerPhoneNumber": "+19024333434",
                    "bankerBranchIdentifier": "2679"
                  },
                  "cardPlanDetails": {
                    "selectedPlans": [
                      "VISA",
                      "MASTERCARD"
                    ],
                    "mastercard": {
                      "transactionPlans": [
                        {
                          "merchantDiscountRate": 0.111,
                          "transactionRate": 0.131
                        },
                        {
                          "merchantDiscountRate": 0.111,
                          "transactionRate": 0.131
                        }
                      ],
                      "cardBrandPlans": [],
                      "assessmentPlans": [],
                      "serviceFeeDetails": {
                        "maintenanceFee": {
                          "feeType": "maintenance",
                          "unitPrice": {
                            "amount": 301,
                            "currency": "CAD"
                          }
                        }
                      }
                    },
                    "mastercardDebit": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "visa": {
                      "transactionPlans": [
                        {
                          "merchantDiscountRate": 0,
                          "transactionRate": 0
                        }
                      ],
                      "cardBrandPlans": [],
                      "assessmentPlans": [],
                      "serviceFeeDetails": {
                        "maintenanceFee": {
                          "feeType": "maintenance",
                          "unitPrice": {
                            "amount": 301,
                            "currency": "CAD"
                          }
                        }
                      }
                    },
                    "visaDebit": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "discover": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "unionPay": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "amex": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "otherFinancialInstitutionCards": [],
                    "programs": []
                  },
                  "pointOfSaleSolutionType": "MONERIS_POINT_OF_SALE",
                  "isAcceptedByConduct": false,
                  "contractSignatureRequired": false,
                  "faxRequired": true,
                  "additionalInformation": "",
                  "businessEntityName": "Intuit",
                  "referralInformation": {
                    "description": "Other",
                    "additionalInformation": "NOT USED"
                  },
                  "hostType": "ESSENTIS",
                  "autoApprovalStatus": "MANUAL_ADJUDICATION",
                  "adjudicationApprovalStatus": "MANUAL",
                  "hasImprinter": true,
                  "isMarketSubSegmentationPreApprovalRequired": false,
                  "optOutAmexCommunication": true,
                  "multiCurrencyPricingPackageId": 1234
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/onboarding/merchants/{merchant-id}/orders/{merchant-order-id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/prm-merchants_merchantId"
        },
        {
          "$ref": "#/components/parameters/merchantOrderId"
        }
      ],
      "get": {
        "summary": "Retrieve order by Id",
        "operationId": "getOrderDetailsByOrderId",
        "security": [
          {
            "OAuth2": [
              "onboarding.order.read"
            ]
          },
          {
            "OAuth2": [
              "onboarding.order.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Commandes de terminaux et de services"
        ],
        "description": "Get order details by ID\n",
        "responses": {
          "200": {
            "description": "Successful response corresponding to the provided order id parameter",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                },
                "example": {
                  "merchantOrderId": 1471632,
                  "merchantId": "0030211900586",
                  "userIdentifier": "001",
                  "representativeCode": "0A",
                  "adjudicationRequired": true,
                  "orderStatus": "APPLICATION_SUBMITTED",
                  "orderType": "NET_NEW_MERCHANT",
                  "orderOpenedAt": "2025-06-17T16:39:01.85-05:00",
                  "orderChangedAt": "2025-06-17T17:40:55.577-05:00",
                  "feeDetails": {
                    "minimumMerchantDiscountRateFee": {
                      "unitPrice": {
                        "amount": 699,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "paperStatementFee": {
                      "unitPrice": {
                        "amount": 795,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "pciSecurityFee": {
                      "unitPrice": {
                        "amount": 895,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "totalAdminFee": {
                      "unitPrice": {
                        "amount": 200,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "agedCloseBatchFee": {
                      "unitPrice": {
                        "amount": 250,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "mastercardComplianceFee": {
                      "unitPrice": {
                        "amount": 8000,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "dialCommunicationFee": {
                      "unitPrice": {
                        "amount": 8,
                        "currency": "CAD"
                      },
                      "taxes": []
                    }
                  },
                  "promotionInformation": {
                    "promotionCode": "1MONTHOFF",
                    "promotionName": "1MONTHOFF",
                    "promotionExpirationDate": "2024-06-27T00:00:00-05:00"
                  },
                  "supplies": [
                    {
                      "supplyName": "2-PLY Sales Draft Slips (25)",
                      "unitPrice": {
                        "amount": 2,
                        "currency": "CAD"
                      },
                      "quantity": 1
                    },
                    {
                      "supplyName": "Physical Distancing Arrow Decal",
                      "unitPrice": {
                        "amount": 6,
                        "currency": "CAD"
                      },
                      "quantity": 3
                    }
                  ],
                  "productDetails": {
                    "wireless": {
                      "feeDetails": {
                        "goSoftwareFee": {
                          "feeType": "GoSoftwareFee",
                          "unitPrice": {
                            "amount": 5,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        }
                      }
                    },
                    "monerisGateway": {
                      "feeDetails": {
                        "monthlyFee": {
                          "feeType": "MonthlyFee",
                          "unitPrice": {
                            "amount": 0,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        },
                        "visa3dSecureAuthenticationTransactionFee": {
                          "feeType": "Visa3DSecureAuthTxn",
                          "unitPrice": {
                            "amount": 25,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        },
                        "mastercard3dSecureAuthenticationTransactionFee": {
                          "feeType": "Mastercard3DSecureAuthTxn",
                          "unitPrice": {
                            "amount": 11,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        },
                        "visa3dSecureAuthenticationMerchantDiscountRateFee": {
                          "feeType": "Visa3DSecureAuthMdr",
                          "unitPrice": {
                            "amount": 13,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        },
                        "mastercard3dSecureAuthenticationMerchantDiscountRateFee": {
                          "feeType": "Mastercard3DSecureAuthMdr",
                          "unitPrice": {
                            "amount": 10,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        }
                      }
                    },
                    "monerisGoPointOfSaleRetail": {
                      "feeDetails": {
                        "goRetailFee": {
                          "feeType": "GoRetailFee",
                          "unitPrice": {
                            "amount": 10,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        }
                      }
                    }
                  },
                  "bankerInformation": {
                    "bankerPhoneNumber": "+19024333434",
                    "bankerBranchIdentifier": "2679"
                  },
                  "cardPlanDetails": {
                    "selectedPlans": [
                      "VISA",
                      "MASTERCARD"
                    ],
                    "mastercard": {
                      "transactionPlans": [
                        {
                          "merchantDiscountRate": 0.111,
                          "transactionRate": 0.131
                        },
                        {
                          "merchantDiscountRate": 0.111,
                          "transactionRate": 0.131
                        }
                      ],
                      "cardBrandPlans": [],
                      "assessmentPlans": [],
                      "serviceFeeDetails": {
                        "maintenanceFee": {
                          "feeType": "maintenance",
                          "unitPrice": {
                            "amount": 301,
                            "currency": "CAD"
                          }
                        }
                      }
                    },
                    "mastercardDebit": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "visa": {
                      "transactionPlans": [
                        {
                          "merchantDiscountRate": 0,
                          "transactionRate": 0
                        }
                      ],
                      "cardBrandPlans": [],
                      "assessmentPlans": [],
                      "serviceFeeDetails": {
                        "maintenanceFee": {
                          "feeType": "maintenance",
                          "unitPrice": {
                            "amount": 301,
                            "currency": "CAD"
                          }
                        }
                      }
                    },
                    "visaDebit": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "discover": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "unionPay": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "amex": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "otherFinancialInstitutionCards": [],
                    "programs": []
                  },
                  "pointOfSaleSolutionType": "MONERIS_POINT_OF_SALE",
                  "isAcceptedByConduct": false,
                  "contractSignatureRequired": false,
                  "faxRequired": true,
                  "additionalInformation": "",
                  "businessEntityName": "Intuit",
                  "referralInformation": {
                    "description": "Other",
                    "additionalInformation": "NOT USED"
                  },
                  "hostType": "ESSENTIS",
                  "autoApprovalStatus": "MANUAL_ADJUDICATION",
                  "adjudicationApprovalStatus": "MANUAL",
                  "hasImprinter": true,
                  "isMarketSubSegmentationPreApprovalRequired": false,
                  "optOutAmexCommunication": true,
                  "multiCurrencyPricingPackageId": 1234
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      },
      "put": {
        "summary": "Update an order by ID",
        "operationId": "updateOrder",
        "security": [
          {
            "OAuth2": [
              "onboarding.order.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateOrderRequest"
              },
              "examples": {
                "OrderPayload": {
                  "$ref": "#/components/examples/UpdateStandardOrderPayload"
                },
                "OrderPayloadPartnerBank": {
                  "$ref": "#/components/examples/UpdatePartnerBankOrderPayload"
                }
              }
            }
          }
        },
        "tags": [
          "Commandes de terminaux et de services"
        ],
        "responses": {
          "200": {
            "description": "Successful response corresponding to the provided payload",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                },
                "example": {
                  "merchantOrderId": 1471632,
                  "merchantId": "0030211900586",
                  "userIdentifier": "001",
                  "representativeCode": "0A",
                  "adjudicationRequired": true,
                  "orderStatus": "APPLICATION_SUBMITTED",
                  "orderType": "NET_NEW_MERCHANT",
                  "orderOpenedAt": "2025-06-17T16:39:01.85-05:00",
                  "orderChangedAt": "2025-06-17T17:40:55.577-05:00",
                  "feeDetails": {
                    "minimumMerchantDiscountRateFee": {
                      "unitPrice": {
                        "amount": 699,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "paperStatementFee": {
                      "unitPrice": {
                        "amount": 795,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "pciSecurityFee": {
                      "unitPrice": {
                        "amount": 895,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "totalAdminFee": {
                      "unitPrice": {
                        "amount": 200,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "agedCloseBatchFee": {
                      "unitPrice": {
                        "amount": 250,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "mastercardComplianceFee": {
                      "unitPrice": {
                        "amount": 8000,
                        "currency": "CAD"
                      },
                      "taxes": []
                    },
                    "dialCommunicationFee": {
                      "unitPrice": {
                        "amount": 8,
                        "currency": "CAD"
                      },
                      "taxes": []
                    }
                  },
                  "promotionInformation": {
                    "promotionCode": "1MONTHOFF",
                    "promotionName": "1MONTHOFF",
                    "promotionExpirationDate": "2024-06-27T00:00:00-05:00"
                  },
                  "supplies": [
                    {
                      "supplyName": "2-PLY Sales Draft Slips (25)",
                      "unitPrice": {
                        "amount": 2,
                        "currency": "CAD"
                      },
                      "quantity": 1
                    },
                    {
                      "supplyName": "Physical Distancing Arrow Decal",
                      "unitPrice": {
                        "amount": 6,
                        "currency": "CAD"
                      },
                      "quantity": 3
                    }
                  ],
                  "productDetails": {
                    "wireless": {
                      "feeDetails": {
                        "goSoftwareFee": {
                          "feeType": "GoSoftwareFee",
                          "unitPrice": {
                            "amount": 5,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        }
                      }
                    },
                    "monerisGateway": {
                      "feeDetails": {
                        "monthlyFee": {
                          "feeType": "MonthlyFee",
                          "unitPrice": {
                            "amount": 0,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        },
                        "visa3dSecureAuthenticationTransactionFee": {
                          "feeType": "Visa3DSecureAuthTxn",
                          "unitPrice": {
                            "amount": 25,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        },
                        "mastercard3dSecureAuthenticationTransactionFee": {
                          "feeType": "Mastercard3DSecureAuthTxn",
                          "unitPrice": {
                            "amount": 11,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        },
                        "visa3dSecureAuthenticationMerchantDiscountRateFee": {
                          "feeType": "Visa3DSecureAuthMdr",
                          "unitPrice": {
                            "amount": 13,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        },
                        "mastercard3dSecureAuthenticationMerchantDiscountRateFee": {
                          "feeType": "Mastercard3DSecureAuthMdr",
                          "unitPrice": {
                            "amount": 10,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        }
                      }
                    },
                    "monerisGoPointOfSaleRetail": {
                      "feeDetails": {
                        "goRetailFee": {
                          "feeType": "GoRetailFee",
                          "unitPrice": {
                            "amount": 10,
                            "currency": "CAD"
                          },
                          "waivePeriod": null
                        }
                      }
                    }
                  },
                  "bankerInformation": {
                    "bankerPhoneNumber": "+19024333434",
                    "bankerBranchIdentifier": "2679"
                  },
                  "cardPlanDetails": {
                    "selectedPlans": [
                      "VISA",
                      "MASTERCARD"
                    ],
                    "mastercard": {
                      "transactionPlans": [
                        {
                          "merchantDiscountRate": 0.111,
                          "transactionRate": 0.131
                        },
                        {
                          "merchantDiscountRate": 0.111,
                          "transactionRate": 0.131
                        }
                      ],
                      "cardBrandPlans": [],
                      "assessmentPlans": [],
                      "serviceFeeDetails": {
                        "maintenanceFee": {
                          "feeType": "maintenance",
                          "unitPrice": {
                            "amount": 301,
                            "currency": "CAD"
                          }
                        }
                      }
                    },
                    "mastercardDebit": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "visa": {
                      "transactionPlans": [
                        {
                          "merchantDiscountRate": 0,
                          "transactionRate": 0
                        }
                      ],
                      "cardBrandPlans": [],
                      "assessmentPlans": [],
                      "serviceFeeDetails": {
                        "maintenanceFee": {
                          "feeType": "maintenance",
                          "unitPrice": {
                            "amount": 301,
                            "currency": "CAD"
                          }
                        }
                      }
                    },
                    "visaDebit": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "discover": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "unionPay": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "amex": {
                      "cardBrandPlans": [],
                      "assessmentPlans": []
                    },
                    "otherFinancialInstitutionCards": [],
                    "programs": []
                  },
                  "pointOfSaleSolutionType": "MONERIS_POINT_OF_SALE",
                  "isAcceptedByConduct": false,
                  "contractSignatureRequired": false,
                  "faxRequired": true,
                  "additionalInformation": "",
                  "businessEntityName": "Intuit",
                  "referralInformation": {
                    "description": "Other",
                    "additionalInformation": "NOT USED"
                  },
                  "hostType": "ESSENTIS",
                  "autoApprovalStatus": "MANUAL_ADJUDICATION",
                  "adjudicationApprovalStatus": "MANUAL",
                  "hasImprinter": true,
                  "isMarketSubSegmentationPreApprovalRequired": false,
                  "optOutAmexCommunication": true,
                  "multiCurrencyPricingPackageId": 1234
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "404": {
            "$ref": "#/components/responses/notFound"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    },
    "/onboarding/product-recommendations": {
      "parameters": [
        {
          "$ref": "#/components/parameters/apiVersion"
        },
        {
          "$ref": "#/components/parameters/correlationId"
        },
        {
          "$ref": "#/components/parameters/acceptLanguage"
        }
      ],
      "post": {
        "summary": "List Recommended Products",
        "operationId": "getRecommenderProducts",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/productRecommendationRequest"
              }
            }
          }
        },
        "tags": [
          "Produits"
        ],
        "description": "Get recommender products to fetch multiple items related to a client\n",
        "security": [
          {
            "OAuth2": [
              "onboarding.order.read"
            ]
          },
          {
            "OAuth2": [
              "onboarding.order.write"
            ]
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response corresponding to the provided payload",
            "headers": {
              "Api-Version": {
                "$ref": "#/components/headers/apiVersion"
              },
              "X-Correlation-Id": {
                "$ref": "#/components/headers/correlationId"
              },
              "Sunset": {
                "$ref": "#/components/headers/sunset"
              },
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/rateLimitCount"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/rateLimitRemaining"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productRecommendation"
                },
                "example": {
                  "allowToSell": true,
                  "solutions": [
                    {
                      "solutionIdentifier": 1,
                      "solutionName": "Moneris<sup>&#0174;</sup> Go",
                      "solutionDescription": "A Moneris Go terminal is ideal for merchants who want flexible functionality inside a sleek white touchscreen device.",
                      "solutionImageUrl": "https://ordernow.moneris.com/landing/moneris_go/PAX_3QU.webp",
                      "solutionPrices": [
                        {
                          "pricingLabel": "Credit Card Processing Fee",
                          "pricingText": "2.65% + $0.10"
                        },
                        {
                          "pricingLabel": "Keyed-in transactions",
                          "pricingText": "2.85% + $0.30"
                        },
                        {
                          "pricingLabel": "Interac Debit processing fee",
                          "pricingText": "$0.10"
                        },
                        {
                          "pricingLabel": "Monthly fee per terminal",
                          "pricingText": "$9.99/month"
                        }
                      ],
                      "solutionFeatures": [
                        {
                          "description": "Wireless connectivity"
                        },
                        {
                          "description": "Credit & debit payments"
                        },
                        {
                          "description": "Smart terminal"
                        },
                        {
                          "description": "Stylish and sleek design"
                        }
                      ],
                      "additionalSolutionDetailsUrl": "https://ordernow.moneris.com/landing/moneris-go",
                      "maximumQuantity": 1,
                      "carrierOptions": [
                        "Rogers",
                        "Telus"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/badRequest"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/forbidden"
          },
          "422": {
            "$ref": "#/components/responses/unprocessableContent"
          },
          "429": {
            "$ref": "#/components/responses/tooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/internalServer"
          },
          "503": {
            "$ref": "#/components/responses/serviceUnavailable"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Api-Key",
        "description": "Une clé API est un jeton fourni par un client lors de ses appels API.\n\nLes clés API sont censées être un secret que seuls le client et le serveur connaissent.\n"
      },
      "OAuth2": {
        "type": "oauth2",
        "description": "OAuth 2.0 est un protocole d'autorisation qui donne à un client API un accès limité aux données utilisateur sur un serveur Web.\n\nOAuth s'appuie sur des scénarios d'authentification qui permettent au propriétaire de la ressource (utilisateur) de partager le contenu protégé du serveur hébergeant la ressource, sans partager ses informations d'identification. À cette fin, un serveur OAuth 2.0 émet des jetons d'accès que les applications clientes peuvent utiliser pour accéder aux ressources protégées au nom du propriétaire de la ressource.\n\nMoneris recommande l'utilisation d'OAuth 2.0 car il fournit des niveaux d'autorisation précis.\n",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://api.moneris.io/oauth2/token",
            "scopes": {
              "payment.read": "accorde un accès en lecture aux API liées au paiement",
              "payment.write": "accorde un accès en lecture et en écriture aux API liées au paiement",
              "refund.read": "accorde un accès en lecture aux remboursements",
              "refund.write": "accorde un accès en lecture et en écriture aux remboursements",
              "customer.read": "accorde un accès en lecture aux données client",
              "customer.write": "accorde un accès en lecture et en écriture aux données client",
              "kount.read": "accorde un accès en lecture aux demandes Kount",
              "kount.write": "accorde un accès en lecture et en écriture aux demandes Kount",
              "onboarding.merchant.read": "Accorde un accès en lecture aux API liées à l'intégration des commerçants",
              "onboarding.merchant.write": "Accorde un accès en lecture et en écriture aux API liées à l'intégration des commerçants",
              "onboarding.order.read": "Accorde un accès en lecture aux API liées aux commandes d'intégration",
              "onboarding.order.write": "Accorde un accès en lecture et en écriture aux API liées aux commandes d'intégration",
              "field-services.request.read": "Accorde un accès en lecture aux API liées aux services sur site",
              "field-services.request.write": "Accorde un accès en lecture et en écriture aux API liées aux services sur site"
            }
          }
        }
      }
    },
    "schemas": {
      "apiVersion": {
        "description": "Version de l’API du point de terminaison. \n\nDoit être fourni par le biais d’en-têtes.\n",
        "type": "string",
        "example": "2024-09-17"
      },
      "merchantId": {
        "type": "string",
        "description": "Identification de treize caractères fournie aux marchands par Moneris. \n",
        "minLength": 13,
        "maxLength": 13,
        "example": "0123456789101"
      },
      "dateTime": {
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z",
        "description": "Date & Heure"
      },
      "paymentId": {
        "type": "string",
        "description": "Identification unique pour le paiement",
        "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
        "minLength": 30,
        "maxLength": 30,
        "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
      },
      "orderId": {
        "type": "string",
        "description": "Indique l’identifiant de transaction défini par le commerçant ou l’ID de commande. Les identifiants sont uniques pour chaque transaction d’achat, de préautorisation et de remboursement indépendant\n\n**Remarque** : Il n’est pas possible que deux transactions de ce type aient le même ID de commande.\n",
        "minLength": 1,
        "maxLength": 50,
        "example": "1q2w3e4r5t6t78",
        "pattern": "^[a-zA-Z0-9-_]+$",
        "nullable": true
      },
      "invoiceNumber": {
        "type": "string",
        "description": "Envoie une valeur unique pour identifier une transaction qui est consignée par Solutions Moneris.\n",
        "minLength": 1,
        "maxLength": 17,
        "example": "1a2s3d45v6",
        "nullable": true
      },
      "transactionDateTime": {
        "description": "Indique la date et l’heure de la transaction.",
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z"
      },
      "createdAt": {
        "description": "Heure à laquelle l’objet a été créé",
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z"
      },
      "modifiedAt": {
        "nullable": true,
        "description": "Heure à laquelle l’objet a été modifié",
        "type": "string",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z"
      },
      "amount": {
        "type": "integer",
        "format": "int32",
        "minimum": 0,
        "maximum": 999999999,
        "example": 10000,
        "description": "Montant"
      },
      "currency": {
        "type": "string",
        "description": "Fournit le code monétaire à trois lettres selon la norme ISO 4217. \n\nPour obtenir la liste complète des codes de devise, rendez-vous sur : https://en.wikipedia.org/wiki/ISO_4217\n",
        "minLength": 3,
        "maxLength": 4,
        "example": "CAD",
        "format": "iso-4217"
      },
      "subTotalAmount": {
        "type": "object",
        "description": "Sous-montant total de la transaction. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "nullable": true,
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 2000,
          "currency": "CAD"
        }
      },
      "tipAmount": {
        "type": "object",
        "description": "Montant total du pourboire pour la transaction. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059\n",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "nullable": true,
        "example": {
          "amount": 1200,
          "currency": "CAD"
        }
      },
      "amountDetails": {
        "description": "Répartition des détails du montant",
        "type": "object",
        "nullable": true,
        "properties": {
          "subTotalAmount": {
            "$ref": "#/components/schemas/subTotalAmount"
          },
          "tipAmount": {
            "$ref": "#/components/schemas/tipAmount"
          }
        }
      },
      "paymentMethodId": {
        "type": "string",
        "description": "Identifiant unique du mode de paiement.",
        "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
        "minLength": 30,
        "maxLength": 30,
        "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
      },
      "cardholderName": {
        "type": "string",
        "description": "Nom du titulaire de la carte",
        "minLength": 1,
        "maxLength": 60,
        "example": "John Doe"
      },
      "companyName": {
        "type": "string",
        "description": "Identifie le nom de l'entreprise associé",
        "minLength": 1,
        "maxLength": 50,
        "example": "SP Ltd",
        "nullable": true
      },
      "cardholderInformation": {
        "type": "object",
        "description": "Informations sur le titulaire de la carte.",
        "nullable": true,
        "properties": {
          "cardholderName": {
            "$ref": "#/components/schemas/cardholderName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          }
        },
        "required": [
          "cardholderName"
        ]
      },
      "contactDetails": {
        "type": "object",
        "description": "Coordonnées",
        "nullable": true,
        "properties": {
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Numéro de téléphone.",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "minLength": 3,
            "maxLength": 16,
            "example": "+18663197450"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "email",
            "description": "Contient l’adresse e-mail du client.\n\nPour connaître les protocoles de courrier électronique standard, consultez : https://www.rfc-editor.org/rfc/rfc5322\n",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com"
          }
        },
        "example": {
          "phoneNumber": "+18663197450",
          "email": "moneris@moneris.com"
        }
      },
      "expiryMonth": {
        "type": "integer",
        "format": "int32",
        "description": "Mois d’expiration de la carte. Le format doit être MM",
        "minimum": 1,
        "maximum": 12,
        "example": 1
      },
      "expiryYear": {
        "type": "integer",
        "format": "int32",
        "description": "Affiche l’année d’expiration de la carte. Format accepté : AAAA",
        "minimum": 2022,
        "maximum": 9999,
        "example": 2023
      },
      "cardBrand": {
        "type": "string",
        "description": "Affiche le nom de la marque de la carte associé au type de carte.",
        "enum": [
          "MASTERCARD",
          "VISA",
          "AMERICAN_EXPRESS",
          "JCB",
          "DISCOVER",
          "INTERAC",
          "UNIONPAY",
          "GIFT_MONERIS",
          "GIFT_DATACANDY",
          "GIFT_GIVEX",
          null
        ],
        "nullable": true,
        "example": "MASTERCARD"
      },
      "cardFingerprint": {
        "type": "string",
        "description": "Identifiant unique de la carte. \n\nL’empreinte digitale attribue de manière aléatoire des identificateurs pour les cartes qui partagent le même numéro de compte principal (PAN) afin d’identifier facilement lorsque plusieurs méthodes de paiement sont associées à la même carte sous-jacente, et aide les commerçants à identifier les clients individuels sur divers canaux. c.-à-d.  programmes de fidélité.\n",
        "maxLength": 255,
        "example": "1Q2W3E4r5t6rfwewerwewrrw",
        "nullable": true
      },
      "issuer": {
        "type": "string",
        "description": "L’émetteur de la carte.",
        "minLength": 1,
        "maxLength": 100,
        "example": "RBC",
        "nullable": true
      },
      "cardInformation": {
        "type": "object",
        "description": "Informations sur la carte utilisée pour la transaction",
        "properties": {
          "bankIdentificationNumber": {
            "nullable": true,
            "type": "string",
            "description": "**BIN** : Numéro d’Identification de la Banque \n\nIl s’agit des six à huit premiers chiffres du numéro de compte principal (PAN) et identifie le réseau de paiement concerné et l’établissement émetteur de paiement spécifique.\n",
            "minLength": 6,
            "maxLength": 8,
            "example": "123456"
          },
          "lastFour": {
            "nullable": true,
            "type": "string",
            "description": "Les 4 derniers chiffres de la carte.",
            "minLength": 4,
            "maxLength": 4,
            "example": "1234"
          },
          "expiryMonth": {
            "$ref": "#/components/schemas/expiryMonth"
          },
          "expiryYear": {
            "$ref": "#/components/schemas/expiryYear"
          },
          "cardBrand": {
            "$ref": "#/components/schemas/cardBrand"
          },
          "cardType": {
            "nullable": true,
            "type": "string",
            "description": "Spécifie l’utilisation prévue de la carte. c’est-à-dire débit ou crédit.",
            "enum": [
              "CREDIT",
              "DEBIT",
              "DOMESTIC_DEBIT",
              "PREPAID_RELOADABLE",
              "PREPAID_NON_RELOADABLE",
              "UNKNOWN",
              "GIFT",
              "LOYALTY",
              "FLEET",
              "CORPORATE"
            ],
            "example": "CREDIT"
          },
          "cardFingerprint": {
            "$ref": "#/components/schemas/cardFingerprint"
          },
          "issuer": {
            "$ref": "#/components/schemas/issuer"
          }
        }
      },
      "paymentAccountReference": {
        "type": "string",
        "nullable": true,
        "description": "Utilisé pour lier des transactions basées sur un numéro de compte principal (PAN) et des transactions sur des jetons de paiement associés sans utiliser le PAN comme mécanisme de liaison.\n",
        "minLength": 1,
        "maxLength": 29,
        "example": "11112222333344445555666677778"
      },
      "storePaymentMethod": {
        "description": "Stockez ce mode de paiement créé par le biais de ce paiement pour une utilisation ultérieure. \n- DO_NOT_STORE : Le mode de paiement ne sera pas enregistré.\n- CARDHOLDER_INITIATED : Mode de paiement à enregistrer et ne peut être réutilisé qu’avec le consentement du titulaire de la carte. Limité au magasin, à la pré-autorisation et aux validations de carte.\n- MERCHANT_INITIATED : Mode de paiement à enregistrer et réutilisable sans le consentement du titulaire de la carte. Par exemple, les abonnements.\n",
        "type": "string",
        "default": "DO_NOT_STORE",
        "enum": [
          "DO_NOT_STORE",
          "CARDHOLDER_INITIATED",
          "MERCHANT_INITIATED"
        ]
      },
      "cardPaymentMethodInformation": {
        "title": "Card Payment Method Information",
        "description": "Détails sur la carte utilisée dans le mode de paiement.",
        "type": "object",
        "properties": {
          "paymentMethodType": {
            "type": "string",
            "description": "Le type de Mode de paiement utilisé. Il peut s’agir de :\n  -Carte.\n",
            "enum": [
              "CARD"
            ]
          },
          "paymentMethodSource": {
            "type": "string",
            "description": "La source du Mode de paiement utilisé. Il peut s’agir de :\n  - L’Id d’un Mode de paiement déjà créé.\n  - Jeton permanent.\n  - Jeton temporaire.\n  -Carte.\n  - Portefeuille électronique.\n",
            "enum": [
              "CARD",
              "TEMPORARY_TOKEN",
              "PERMANENT_TOKEN",
              "APPLE_PAY_ENCRYPTED",
              "APPLE_PAY_DECRYPTED",
              "GOOGLE_PAY_ENCRYPTED",
              "GOOGLE_PAY_DECRYPTED"
            ],
            "example": "TEMPORARY_TOKEN"
          },
          "cardInformation": {
            "$ref": "#/components/schemas/cardInformation"
          },
          "paymentAccountReference": {
            "$ref": "#/components/schemas/paymentAccountReference"
          },
          "storePaymentMethod": {
            "$ref": "#/components/schemas/storePaymentMethod"
          }
        },
        "required": [
          "paymentMethodType",
          "paymentMethodSource",
          "cardInformation",
          "storePaymentMethod"
        ]
      },
      "customData": {
        "description": "Le marchand peut envoyer des métadonnées personnalisées avec la transaction dans cet objet. Moneris fera écho à ces valeurs en réponse.",
        "type": "object",
        "additionalProperties": {
          "type": "string",
          "minLength": 1,
          "maxLength": 50
        },
        "maxProperties": 10,
        "nullable": true
      },
      "paymentMethod": {
        "title": "paymentMethod",
        "description": "Objet de réponse du moyen de paiement",
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "$ref": "#/components/schemas/paymentMethodId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "cardholderInformation": {
            "$ref": "#/components/schemas/cardholderInformation"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/contactDetails"
          },
          "billingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "paymentMethodInformation": {
            "$ref": "#/components/schemas/cardPaymentMethodInformation"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "paymentMethodId",
          "merchantId",
          "paymentMethodInformation",
          "createdAt"
        ]
      },
      "paymentStatus": {
        "type": "string",
        "description": "Description de l’état du paiement.",
        "enum": [
          "CANCELED",
          "DECLINED",
          "DECLINED_RETRY",
          "AUTHORIZED",
          "PROCESSING",
          "SUCCEEDED"
        ],
        "example": "SUCCEEDED"
      },
      "iso": {
        "type": "string",
        "description": "Représente le code de réponse de Moneris pour le code de réponse équivalent de l’Organisation internationale de normalisation (ISO).",
        "minLength": 2,
        "maxLength": 2,
        "example": "00"
      },
      "responseCode": {
        "type": "string",
        "description": "\"Détails Codes de réponse des transactions :\n- **< 50** : Transaction approuvée - **> 50** : Transaction refusée\nNULL : Transaction non envoyée pour autorisation\nPour une liste complète des définitions, reportez-vous au tableau des codes de réponse.\n",
        "minLength": 3,
        "maxLength": 3,
        "example": "001"
      },
      "authorizationCode": {
        "type": "string",
        "maxLength": 8,
        "nullable": true,
        "pattern": "^[a-zA-Z0-9]*$",
        "description": "Contient une valeur générée par l’autorisateur pour les transactions financières. \nIl s’agit de l’identification de transaction de l’hôte d’autorisation.\n",
        "example": "11223344"
      },
      "message": {
        "type": "string",
        "description": "Affiche la description de la réponse renvoyée par l’établissement émetteur.\n\n**REMARQUE** : Ce message ne doit pas être affiché sur les matériaux destinés au titulaire de la carte.  \n\nPour obtenir des reçus, veuillez vous référer aux Exigences en matière de reçus.\n",
        "minLength": 1,
        "maxLength": 100,
        "example": "SUCCESS",
        "nullable": true
      },
      "ecommerceIndicator": {
        "type": "string",
        "description": "Catégorie de transaction e-commerce renvoyée par l’émetteur.\nLorsqu’elle est renvoyée dans le response, elle peut être différente de la valeur envoyée dans la demande au cas où la transaction aurait été déclassée par l’émetteur.\n",
        "enum": [
          "MAIL_TELEPHONE_ORDER_SINGLE",
          "MAIL_TELEPHONE_ORDER_RECURRING",
          "MAIL_TELEPHONE_ORDER_INSTALMENT",
          "MAIL_TELEPHONE_ORDER_UNKNOWN",
          "AUTHENTICATED_ECOMMERCE",
          "NON_AUTHENTICATED_ECOMMERCE",
          "SSL_MERCHANT"
        ],
        "example": "AUTHENTICATED_ECOMMERCE",
        "default": "SSL_MERCHANT"
      },
      "statusDetails": {
        "type": "object",
        "description": "Détails supplémentaires sur le résultat de la transaction.",
        "properties": {
          "transactionUniqueId": {
            "type": "string",
            "description": "Identifiant de transaction en temps réel de l’hôte.",
            "nullable": true
          },
          "isoResponseCode": {
            "$ref": "#/components/schemas/iso"
          },
          "responseCode": {
            "$ref": "#/components/schemas/responseCode"
          },
          "authorizationCode": {
            "$ref": "#/components/schemas/authorizationCode"
          },
          "message": {
            "$ref": "#/components/schemas/message"
          },
          "ecommerceIndicator": {
            "$ref": "#/components/schemas/ecommerceIndicator"
          }
        },
        "required": [
          "isoResponseCode",
          "responseCode",
          "ecommerceIndicator"
        ]
      },
      "addressVerificationServiceResultCode": {
        "title": "AVS Result Description",
        "type": "string",
        "nullable": true,
        "description": "Indique le résultat de la vérification de l’adresse. \n",
        "enum": [
          "FULL_MATCH",
          "PARTIAL_MATCH",
          "NO_MATCH",
          "UNAVAILABLE",
          null
        ],
        "example": "FULL_MATCH"
      },
      "cardSecurityCodeResult": {
        "type": "string",
        "nullable": true,
        "description": "Indique le résultat de la validation du code de sécurité de la carte.\n-**MATCH**\n- **NO_MATCH**\n- **NOT_PROCESSED**\n- **CVD_NOT_PRESENT**\n- **NOT_CVD_PRESENT**\n- **AMEX_JCB_MATCH**\n- **AMEX_JCB_INVALID**\n- **OTHER**\"\n",
        "enum": [
          "MATCH",
          "NO_MATCH",
          "NOT_PROCESSED",
          "CVD_NOT_PRESENT",
          "NOT_CVD_PARTICIPANT",
          "AMEX_JCB_MATCH",
          "AMEX_JCB_INVALID",
          "OTHER",
          null
        ],
        "example": "MATCH"
      },
      "threeDSecureAuthenticationValueResult": {
        "type": "string",
        "nullable": true,
        "description": "La valeur de vérification de l'authentification du titulaire de la carte (CAVV), la valeur d'authentification du titulaire du compte (AAV) et la valeur de vérification American Express (AEVV) sont les valeurs qui permettent à Visa, Mastercard et American Express de valider l'intégrité des données de transaction Visa Secure, Mastercard Identity Check et American Express SafeKey. Ces valeurs sont renvoyées par l'émetteur au commerçant une fois l'authentification effectuée. Le commerçant intègre ensuite la valeur CAVV/AAV/AEVV dans la demande d'autorisation à l'aide de la demande de paiement avec les données de transaction 3-D Secure.\n",
        "enum": [
          "AMEX_AEVV_FAILED_ATTEMPT_ISSUER_KEY",
          "AMEX_AEVV_FAILED_ATTEMPT_ISSUER_NOT_PARTICIPATING_NETWORK_KEY",
          "AMEX_AEVV_FAILED_ATTEMPT_PARTICIPATING_NOT_AVAILABLE_NETWORK_KEY",
          "AMEX_AEVV_FAILED_AUTHENTICATION_ISSUER_KEY",
          "AMEX_AEVV_PASSED_ATTEMPT_ISSUER_KEY",
          "AMEX_AEVV_PASSED_ATTEMPT_ISSUER_NOT_PARTICIPATING_NETWORK_KEY",
          "AMEX_AEVV_PASSED_ATTEMPT_PARTICIPATING_NOT_AVAILABLE_NETWORK_KEY",
          "AMEX_AEVV_PASSED_AUTHENTICATION_ISSUER_KEY",
          "AMEX_AEVV_UNCHECKED",
          "VISA_CAVV_NOT_PRESENT_OR_NOT_VERIFIED",
          "MASTERCARD_AUTHENTICATION_ATTEMPTED",
          "MASTERCARD_AUTHENTICATION_FAILED",
          "MASTERCARD_AUTHENTICATION_SUCCESSFUL",
          "VISA_CAVV_AUTHENTICATION_RESULTS_INVALID",
          "VISA_CAVV_FAILED_VALIDATION_ATTEMPTED",
          "VISA_CAVV_FAILED_VALIDATION_AUTHENTICATION",
          "VISA_CAVV_NOT_VALIDATED_ISSUER_NOT_PARTICIPATING",
          "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED",
          "VISA_CAVV_PASSED_VALIDATION_AUTHENTICATION",
          "VISA_CAVV_PASSED_VALIDATION_INFO_ONLY",
          "VISA_CAVV_WAS_NOT_VALIDATED_ATTEMPTED",
          "VISA_CAVV_WAS_NOT_VALIDATED_AUTHENTICATION",
          null
        ],
        "example": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
      },
      "verificationDetails": {
        "description": "Codes de résultat pour CVD, AVS, 3DS",
        "type": "object",
        "properties": {
          "addressVerificationServiceResultCode": {
            "$ref": "#/components/schemas/addressVerificationServiceResultCode"
          },
          "cardSecurityCodeResultCode": {
            "$ref": "#/components/schemas/cardSecurityCodeResult"
          },
          "threeDSecureAuthenticationValueResultCode": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationValueResult"
          }
        }
      },
      "originalAmount": {
        "type": "object",
        "nullable": true,
        "description": "Montant initial de la première transaction de la série. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059\n",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 15000,
          "currency": "CAD"
        }
      },
      "issuerId": {
        "type": "string",
        "description": "Affiche un identifiant unique pour les informations d’identification stockées du titulaire de la carte. \n\nCes informations sont renvoyées par la marque de la carte lors du traitement d’une transaction d’identification enregistrée.\n",
        "minLength": 1,
        "maxLength": 15,
        "example": "A",
        "nullable": true
      },
      "credentialOnFileResponse": {
        "type": "object",
        "nullable": true,
        "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
        "properties": {
          "originalAmount": {
            "$ref": "#/components/schemas/originalAmount"
          },
          "issuerId": {
            "$ref": "#/components/schemas/issuerId"
          }
        }
      },
      "refundId": {
        "type": "string",
        "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
        "minLength": 30,
        "maxLength": 30,
        "description": "Identification unique du remboursement",
        "example": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV"
      },
      "refundUri": {
        "title": "Refund URI",
        "description": "URL de référence du remboursement.",
        "type": "string",
        "nullable": true,
        "format": "uri-reference",
        "example": "/refunds/ri0105ARZ3NDEKTSV4RRFFQ69G5FAV"
      },
      "refundReference": {
        "description": "Référence du remboursement.",
        "type": "object",
        "nullable": true,
        "properties": {
          "refundId": {
            "$ref": "#/components/schemas/refundId"
          },
          "href": {
            "$ref": "#/components/schemas/refundUri"
          }
        },
        "required": [
          "refundId"
        ]
      },
      "money": {
        "type": "object",
        "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 16000,
          "currency": "CAD"
        }
      },
      "refundDetails": {
        "description": "Les détails du remboursement, le cas échéant.",
        "type": "object",
        "nullable": true,
        "properties": {
          "refunds": {
            "description": "Liste des remboursements associés à ce paiement",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/refundReference"
            }
          },
          "refundedAmount": {
            "$ref": "#/components/schemas/money"
          }
        },
        "required": [
          "refundedAmount"
        ]
      },
      "subscriptionId": {
        "type": "string",
        "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
        "minLength": 30,
        "maxLength": 30,
        "description": "Identification unique de l'abonnement",
        "example": "si0105ARZ3NDEKTSV4RRFFQ69G5FAV"
      },
      "subscriptionReference": {
        "description": "Référence de l'abonnement, si cette transaction est liée à un abonnement.",
        "type": "object",
        "nullable": true,
        "properties": {
          "subscriptionId": {
            "$ref": "#/components/schemas/subscriptionId"
          },
          "href": {
            "nullable": true,
            "title": "SubscriptionUri",
            "description": "URL de référence de l'abonnement.",
            "type": "string",
            "format": "uri-reference",
            "example": "/subscriptions/rp0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          }
        },
        "required": [
          "subscriptionId"
        ]
      },
      "installmentId": {
        "type": "string",
        "description": "Identifiant généré par Visa pour un plan d'installment.",
        "minLength": 36,
        "maxLength": 36,
        "example": "130d93f9-8a5d-a78c-4741-14905057ce01"
      },
      "installmentIdReference": {
        "type": "string",
        "description": "Un nom convivial lisible par l'homme, unique, alphanumérique et court généré par Visa pour le plan d'installment.",
        "minLength": 10,
        "maxLength": 10,
        "example": "0000000063"
      },
      "installmentTermsAndConditionsVersion": {
        "type": "string",
        "description": "Version des conditions générales du plan de versement. Version des conditions générales acceptées par le consommateur. La version est incrémentée automatiquement chaque fois qu'une mise à jour est apportée au plan par l'émetteur.",
        "minLength": 1,
        "maxLength": 2147483647,
        "example": "1"
      },
      "installmentAcceptanceId": {
        "type": "string",
        "description": "Identifiant généré par Visa pour une acceptation de plan.",
        "minimum": 36,
        "maximum": 36,
        "example": "56d58423-ea25-64e0-ddf3-1e1133549801"
      },
      "installmentStatus": {
        "type": "string",
        "description": "Statut du plan de versement.",
        "enum": [
          "ACCEPTED",
          "NEW",
          "CANCELED"
        ],
        "example": "ACCEPTED"
      },
      "installmentPlanDetails": {
        "type": "object",
        "description": "Résultats de la demande de plan d'installment.",
        "nullable": true,
        "properties": {
          "planId": {
            "$ref": "#/components/schemas/installmentId"
          },
          "planIdReference": {
            "$ref": "#/components/schemas/installmentIdReference"
          },
          "planTermsAndConditionsVersion": {
            "$ref": "#/components/schemas/installmentTermsAndConditionsVersion"
          },
          "planAcceptanceId": {
            "$ref": "#/components/schemas/installmentAcceptanceId"
          },
          "planStatus": {
            "$ref": "#/components/schemas/installmentStatus"
          },
          "planProcessingResponseMessage": {
            "nullable": true,
            "type": "string",
            "description": "Réponse de traitement du plan de versement",
            "minLength": 2,
            "maxLength": 50
          }
        },
        "required": [
          "planId",
          "planIdReference",
          "planTermsAndConditionsVersion",
          "planAcceptanceId",
          "planStatus"
        ]
      },
      "payment": {
        "title": "payment",
        "type": "object",
        "description": "Retourne un paiement traité",
        "properties": {
          "paymentId": {
            "$ref": "#/components/schemas/paymentId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "transactionDateTime": {
            "$ref": "#/components/schemas/transactionDateTime"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "amount": {
            "description": "Ce montant ne comprend pas les frais supplémentaires, les frais de demande et les frais de commodité.",
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "authorizedAmount": {
            "description": "Il s’agit des fonds détenus par l’autorisation sur le mode de paiement.",
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "capturableAmount": {
            "description": "Montant restant qui peut encore être capturé.",
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "amountDetails": {
            "$ref": "#/components/schemas/amountDetails"
          },
          "customerId": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client",
            "example": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30
          },
          "customerReference": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client. Il peut s'agir d'un identifiant généré à partir d'un identifiant défini par le marchand.",
            "example": "911677-212",
            "minLength": 1,
            "maxLength": 50
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethod"
          },
          "paymentStatus": {
            "$ref": "#/components/schemas/paymentStatus"
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/statusDetails"
          },
          "verificationDetails": {
            "$ref": "#/components/schemas/verificationDetails"
          },
          "credentialOnFileResponse": {
            "$ref": "#/components/schemas/credentialOnFileResponse"
          },
          "refundDetails": {
            "$ref": "#/components/schemas/refundDetails"
          },
          "subscription": {
            "$ref": "#/components/schemas/subscriptionReference"
          },
          "installmentPlanDetails": {
            "$ref": "#/components/schemas/installmentPlanDetails"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "paymentId",
          "merchantId",
          "transactionDateTime",
          "createdAt",
          "amount",
          "authorizedAmount",
          "capturableAmount",
          "paymentMethod",
          "paymentStatus",
          "transactionDetails",
          "verificationDetails"
        ]
      },
      "self": {
        "description": "Lien de pagination pointant vers la page actuelle.",
        "type": "string",
        "format": "uri-reference",
        "nullable": true
      },
      "first": {
        "description": "Lien de pagination pointant vers la première page.",
        "type": "string",
        "format": "uri-reference",
        "nullable": true
      },
      "last": {
        "description": "Lien de pagination pointant vers la dernière page.",
        "type": "string",
        "format": "uri-reference",
        "nullable": true
      },
      "next": {
        "description": "Lien de pagination pointant vers la page suivante.",
        "type": "string",
        "format": "uri-reference",
        "nullable": true
      },
      "previous": {
        "description": "Lien de pagination pointant vers la page précédente.",
        "type": "string",
        "format": "uri-reference",
        "nullable": true
      },
      "paymentList": {
        "title": "paymentList",
        "type": "object",
        "description": "corps de la réponse, renvoie une liste paginée des paiements",
        "properties": {
          "data": {
            "description": "Liste des paiements.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/payment"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        },
        "required": [
          "data"
        ]
      },
      "parameterError": {
        "title": "Parameter error",
        "description": "Erreur liée à la propriété ou à l’en-tête de la demande.",
        "type": "object",
        "properties": {
          "parameterName": {
            "type": "string",
            "description": "Nom de la propriété ou de l’en-tête. Peut contenir des chemins imbriqués séparés par '.'",
            "example": "address.postalCode"
          },
          "parameterValue": {
            "type": "string",
            "nullable": true,
            "description": "Représentation de chaîne de valeur de propriété ou d’en-tête.",
            "example": "MAP3J8"
          },
          "reasonCode": {
            "type": "string",
            "description": "Raison qui a déclenché l’erreur.",
            "enum": [
              "INVALID_FORMAT",
              "REQUIRED_FIELD",
              "INVALID_VALUE"
            ],
            "example": "INVALID_FORMAT"
          },
          "errorMessage": {
            "type": "string",
            "description": "Description lisible de l'erreur.",
            "nullable": true,
            "example": "String 'MAP3J8' does not match the postal code pattern."
          }
        },
        "required": [
          "parameterName",
          "reasonCode"
        ]
      },
      "error": {
        "description": "Détails de la réponse d’erreur.",
        "properties": {
          "type": {
            "description": "Référence d’URI qui identifie le type de problème.  Idéalement, il devrait s’agir d’une URL stable pour la documentation des détails sur ce type d’erreur, mais il peut également s’agir d’un URN.  Si rien ne peut être fourni, une valeur « about :blank » est renvoyée.\n",
            "type": "string",
            "format": "uri",
            "example": "https://api-developer.moneris.com/responsehandling"
          },
          "title": {
            "description": "Un résumé court et lisible par l’homme du type de problème.   Il NE DEVRAIT PAS changer d’une occurrence à l’autre du problème, sauf à des fins de localisation\n",
            "type": "string",
            "example": "INSUFFICIENT_FUNDS",
            "nullable": true
          },
          "status": {
            "description": "il transmet le code d’état HTTP utilisé pour la commodité du consommateur.\n",
            "type": "integer",
            "format": "int32",
            "minimum": 100,
            "maximum": 505,
            "nullable": true
          },
          "detail": {
            "description": "Un message lisible par l’homme fournissant plus de détails sur l’erreur. Pour les erreurs de carte, ces messages peuvent être affichés à vos utilisateurs.\n",
            "type": "string",
            "example": "Funds are insufficient to execute the operation.",
            "nullable": true
          },
          "instance": {
            "description": "Référence d’URI qui identifie l’occurrence spécifique du problème. En règle générale, cela se résout en une ressource qui peut inclure plus de détails sur le problème.\n",
            "type": "string",
            "example": "/payments/12f3e0a8-1d68-2b86-dd30-4ca51bb66e10",
            "format": "uri-reference",
            "nullable": true
          },
          "category": {
            "description": "Type d’erreur renvoyé. \n - `API_ERROR` : cela se produit en raison d’un problème intermittent.  \n - `IDEMPOTENCY_ERROR` : la clé d’idempotence a déjà été utilisée.\n - `INVALID_REQUEST_ERROR` : les données fournies dans la demande ne sont pas valides.\n - `DECLINED_ERROR` : la transaction a été refusée par l’émetteur.\n - `UNAUTHORIZED_ERROR` : l’appelant n’est pas authentifié ou n’est pas autorisé à exécuter l’opération en cours.\n - `INTERNAL_SERVER_ERROR` : Un problème interne avec nos serveurs s’est produit.\n",
            "enum": [
              "API_ERROR",
              "IDEMPOTENCY_ERROR",
              "INVALID_REQUEST_ERROR",
              "DECLINED_ERROR",
              "UNAUTHORIZED_ERROR",
              "INTERNAL_SERVER_ERROR",
              null
            ],
            "type": "string",
            "nullable": true,
            "example": "DECLINED_ERROR"
          },
          "errors": {
            "type": "array",
            "description": "Liste des erreurs de validation lorsque la catégorie d’erreur est INVALID_REQUEST_ERROR.",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/parameterError"
            },
            "example": [
              {
                "parameterName": "address.postalCode",
                "parameterValue": "MAP3J8",
                "errorMessage": "address.Postal code does not match regular expression",
                "reasonCode": "INVALID_FORMAT"
              }
            ]
          }
        },
        "title": "API Error",
        "type": "object",
        "required": [
          "type"
        ]
      },
      "idempotencyKey": {
        "type": "string",
        "description": "Identificateur unique requis pour le traitement des demandes idempotentes. \n\nRemarque : Moneris encourage l’utilisation de la version 4 de l’UUID dans les API comme clé d’idempotence.    \n",
        "minLength": 1,
        "maxLength": 36,
        "example": "6q5w4e7r8t9y"
      },
      "paymentMethodRequestSource": {
        "type": "string",
        "description": "La source du Mode de paiement utilisé. Il peut s’agir de :\n  - L’Id d’un Mode de paiement déjà créé.\n  - Jeton permanent.\n  - Jeton temporaire.\n  -Carte.\n  - Portefeuille électronique.\n",
        "enum": [
          "PAYMENT_METHOD_ID",
          "CARD",
          "TEMPORARY_TOKEN",
          "PERMANENT_TOKEN",
          "APPLE_PAY_ENCRYPTED",
          "APPLE_PAY_DECRYPTED",
          "GOOGLE_PAY_ENCRYPTED",
          "GOOGLE_PAY_DECRYPTED"
        ]
      },
      "paymentMethodWithId": {
        "title": "paymentMethodWithId",
        "description": "Utilisez l’identifiant unique du mode de paiement existant.",
        "properties": {
          "paymentMethodSource": {
            "$ref": "#/components/schemas/paymentMethodRequestSource"
          },
          "paymentMethodId": {
            "$ref": "#/components/schemas/paymentMethodId"
          }
        },
        "required": [
          "paymentMethodSource",
          "paymentMethodId"
        ]
      },
      "paymentIndicator": {
        "type": "string",
        "description": "Indique l’utilisation actuelle ou prévue des informations d’identification\n- **UNSCHEDULED_CREDENTIAL_ON_FILE** : Justificatif d’identité non programmé au dossier (premières transactions seulement)\n- **RECURRING** : transaction récurrente\n- **MERCHANT_INITIATED** : transaction non programmée initiée par le marchand\n- **VARIABLE_RECURRING** : opération de paiement variable récurrente\n- **CUSTOMER_INITIATED** : transaction initiée par le client non programmée\n",
        "enum": [
          "UNSCHEDULED_CREDENTIAL_ON_FILE",
          "RECURRING",
          "MERCHANT_INITIATED",
          "VARIABLE_RECURRING",
          "CUSTOMER_INITIATED"
        ],
        "example": "UNSCHEDULED_CREDENTIAL_ON_FILE"
      },
      "paymentInformation": {
        "type": "string",
        "description": "Indique s’il s’agit de la première transaction ou d’une transaction ultérieure de la série.",
        "enum": [
          "FIRST",
          "SUBSEQUENT"
        ],
        "example": "FIRST"
      },
      "storePaymentMethodIdRequest": {
        "title": "storePaymentMethodIdRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodWithId"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "cardNumber": {
        "type": "string",
        "description": "Identifie le numéro de carte de crédit ou de débit du client (numéro de compte principal).",
        "minLength": 13,
        "maxLength": 19,
        "example": "4242424242424242"
      },
      "cardSecurityCode": {
        "type": "string",
        "pattern": "[0-9]*",
        "description": "Situé sur la carte de crédit et fourni par le titulaire de la carte lors de l’authentification. \nCes informations ne doivent être transmises qu’à la passerelle de paiement et ne doivent jamais être stockées pour une utilisation ultérieure ou affichées dans le cadre des informations de réception.\n",
        "minLength": 3,
        "maxLength": 4,
        "example": "123"
      },
      "card": {
        "type": "object",
        "description": "Détails de la carte",
        "properties": {
          "cardNumber": {
            "$ref": "#/components/schemas/cardNumber"
          },
          "expiryMonth": {
            "$ref": "#/components/schemas/expiryMonth"
          },
          "expiryYear": {
            "$ref": "#/components/schemas/expiryYear"
          },
          "cardSecurityCode": {
            "$ref": "#/components/schemas/cardSecurityCode"
          }
        },
        "required": [
          "cardNumber",
          "expiryMonth",
          "expiryYear",
          "cardSecurityCode"
        ]
      },
      "paymentMethodRequestBase": {
        "description": "Détails du mode de paiement.\n\nRemarque : Si cette option est définie, cela entraînera la création d’un mode de paiement tel que défini dans l’API du mode de paiement.\n",
        "type": "object",
        "properties": {
          "cardholderInformation": {
            "$ref": "#/components/schemas/cardholderInformation"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/contactDetails"
          },
          "billingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "paymentMethodSource": {
            "$ref": "#/components/schemas/paymentMethodRequestSource"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "paymentMethodSource"
        ]
      },
      "paymentMethodCard": {
        "title": "paymentMethodCard",
        "description": "Détails du mode de paiement par carte de crédit/débit/carte-cadeau.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "card": {
                "$ref": "#/components/schemas/card"
              }
            },
            "required": [
              "card"
            ]
          },
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          }
        ],
        "required": [
          "paymentMethodSource",
          "card"
        ]
      },
      "storePaymentMethodCardRequest": {
        "title": "storePaymentMethodCardRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodCard"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "token": {
        "type": "string",
        "description": "Créé lorsqu’un jeton temporaire est créé et renvoyé. Il s’agit d’un identificateur de profil unique et d’une valeur obligatoire pour les transactions de jetons temporaires.",
        "minLength": 25,
        "maxLength": 28,
        "example": "ot-HCUeCFtXJfEZSSUqvUJkS0"
      },
      "paymentMethodTemporaryToken": {
        "title": "paymentMethodTemporaryToken",
        "description": "Un jeton temporaire est émis par Moneris au commerçant et représente les détails de la carte. Veuillez consulter la documentation sur la fonctionnalité de tokenisation hébergée pour savoir comment émettre un tel jeton.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "temporaryToken": {
                "$ref": "#/components/schemas/token"
              }
            },
            "required": [
              "paymentMethodSource",
              "temporaryToken"
            ]
          },
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          }
        ],
        "required": [
          "paymentMethodSource",
          "temporaryToken"
        ]
      },
      "storePaymentMethodTemporaryTokenRequest": {
        "title": "storePaymentMethodTemporaryTokenRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodTemporaryToken"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "paymentMethodPermanentToken": {
        "title": "paymentMethodPermanentToken",
        "description": "Un jeton permanent est émis par Moneris au commerçant et représente les détails de la carte. Cette option est utilisée à des fins héritées.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "permanentToken": {
                "$ref": "#/components/schemas/token"
              }
            },
            "required": [
              "permanentToken"
            ]
          },
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          }
        ],
        "required": [
          "paymentMethodSource",
          "permanentToken"
        ]
      },
      "storePermanentToken": {
        "description": "Stockez ce mode de paiement créé par le biais de ce paiement pour une utilisation ultérieure. \n- CARDHOLDER_INITIATED : Mode de paiement à enregistrer et ne peut être réutilisé qu’avec le consentement du titulaire de la carte. Limité au magasin, à la pré-autorisation et aux validations de carte.\n- MERCHANT_INITIATED : Mode de paiement à enregistrer et réutilisable sans le consentement du titulaire de la carte. Par exemple, les abonnements.\n",
        "type": "string",
        "default": "MERCHANT_INITIATED",
        "enum": [
          "CARDHOLDER_INITIATED",
          "MERCHANT_INITIATED"
        ]
      },
      "credentialOnFileInformation": {
        "type": "object",
        "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
        "properties": {
          "paymentIndicator": {
            "$ref": "#/components/schemas/paymentIndicator"
          },
          "paymentInformation": {
            "$ref": "#/components/schemas/paymentInformation"
          },
          "issuerId": {
            "$ref": "#/components/schemas/issuerId"
          },
          "originalAmount": {
            "$ref": "#/components/schemas/originalAmount"
          }
        },
        "required": [
          "paymentIndicator",
          "paymentInformation"
        ],
        "example": {
          "paymentIndicator": "CUSTOMER_INITIATED",
          "paymentInformation": "FIRST",
          "issuerId": "123asd"
        }
      },
      "storePaymentMethodPermanentTokenRequest": {
        "title": "storePaymentMethodPermanentTokenRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodPermanentToken"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePermanentToken"
              },
              "credentialOnFileInformation": {
                "$ref": "#/components/schemas/credentialOnFileInformation"
              }
            },
            "required": [
              "credentialOnFileInformation"
            ]
          }
        ]
      },
      "walletIndicator": {
        "type": "string",
        "description": "Uniquement disponible pour les intégrations au Canada.\nS’applique aux marchands qui utilisent leur propre API pour le chiffrement des données utiles des transactions Apple Pay et Google Pay.\n**REMARQUE** : Ce champ est obligatoire pour les transactions par portefeuille et est sensible à la casse.\n",
        "enum": [
          "IN_APPLICATION",
          "IN_BROWSER"
        ]
      },
      "applePayEncryptedWallet": {
        "title": "applePayEncryptedWallet",
        "description": "Détails du portefeuille chiffré Apple Pay.",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "displayName": {
                "type": "string",
                "description": "Display Name",
                "example": "MasterCard 4079"
              },
              "cardBrand": {
                "type": "string",
                "description": "Card Brand.",
                "enum": [
                  "MASTERCARD",
                  "VISA",
                  "AMERICAN_EXPRESS",
                  "INTERAC",
                  "DISCOVER"
                ],
                "example": "MASTERCARD"
              },
              "applePayVersion": {
                "type": "string",
                "description": "Version information about the payment token.\n  - EC_V1: For ECC-encrypted data\n  - RSA_V1: For RSA-encrypted data\n",
                "enum": [
                  "EC_V1",
                  "RSA_V1"
                ],
                "example": "EC_V1"
              },
              "data": {
                "type": "string",
                "description": "Encrypted payment data. Base64 encoded as a string.\n",
                "format": "byte",
                "example": "MTIzNDU2Njc4OQ=="
              },
              "signature": {
                "type": "string",
                "description": "Signature of the payment and header data, Base64 encoded as a string. The signature includes the signing certificate, its intermediate CA certificate, and information about the signing algorithm. Can be a detached PKCS #7 signature, Base64 encoded as a string\n"
              },
              "publicKeyHash": {
                "type": "string",
                "description": "Hash of the X.509 encoded public key bytes of the merchant’s certificate. Can be either a base64 encoded or SHA-256 Hash string.\n"
              },
              "ephemeralPublicKey": {
                "type": "string",
                "description": "Ephemeral public key bytes. Only for RSA_v1. Can be either a base64 encoded string or X.509 bytes.\n",
                "format": "byte"
              },
              "applePayTransactionId": {
                "type": "string",
                "description": "The Apple Pay unique identifier for a transaction such as an in-app purchase, restored in-app purchase, or subscription renewal."
              },
              "walletIndicator": {
                "$ref": "#/components/schemas/walletIndicator"
              }
            },
            "required": [
              "displayName",
              "cardBrand",
              "applePayVersion",
              "data",
              "signature",
              "publicKeyHash",
              "ephemeralPublicKey",
              "applePayTransactionId",
              "walletIndicator"
            ]
          }
        ],
        "required": [
          "paymentMethodSource"
        ]
      },
      "storeApplePayEncryptedWalletRequest": {
        "title": "storeApplePayEncryptedWalletRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/applePayEncryptedWallet"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "deviceManufacturerIdentifier": {
        "type": "string",
        "description": "Identificateur du fabricant de l’appareil encodé en hexadécimal",
        "nullable": true
      },
      "dataType": {
        "type": "string",
        "description": "Uniquement disponible pour les intégrations au Canada.\n\nS’applique aux commerçants qui utilisent leur propre API pour le chiffrement des données utiles des transactions, et est obligatoire pour les transactions INTERAC®, e-commerce, Apple Pay et Google Pay.\n",
        "enum": [
          "THREE_D_SECURE",
          "EMV"
        ]
      },
      "walletCryptogram": {
        "type": "string",
        "description": "Cryptogramme à jeton ou Base64 encodé pour les portefeuilles Interac.",
        "maxLength": 500,
        "example": "8YGKgiD0iJic84fBLVj3QuwuclqLp7QvizbKnGRYAMVfVwBobYMBAIQBAIUBAIZTWgpQdgQQKZkZFHGfXySDKRAxXyoCASSfAgYAAAAQAABfIAIgL58ZBgSSSSSSSL9JIoEgAAMj1qj1U9jsORa1qxqAEAHOBAAEAECKALEAAAADEACHCAAAAAAAAAAAkAA="
      },
      "walletEcommerceIndicator": {
        "type": "string",
        "description": "Indicateur ECI tel que fourni par le portefeuille.",
        "nullable": true
      },
      "applePayDecryptedWallet": {
        "title": "applePayDecryptedWallet",
        "description": "Détails du portefeuille Apple Pay après avoir déchiffré le jeton.",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "applicationPrimaryAccountNumber": {
                "description": "Identifie le numéro de carte de crédit ou de débit du client (numéro de compte principal).",
                "type": "string",
                "minLength": 13,
                "maxLength": 19,
                "example": "4242424242424242"
              },
              "expiryMonth": {
                "$ref": "#/components/schemas/expiryMonth"
              },
              "expiryYear": {
                "$ref": "#/components/schemas/expiryYear"
              },
              "deviceManufacturerIdentifier": {
                "$ref": "#/components/schemas/deviceManufacturerIdentifier"
              },
              "dataType": {
                "$ref": "#/components/schemas/dataType"
              },
              "cryptogram": {
                "$ref": "#/components/schemas/walletCryptogram"
              },
              "cardBrand": {
                "type": "string",
                "description": "Card Brand.",
                "enum": [
                  "MASTERCARD",
                  "VISA",
                  "AMERICAN_EXPRESS",
                  "INTERAC",
                  "DISCOVER"
                ]
              },
              "walletEcommerceIndicator": {
                "$ref": "#/components/schemas/walletEcommerceIndicator"
              },
              "walletIndicator": {
                "$ref": "#/components/schemas/walletIndicator"
              }
            },
            "required": [
              "applicationPrimaryAccountNumber",
              "expiryMonth",
              "expiryYear",
              "dataType",
              "cryptogram",
              "cardBrand",
              "walletIndicator"
            ]
          }
        ],
        "required": [
          "paymentMethodSource"
        ]
      },
      "storeApplePayDecryptedWalletRequest": {
        "title": "storeApplePayDecryptedWalletRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/applePayDecryptedWallet"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "googlePayEncryptedWallet": {
        "title": "googlePayEncryptedWallet",
        "description": "Détails du portefeuille chiffré Apple Pay.",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "cardBrand": {
                "type": "string",
                "description": "Card Brand.",
                "enum": [
                  "MASTERCARD",
                  "VISA",
                  "AMERICAN_EXPRESS",
                  "INTERAC"
                ],
                "example": "INTERAC"
              },
              "signature": {
                "type": "string",
                "description": "Verifies that the message came from Google.  It's base64-encoded, and created with ECDSA by the intermediate signing key.\n"
              },
              "googlePayProtocolVersion": {
                "type": "string",
                "description": "Identifies the encryption or signing scheme under which the message is created. \nIt allows the protocol to evolve over time, if needed.\nMust be fowarded as provided by Google Pay.\n",
                "example": "ECv1"
              },
              "signedMessage": {
                "type": "string",
                "description": "A JSON object serialized as an HTML-safe string that contains the encryptedMessage, ephemeralPublicKey, and tag.  It's serialized to simplify the signature verification process.\n"
              },
              "walletIndicator": {
                "$ref": "#/components/schemas/walletIndicator"
              }
            },
            "required": [
              "cardBrand",
              "signature",
              "googlePayProtocolVersion",
              "signedMessage",
              "walletIndicator"
            ]
          }
        ],
        "required": [
          "paymentMethodSource"
        ]
      },
      "storeGooglePayEncryptedWalletRequest": {
        "title": "storeGooglePayEncryptedWalletRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/googlePayEncryptedWallet"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "googlePayDecryptedCardDetails": {
        "description": "Les informations d’identification de paiement elles-mêmes.  Le format de cet objet est déterminé par paymentMethod\n",
        "type": "object",
        "properties": {
          "personalAccountNumber": {
            "description": "Le numéro de compte personnel débité. Cette chaîne ne contient que des chiffres.",
            "type": "string",
            "minLength": 13,
            "maxLength": 19,
            "example": "4242424242424242"
          },
          "expiryMonth": {
            "$ref": "#/components/schemas/expiryMonth"
          },
          "expiryYear": {
            "$ref": "#/components/schemas/expiryYear"
          },
          "authenticationMethod": {
            "description": "La méthode d’authentification de la transaction par carte.\nDoit être transmis conformément aux dispositions de Google Pay.\n",
            "type": "string",
            "nullable": true
          },
          "cryptogram": {
            "nullable": true,
            "type": "string",
            "description": "Cryptogramme à jeton ou Base64 encodé pour les portefeuilles Interac.",
            "maxLength": 500,
            "example": "8YGKgiD0iJic84fBLVj3QuwuclqLp7QvizbKnGRYAMVfVwBobYMBAIQBAIUBAIZTWgpQdgQQKZkZFHGfXySDKRAxXyoCASSfAgYAAAAQAABfIAIgL58ZBgSSSSSSSL9JIoEgAAMj1qj1U9jsORa1qxqAEAHOBAAEAECKALEAAAADEACHCAAAAAAAAAAAkAA="
          },
          "walletEcommerceIndicator": {
            "$ref": "#/components/schemas/walletEcommerceIndicator"
          }
        },
        "required": [
          "personalAccountNumber",
          "expiryMonth",
          "expiryYear"
        ]
      },
      "googlePayDecryptedWallet": {
        "title": "googlePayDecryptedWallet",
        "description": "Détails du portefeuille Google Pay après avoir déchiffré le jeton.",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodRequestBase"
          },
          {
            "type": "object",
            "properties": {
              "gatewayMerchantId": {
                "nullable": true,
                "type": "string",
                "description": "Gateway unique store id",
                "example": "cagw123456"
              },
              "messageExpiration": {
                "type": "string",
                "nullable": true,
                "format": "date-time",
                "description": "Date and time at which the message expires. Integrators should reject any message that's expired.\n",
                "example": "2024-09-19T00:00:00Z"
              },
              "messageId": {
                "type": "string",
                "nullable": true,
                "description": "A unique ID that identifies the message in case it needs to be revoked or located at a later time."
              },
              "walletSource": {
                "type": "string",
                "description": "The type of the payment credential. Supported values are:\n  - CARD\n  - TOKENIZED_CARD\n",
                "enum": [
                  "CARD",
                  "TOKENIZED_CARD"
                ]
              },
              "cardBrand": {
                "type": "string",
                "description": "Card Network.",
                "enum": [
                  "MASTERCARD",
                  "VISA",
                  "AMERICAN_EXPRESS",
                  "INTERAC"
                ]
              },
              "walletIndicator": {
                "$ref": "#/components/schemas/walletIndicator"
              },
              "cardDetails": {
                "$ref": "#/components/schemas/googlePayDecryptedCardDetails"
              }
            },
            "required": [
              "walletSource",
              "cardBrand",
              "cardDetails",
              "walletIndicator"
            ]
          }
        ],
        "required": [
          "paymentMethodSource"
        ]
      },
      "storeGooglePayDecryptedWalletRequest": {
        "title": "storeGooglePayDecryptedWalletRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/googlePayDecryptedWallet"
          },
          {
            "type": "object",
            "properties": {
              "storePaymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethod"
              },
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "storePaymentMethodRequest": {
        "title": "storePaymentMethodRequest",
        "description": "Utilisé pour collecter les données de paiement nécessaires à l’exécution de la transaction. \nPeut également être utilisé pour collecter et enregistrer les instruments de paiement des clients dans les fichiers. \n",
        "oneOf": [
          {
            "$ref": "#/components/schemas/storePaymentMethodIdRequest"
          },
          {
            "$ref": "#/components/schemas/storePaymentMethodCardRequest"
          },
          {
            "$ref": "#/components/schemas/storePaymentMethodTemporaryTokenRequest"
          },
          {
            "$ref": "#/components/schemas/storePaymentMethodPermanentTokenRequest"
          },
          {
            "$ref": "#/components/schemas/storeApplePayDecryptedWalletRequest"
          },
          {
            "$ref": "#/components/schemas/storeApplePayEncryptedWalletRequest"
          },
          {
            "$ref": "#/components/schemas/storeGooglePayDecryptedWalletRequest"
          },
          {
            "$ref": "#/components/schemas/storeGooglePayEncryptedWalletRequest"
          }
        ],
        "discriminator": {
          "propertyName": "paymentMethodSource",
          "mapping": {
            "PAYMENT_METHOD_ID": "#/components/schemas/storePaymentMethodIdRequest",
            "CARD": "#/components/schemas/storePaymentMethodCardRequest",
            "TEMPORARY_TOKEN": "#/components/schemas/storePaymentMethodTemporaryTokenRequest",
            "PERMANENT_TOKEN": "#/components/schemas/storePaymentMethodPermanentTokenRequest",
            "APPLE_PAY_ENCRYPTED": "#/components/schemas/storeApplePayEncryptedWalletRequest",
            "APPLE_PAY_DECRYPTED": "#/components/schemas/storeApplePayDecryptedWalletRequest",
            "GOOGLE_PAY_ENCRYPTED": "#/components/schemas/storeGooglePayEncryptedWalletRequest",
            "GOOGLE_PAY_DECRYPTED": "#/components/schemas/storeGooglePayDecryptedWalletRequest"
          }
        },
        "required": [
          "paymentMethodSource"
        ]
      },
      "automaticCapture": {
        "type": "boolean",
        "description": "- **true** : (Par défaut) demandera à Moneris de saisir le paiement lorsqu’il est autorisé. Cela effectue une transaction d’achat.\n- **false** : incitera Moneris à bloquer les fonds lorsque le paiement est autorisé. Cela effectue une transaction de pré-autorisation.\n",
        "default": true
      },
      "resourceId": {
        "type": "string",
        "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
        "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
        "minLength": 30,
        "maxLength": 30,
        "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
      },
      "threeDSecureWithAuthenticationId": {
        "title": "Three DS Authentication Id",
        "type": "object",
        "properties": {
          "threeDSecureAuthenticationId": {
            "$ref": "#/components/schemas/resourceId"
          }
        },
        "required": [
          "threeDSecureAuthenticationId"
        ]
      },
      "threeDSecureAuthenticationValue": {
        "type": "string",
        "description": "**CAVV** : Valeur de vérification de l’authentification du titulaire de carte\nFourni lors d’une demande de paiement pour authentifier l’utilisateur de la carte.\n",
        "maxLength": 50,
        "example": "00000109260000719349",
        "nullable": true
      },
      "threeDSecureVersion": {
        "type": "string",
        "description": "Obligatoire lors de l’envoi d’une transaction en version 3-D Secure 2.0+. Si aucune valeur n’est fournie, la valeur par défaut est V1.",
        "maxLength": 10,
        "example": "2.2"
      },
      "threeDSecureServerTransactionId": {
        "type": "string",
        "description": "Indique les informations requises lors de l’envoi d’une transaction 3-D Secure 2.0+. \n\nCes données sont obtenues à partir d’une transaction de demande de recherche CAVV ou de demande d’authentification MPI 3DS.\n",
        "format": "uuid",
        "example": "ad9b0eda-bf9b-4288-b188-9467993603e1"
      },
      "threeDSecureDirectoryServerTransactionId": {
        "type": "string",
        "description": "Identificateur de transaction unique et universel attribué par le serveur d’annuaire 3DS (DS) pour identifier une transaction unique.",
        "format": "uuid",
        "example": "ad9b0eda-bf9b-4288-b188-9467993603e1"
      },
      "threeDSecureWithAuthenticationData": {
        "type": "object",
        "title": "Three DS Authentication Data",
        "properties": {
          "threeDSecureAuthenticationValue": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationValue"
          },
          "threeDSecureVersion": {
            "$ref": "#/components/schemas/threeDSecureVersion"
          },
          "threeDSecureServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureServerTransactionId"
          },
          "threeDSecureDirectoryServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureDirectoryServerTransactionId"
          }
        },
        "required": [
          "threeDSecureAuthenticationValue",
          "threeDSecureVersion",
          "threeDSecureServerTransactionId",
          "threeDSecureDirectoryServerTransactionId"
        ]
      },
      "threeDSecureData": {
        "description": "Données liées à 3-D Secure",
        "type": "object",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/threeDSecureWithAuthenticationId"
          },
          {
            "$ref": "#/components/schemas/threeDSecureWithAuthenticationData"
          }
        ]
      },
      "installmentPlanInformation": {
        "type": "object",
        "description": "Détails du plan de versement, si un plan de versement est sélectionné",
        "nullable": true,
        "properties": {
          "planId": {
            "$ref": "#/components/schemas/installmentId"
          },
          "planIdReference": {
            "$ref": "#/components/schemas/installmentIdReference"
          },
          "planTermsAndConditionsVersion": {
            "$ref": "#/components/schemas/installmentTermsAndConditionsVersion"
          }
        },
        "required": [
          "planId",
          "planIdReference",
          "planTermsAndConditionsVersion"
        ]
      },
      "ipv4": {
        "type": "string",
        "format": "ipv4",
        "description": "Protocole Internet version 4 (IPv4).",
        "example": "104.75.173.179",
        "nullable": true
      },
      "ipv6": {
        "type": "string",
        "format": "ipv6",
        "description": "Protocole Internet version 6 (IPv6).",
        "example": "2600:1401:2::8a",
        "nullable": true
      },
      "createPaymentRequest": {
        "title": "paymentRequest",
        "type": "object",
        "description": "Corps de la demande, utilisé pour initier un paiement",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "amount": {
            "description": "Ce montant ne comprend pas les frais supplémentaires, les frais de dossier et les frais de conversion.",
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "amountDetails": {
            "$ref": "#/components/schemas/amountDetails"
          },
          "customerId": {
            "nullable": true,
            "description": "L’identifiant unique du client.",
            "type": "string",
            "example": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30
          },
          "customerReference": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client. Il peut s'agir d'un identifiant généré à partir d'un identifiant défini par le marchand.",
            "example": "911677-212",
            "minLength": 1,
            "maxLength": 50
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/storePaymentMethodRequest"
          },
          "ecommerceIndicator": {
            "description": "Décrit la catégorie de transaction de commerce électronique en cours de traitement.",
            "type": "string",
            "enum": [
              "MAIL_TELEPHONE_ORDER_SINGLE",
              "MAIL_TELEPHONE_ORDER_RECURRING",
              "MAIL_TELEPHONE_ORDER_INSTALMENT",
              "MAIL_TELEPHONE_ORDER_UNKNOWN",
              "AUTHENTICATED_ECOMMERCE",
              "NON_AUTHENTICATED_ECOMMERCE",
              "SSL_MERCHANT"
            ],
            "example": "AUTHENTICATED_ECOMMERCE",
            "default": "SSL_MERCHANT"
          },
          "automaticCapture": {
            "$ref": "#/components/schemas/automaticCapture"
          },
          "customData": {
            "nullable": true,
            "description": "Le marchand peut envoyer des métadonnées personnalisées avec la transaction dans cet objet. Moneris fera écho à ces valeurs en réponse.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "minLength": 1,
              "maxLength": 50
            },
            "maxProperties": 10
          },
          "dynamicDescriptor": {
            "nullable": true,
            "type": "string",
            "description": "Description définie par le commerçant envoyée par transaction et qui apparaîtra sur le relevé de carte de crédit.  \n\nEn fonction de l’émetteur de la carte, le relevé affiche généralement le descripteur dynamique ajouté au nom commercial existant du commerçant, séparé par le caractère « / ».  \n\n**Remarque** : La longueur combinée du nom commercial du commerçant, de la barre oblique « / » et du descripteur dynamique ne doit pas dépasser 22 caractères.\n",
            "minLength": 1,
            "maxLength": 20,
            "example": "moneris"
          },
          "threeDSecureData": {
            "$ref": "#/components/schemas/threeDSecureData"
          },
          "installmentPlanInformation": {
            "$ref": "#/components/schemas/installmentPlanInformation"
          },
          "ipv4": {
            "$ref": "#/components/schemas/ipv4"
          },
          "ipv6": {
            "$ref": "#/components/schemas/ipv6"
          }
        },
        "required": [
          "idempotencyKey",
          "paymentMethod",
          "amount"
        ]
      },
      "cancelPaymentRequest": {
        "title": "cancelPaymentRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "reason": {
            "nullable": true,
            "description": "Raison de l’annulation du paiement.\n\nRemarque : Il s’agit d’un champ de notation.\n",
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "Defective product"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "completionRequest": {
        "title": "completionRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "amount": {
            "nullable": true,
            "title": "completionAmount",
            "type": "object",
            "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "paymentMethodList": {
        "description": "Liste des modes de paiement",
        "type": "object",
        "title": "paymentMethodList",
        "properties": {
          "data": {
            "description": "Liste des modes de paiement",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/paymentMethod"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        },
        "required": [
          "data"
        ]
      },
      "createCardPaymentMethodRequest": {
        "title": "createCardPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/paymentMethodCard"
          }
        ]
      },
      "createTemporaryTokenPaymentMethodRequest": {
        "title": "createTemporaryTokenPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/paymentMethodTemporaryToken"
          }
        ]
      },
      "createPermanentTokenPaymentMethodRequest": {
        "title": "createPermanentTokenPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/paymentMethodPermanentToken"
          }
        ]
      },
      "createApplePayEncryptedWalletPaymentMethodRequest": {
        "title": "createApplePayEncryptedWalletPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/applePayEncryptedWallet"
          }
        ]
      },
      "createApplePayDecryptedWalletPaymentMethodRequest": {
        "title": "createApplePayDecryptedWalletPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/applePayDecryptedWallet"
          }
        ]
      },
      "createGooglePayEncryptedWalletPaymentMethodRequest": {
        "title": "createGooglePayEncryptedWalletPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/googlePayEncryptedWallet"
          }
        ]
      },
      "createGooglePayDecryptedWalletPaymentMethodRequest": {
        "title": "createGooglePayDecryptedWalletPaymentMethodRequest",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/googlePayDecryptedWallet"
          }
        ]
      },
      "createPaymentMethodRequest": {
        "title": "createPaymentMethodRequest",
        "oneOf": [
          {
            "$ref": "#/components/schemas/createCardPaymentMethodRequest"
          },
          {
            "$ref": "#/components/schemas/createTemporaryTokenPaymentMethodRequest"
          },
          {
            "$ref": "#/components/schemas/createPermanentTokenPaymentMethodRequest"
          },
          {
            "$ref": "#/components/schemas/createApplePayEncryptedWalletPaymentMethodRequest"
          },
          {
            "$ref": "#/components/schemas/createApplePayDecryptedWalletPaymentMethodRequest"
          },
          {
            "$ref": "#/components/schemas/createGooglePayEncryptedWalletPaymentMethodRequest"
          },
          {
            "$ref": "#/components/schemas/createGooglePayDecryptedWalletPaymentMethodRequest"
          }
        ],
        "discriminator": {
          "propertyName": "paymentMethodSource",
          "mapping": {
            "CARD": "#/components/schemas/createCardPaymentMethodRequest",
            "TEMPORARY_TOKEN": "#/components/schemas/createTemporaryTokenPaymentMethodRequest",
            "PERMANENT_TOKEN": "#/components/schemas/createPermanentTokenPaymentMethodRequest",
            "APPLE_PAY_ENCRYPTED": "#/components/schemas/createApplePayEncryptedWalletPaymentMethodRequest",
            "APPLE_PAY_DECRYPTED": "#/components/schemas/createApplePayDecryptedWalletPaymentMethodRequest",
            "GOOGLE_PAY_ENCRYPTED": "#/components/schemas/createGooglePayEncryptedWalletPaymentMethodRequest",
            "GOOGLE_PAY_DECRYPTED": "#/components/schemas/createGooglePayDecryptedWalletPaymentMethodRequest"
          }
        },
        "required": [
          "paymentMethodSource"
        ]
      },
      "updatePaymentMethodRequest": {
        "title": "updatePaymentMethodRequest",
        "oneOf": [
          {
            "$ref": "#/components/schemas/paymentMethodCard"
          },
          {
            "$ref": "#/components/schemas/paymentMethodTemporaryToken"
          },
          {
            "$ref": "#/components/schemas/paymentMethodPermanentToken"
          },
          {
            "$ref": "#/components/schemas/applePayEncryptedWallet"
          },
          {
            "$ref": "#/components/schemas/applePayDecryptedWallet"
          },
          {
            "$ref": "#/components/schemas/googlePayEncryptedWallet"
          },
          {
            "$ref": "#/components/schemas/googlePayDecryptedWallet"
          }
        ],
        "discriminator": {
          "propertyName": "paymentMethodSource",
          "mapping": {
            "CARD": "#/components/schemas/paymentMethodCard",
            "TEMPORARY_TOKEN": "#/components/schemas/paymentMethodTemporaryToken",
            "PERMANENT_TOKEN": "#/components/schemas/paymentMethodPermanentToken",
            "APPLE_PAY_ENCRYPTED": "#/components/schemas/applePayEncryptedWallet",
            "APPLE_PAY_DECRYPTED": "#/components/schemas/applePayDecryptedWallet",
            "GOOGLE_PAY_ENCRYPTED": "#/components/schemas/googlePayEncryptedWallet",
            "GOOGLE_PAY_DECRYPTED": "#/components/schemas/googlePayDecryptedWallet"
          }
        },
        "required": [
          "paymentMethodSource"
        ]
      },
      "paymentUri": {
        "title": "Payment URI",
        "nullable": true,
        "description": "URL de référence de paiement",
        "type": "string",
        "format": "uri-reference",
        "example": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
      },
      "paymentReference": {
        "description": "Référence de paiement. Peut être étendu aux détails de paiement complets à l’aide du paramètre de requête expand.",
        "type": "object",
        "nullable": true,
        "properties": {
          "paymentId": {
            "$ref": "#/components/schemas/paymentId"
          },
          "href": {
            "$ref": "#/components/schemas/paymentUri"
          }
        },
        "required": [
          "paymentId"
        ]
      },
      "refundAmount": {
        "type": "object",
        "description": "Montant du remboursement de la transaction. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059\n",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ],
        "example": {
          "amount": 17500,
          "currency": "CAD"
        }
      },
      "refundStatus": {
        "type": "string",
        "description": "Description de l’état du remboursement.",
        "enum": [
          "DECLINED",
          "DECLINED_RETRY",
          "PROCESSING",
          "SUCCEEDED"
        ],
        "example": "SUCCEEDED"
      },
      "refund": {
        "title": "refundResponse",
        "type": "object",
        "properties": {
          "refundId": {
            "$ref": "#/components/schemas/refundId"
          },
          "payment": {
            "$ref": "#/components/schemas/paymentReference"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethod"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "refundAmount": {
            "$ref": "#/components/schemas/refundAmount"
          },
          "customerId": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client",
            "example": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30
          },
          "customerReference": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client. Il peut s'agir d'un identifiant généré à partir d'un identifiant défini par le marchand.",
            "example": "911677-212",
            "minLength": 1,
            "maxLength": 50
          },
          "refundStatus": {
            "$ref": "#/components/schemas/refundStatus"
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/statusDetails"
          },
          "reason": {
            "description": "Raison du remboursement.",
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "Defective product",
            "nullable": true
          },
          "credentialOnFileResponse": {
            "$ref": "#/components/schemas/credentialOnFileResponse"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "refundId",
          "merchantId",
          "paymentMethod",
          "createdAt",
          "refundAmount",
          "refundStatus",
          "transactionDetails"
        ]
      },
      "refundList": {
        "title": "refundList",
        "type": "object",
        "properties": {
          "data": {
            "description": "Liste des remboursements.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/refund"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        },
        "required": [
          "data"
        ]
      },
      "dynamicDescriptor": {
        "type": "string",
        "description": "Description définie par le commerçant envoyée par transaction et qui apparaîtra sur le relevé de carte de crédit.  \n\nEn fonction de l’émetteur de la carte, le relevé affiche généralement le descripteur dynamique ajouté au nom commercial existant du commerçant, séparé par le caractère « / ».  \n\n**Remarque** : La longueur combinée du nom commercial du commerçant, de la barre oblique « / » et du descripteur dynamique ne doit pas dépasser 22 caractères.\n",
        "minLength": 1,
        "maxLength": 20,
        "example": "moneris",
        "nullable": true
      },
      "createRefundRequestBase": {
        "title": "Create Refund Request Base",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "refundAmount": {
            "$ref": "#/components/schemas/refundAmount"
          },
          "customerId": {
            "nullable": true,
            "description": "Identifiant unique du client.",
            "type": "string",
            "example": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30
          },
          "customerReference": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client. Il peut s'agir d'un identifiant généré à partir d'un identifiant défini par le marchand.",
            "example": "911677-212",
            "minLength": 1,
            "maxLength": 50
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "dynamicDescriptor": {
            "$ref": "#/components/schemas/dynamicDescriptor"
          },
          "ipv4": {
            "$ref": "#/components/schemas/ipv4"
          },
          "ipv6": {
            "$ref": "#/components/schemas/ipv6"
          },
          "ecommerceIndicator": {
            "$ref": "#/components/schemas/ecommerceIndicator"
          },
          "reason": {
            "description": "Raison du remboursement.",
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "Defective product",
            "nullable": true
          }
        },
        "required": [
          "idempotencyKey",
          "refundAmount"
        ]
      },
      "createMatchingRefundRequest": {
        "title": "Matching Refund",
        "description": "Remboursement correspondant",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "paymentId": {
                "$ref": "#/components/schemas/paymentId"
              }
            },
            "required": [
              "paymentId"
            ]
          },
          {
            "$ref": "#/components/schemas/createRefundRequestBase"
          }
        ]
      },
      "createIndependentRefundRequest": {
        "title": "Independent Refund",
        "description": "Remboursement indépendant",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "orderId": {
                "$ref": "#/components/schemas/orderId"
              },
              "paymentMethod": {
                "$ref": "#/components/schemas/storePaymentMethodRequest"
              }
            },
            "required": [
              "paymentMethod"
            ]
          },
          {
            "$ref": "#/components/schemas/createRefundRequestBase"
          }
        ]
      },
      "createRefundRequest": {
        "title": "Create Refund Request",
        "oneOf": [
          {
            "$ref": "#/components/schemas/createMatchingRefundRequest"
          },
          {
            "$ref": "#/components/schemas/createIndependentRefundRequest"
          }
        ]
      },
      "validationStatus": {
        "type": "string",
        "description": "Description du statut de validation.",
        "enum": [
          "DECLINED",
          "DECLINED_RETRY",
          "PROCESSING",
          "SUCCEEDED"
        ],
        "example": "SUCCEEDED"
      },
      "validationVerificationDetails": {
        "description": "Codes de résultat CVD, AVS, 3DS, ITD",
        "type": "object",
        "properties": {
          "addressVerificationServiceResultCode": {
            "$ref": "#/components/schemas/addressVerificationServiceResultCode"
          },
          "cardSecurityCodeResultCode": {
            "$ref": "#/components/schemas/cardSecurityCodeResult"
          }
        }
      },
      "validation": {
        "title": "validation",
        "type": "object",
        "properties": {
          "validationId": {
            "description": "L’identifiant unique de la Validation",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethod"
          },
          "validationStatus": {
            "$ref": "#/components/schemas/validationStatus"
          },
          "transactionDetails": {
            "$ref": "#/components/schemas/statusDetails"
          },
          "verificationDetails": {
            "$ref": "#/components/schemas/validationVerificationDetails"
          },
          "credentialOnFileResponse": {
            "$ref": "#/components/schemas/credentialOnFileResponse"
          },
          "customerId": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client",
            "example": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30
          },
          "customerReference": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client. Il peut s'agir d'un identifiant généré à partir d'un identifiant défini par le marchand.",
            "example": "911677-212",
            "minLength": 1,
            "maxLength": 50
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "validationId",
          "merchantId",
          "createdAt",
          "paymentMethod",
          "validationStatus",
          "transactionDetails",
          "verificationDetails"
        ]
      },
      "validationList": {
        "title": "validationsList",
        "type": "object",
        "properties": {
          "data": {
            "description": "Liste des validations.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/validation"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        },
        "required": [
          "data"
        ]
      },
      "createValidationRequest": {
        "title": "Creates a Validation Request",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/storePaymentMethodRequest"
          },
          "customerId": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client",
            "example": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30
          },
          "customerReference": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client. Il peut s'agir d'un identifiant généré à partir d'un identifiant défini par le marchand.",
            "example": "911677-212",
            "minLength": 1,
            "maxLength": 50
          },
          "dynamicDescriptor": {
            "$ref": "#/components/schemas/dynamicDescriptor"
          },
          "ecommerceIndicator": {
            "description": "Décrit la catégorie de transaction de commerce électronique en cours de traitement.",
            "type": "string",
            "enum": [
              "MAIL_TELEPHONE_ORDER_SINGLE",
              "MAIL_TELEPHONE_ORDER_RECURRING",
              "MAIL_TELEPHONE_ORDER_INSTALMENT",
              "MAIL_TELEPHONE_ORDER_UNKNOWN",
              "AUTHENTICATED_ECOMMERCE",
              "NON_AUTHENTICATED_ECOMMERCE",
              "SSL_MERCHANT"
            ],
            "example": "AUTHENTICATED_ECOMMERCE",
            "default": "SSL_MERCHANT"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey",
          "paymentMethod"
        ]
      },
      "subscriptionType": {
        "type": "string",
        "description": "Type d'abonnement.\n- RECURRING : Abonnement récurrent.\n",
        "enum": [
          "RECURRING"
        ],
        "example": "RECURRING"
      },
      "billingIntervalUnit": {
        "type": "string",
        "description": "Contrôle si la série récurrente se produit sur une base quotidienne (`DAY`), hebdomadaire (`WEEK`) ou mensuelle (`MONTH`).\n\nPour garantir des horaires réguliers, utilisez `END_OF_MONTH` pour les heures se produisant le dernier jour de chaque mois.\n",
        "enum": [
          "DAY",
          "WEEK",
          "MONTH",
          "END_OF_MONTH"
        ]
      },
      "billingIntervalFrequency": {
        "type": "integer",
        "format": "int32",
        "description": "Nombre d'unités d'intervalle s'écoulant entre les paiements d'abonnement. Les fréquences supérieures à 1 entraînent le saut d'intervalles par l'abonnement, comme les abonnements bimensuels (2 semaines) ou annuels (12 mois).\n",
        "minimum": 1,
        "maximum": 999,
        "example": 1
      },
      "subscriptionIntervalCount": {
        "type": "integer",
        "format": "int32",
        "description": "Combien de paiements sont programmés dans la série. Les paiements liés au champ oneTimeAmount ne sont pas inclus dans le décompte initial.\n",
        "minimum": 1,
        "maximum": 99,
        "example": 12
      },
      "billingInformation": {
        "type": "object",
        "description": "Les abonnements vous permettent de configurer des paiements grâce auxquels Moneris traite automatiquement les transactions et facture les clients en votre nom en fonction des informations sur le cycle de facturation que vous fournissez.",
        "properties": {
          "billingIntervalUnit": {
            "$ref": "#/components/schemas/billingIntervalUnit"
          },
          "billingIntervalFrequency": {
            "$ref": "#/components/schemas/billingIntervalFrequency"
          },
          "billingIntervalCount": {
            "$ref": "#/components/schemas/subscriptionIntervalCount"
          },
          "billingAmount": {
            "description": "Le montant de l'opération de l'abonnement. La valeur doit être en centimes. Par conséquent, 10,59 $ doivent être envoyés sous la forme 1059",
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "billingStartDate": {
            "description": "Date de la première transaction future de facturation d'abonnement. Cette valeur doit être une date dans le futur.",
            "type": "string",
            "format": "date",
            "example": "2019-07-30"
          },
          "nextBillingDate": {
            "description": "Date à laquelle aura lieu le prochain paiement",
            "nullable": true,
            "type": "string",
            "format": "date",
            "example": "2019-07-30"
          },
          "billingEndDate": {
            "description": "Date à laquelle l'abonnement prendra fin.",
            "nullable": true,
            "type": "string",
            "format": "date",
            "example": "2019-07-30"
          }
        },
        "required": [
          "billingIntervalUnit",
          "billingIntervalFrequency",
          "billingIntervalCount",
          "billingStartDate",
          "billingAmount"
        ],
        "example": {
          "billingIntervalUnit": "WEEK",
          "billingIntervalFrequency": 2,
          "billingIntervalCount": 2,
          "billingAmount": {
            "amount": 2500,
            "currency": "CAD"
          },
          "billingStartDate": "2025-02-01",
          "nextBillingDate": "2025-02-14",
          "billingEndDate": "2025-02-28"
        }
      },
      "callbackUrl": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256,
        "nullable": true,
        "description": "URI sur lequelle recevoir la notification de l'abonnement.",
        "example": "https://myserver.com/send/callback/here"
      },
      "subscriptionStatus": {
        "type": "string",
        "description": "Description du statut de l'abonnement.",
        "enum": [
          "DECLINED",
          "DECLINED_RETRY",
          "PAUSED",
          "ACTIVE",
          "CANCELED",
          "COMPLETED"
        ],
        "example": "ACTIVE"
      },
      "subscription": {
        "title": "subscription",
        "type": "object",
        "properties": {
          "subscriptionId": {
            "$ref": "#/components/schemas/subscriptionId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "customerId": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client",
            "example": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30
          },
          "customerReference": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client. Il peut s'agir d'un identifiant généré à partir d'un identifiant défini par le marchand.",
            "example": "911677-212",
            "minLength": 1,
            "maxLength": 50
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "subscriptionType": {
            "$ref": "#/components/schemas/subscriptionType"
          },
          "billingInformation": {
            "$ref": "#/components/schemas/billingInformation"
          },
          "callbackUrl": {
            "$ref": "#/components/schemas/callbackUrl"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethod"
          },
          "subscriptionStatus": {
            "$ref": "#/components/schemas/subscriptionStatus"
          },
          "oneTimeAmount": {
            "nullable": true,
            "description": "Montant de la première transaction de l'abonnement. La valeur doit être en cents. Par conséquent, 10,59 $ doivent être envoyés sous la forme 1059",
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "credentialOnFileResponse": {
            "$ref": "#/components/schemas/credentialOnFileResponse"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "payments": {
            "type": "array",
            "description": "Liste des paiements",
            "items": {
              "$ref": "#/components/schemas/paymentReference"
            }
          }
        },
        "required": [
          "subscriptionId",
          "merchantId",
          "orderId",
          "createdAt",
          "subscriptionType",
          "billingInformation",
          "paymentMethod",
          "subscriptionStatus"
        ]
      },
      "subscriptionList": {
        "title": "subscriptionList",
        "type": "object",
        "description": "Liste paginée des abonnements.",
        "properties": {
          "data": {
            "type": "array",
            "description": "Liste des abonnements.",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/subscription"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        },
        "required": [
          "data"
        ]
      },
      "billingDetails": {
        "type": "object",
        "description": "Les abonnements vous permettent de configurer des paiements grâce auxquels Moneris traite automatiquement les transactions et facture les clients en votre nom en fonction des informations sur le cycle de facturation que vous fournissez.",
        "properties": {
          "billingIntervalUnit": {
            "$ref": "#/components/schemas/billingIntervalUnit"
          },
          "billingIntervalFrequency": {
            "$ref": "#/components/schemas/billingIntervalFrequency"
          },
          "billingIntervalCount": {
            "$ref": "#/components/schemas/subscriptionIntervalCount"
          },
          "billingAmount": {
            "description": "Le montant de la transaction d'abonnement. La valeur doit être en cents. Par conséquent, 10,59 $ doivent être envoyés sous la forme 1059",
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "billingStartDate": {
            "description": "Date de la première transaction de facturation d'abonnement future. Cette valeur doit être une date dans le futur.",
            "type": "string",
            "format": "date",
            "example": "2019-07-30"
          }
        },
        "required": [
          "billingIntervalUnit",
          "billingIntervalFrequency",
          "billingIntervalCount",
          "billingStartDate",
          "billingAmount"
        ]
      },
      "subscriptionPaymentMethodIdRequest": {
        "title": "subscriptionPaymentMethodIdRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodWithId"
          },
          {
            "type": "object",
            "properties": {
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "subscriptionPaymentMethodCardRequest": {
        "title": "subscriptionPaymentMethodCardRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodCard"
          },
          {
            "type": "object",
            "properties": {
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "subscriptionPaymentMethodTemporaryTokenRequest": {
        "title": "subscriptionPaymentMethodTemporaryTokenRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodTemporaryToken"
          },
          {
            "type": "object",
            "properties": {
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "subscriptionPaymentMethodPermanentTokenRequest": {
        "title": "subscriptionPaymentMethodPermanentTokenRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/paymentMethodPermanentToken"
          },
          {
            "type": "object",
            "properties": {
              "credentialOnFileInformation": {
                "$ref": "#/components/schemas/credentialOnFileInformation"
              }
            },
            "required": [
              "credentialOnFileInformation"
            ]
          }
        ]
      },
      "subscriptionPaymentMethodApplePayEncryptedWalletRequest": {
        "title": "subscriptionPaymentMethodApplePayEncryptedWalletRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/applePayEncryptedWallet"
          },
          {
            "type": "object",
            "properties": {
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "subscriptionPaymentMethodApplePayDecryptedWalletRequest": {
        "title": "subscriptionPaymentMethodApplePayDecryptedWalletRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/applePayDecryptedWallet"
          },
          {
            "type": "object",
            "properties": {
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "subscriptionPaymentMethodGooglePayEncryptedWalletRequest": {
        "title": "subscriptionPaymentMethodGooglePayEncryptedWalletRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/googlePayEncryptedWallet"
          },
          {
            "type": "object",
            "properties": {
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "subscriptionPaymentMethodGooglePayDecryptedWalletRequest": {
        "title": "subscriptionPaymentMethodGooglePayDecryptedWalletRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/googlePayDecryptedWallet"
          },
          {
            "type": "object",
            "properties": {
              "credentialOnFileInformation": {
                "nullable": true,
                "type": "object",
                "description": "Contient des champs liés aux informations d’identification enregistrées (CoF) ",
                "properties": {
                  "paymentIndicator": {
                    "$ref": "#/components/schemas/paymentIndicator"
                  },
                  "paymentInformation": {
                    "$ref": "#/components/schemas/paymentInformation"
                  },
                  "issuerId": {
                    "$ref": "#/components/schemas/issuerId"
                  },
                  "originalAmount": {
                    "$ref": "#/components/schemas/originalAmount"
                  }
                },
                "required": [
                  "paymentIndicator",
                  "paymentInformation"
                ],
                "example": {
                  "paymentIndicator": "CUSTOMER_INITIATED",
                  "paymentInformation": "FIRST",
                  "issuerId": "123asd"
                }
              }
            }
          }
        ]
      },
      "subscriptionPaymentMethodRequest": {
        "title": "subscriptionPaymentMethodRequest",
        "description": "Détails du mode de paiement.\n\nRemarque : Si cette option est définie, cela entraînera la création d’un mode de paiement tel que défini dans l’API du mode de paiement.\n",
        "oneOf": [
          {
            "$ref": "#/components/schemas/subscriptionPaymentMethodIdRequest"
          },
          {
            "$ref": "#/components/schemas/subscriptionPaymentMethodCardRequest"
          },
          {
            "$ref": "#/components/schemas/subscriptionPaymentMethodTemporaryTokenRequest"
          },
          {
            "$ref": "#/components/schemas/subscriptionPaymentMethodPermanentTokenRequest"
          },
          {
            "$ref": "#/components/schemas/subscriptionPaymentMethodApplePayEncryptedWalletRequest"
          },
          {
            "$ref": "#/components/schemas/subscriptionPaymentMethodApplePayDecryptedWalletRequest"
          },
          {
            "$ref": "#/components/schemas/subscriptionPaymentMethodGooglePayEncryptedWalletRequest"
          },
          {
            "$ref": "#/components/schemas/subscriptionPaymentMethodGooglePayDecryptedWalletRequest"
          }
        ],
        "discriminator": {
          "propertyName": "paymentMethodSource",
          "mapping": {
            "PAYMENT_METHOD_ID": "#/components/schemas/subscriptionPaymentMethodIdRequest",
            "CARD": "#/components/schemas/subscriptionPaymentMethodCardRequest",
            "TEMPORARY_TOKEN": "#/components/schemas/subscriptionPaymentMethodTemporaryTokenRequest",
            "PERMANENT_TOKEN": "#/components/schemas/subscriptionPaymentMethodPermanentTokenRequest",
            "APPLE_PAY_ENCRYPTED": "#/components/schemas/subscriptionPaymentMethodApplePayEncryptedWalletRequest",
            "APPLE_PAY_DECRYPTED": "#/components/schemas/subscriptionPaymentMethodApplePayDecryptedWalletRequest",
            "GOOGLE_PAY_ENCRYPTED": "#/components/schemas/subscriptionPaymentMethodGooglePayEncryptedWalletRequest",
            "GOOGLE_PAY_DECRYPTED": "#/components/schemas/subscriptionPaymentMethodGooglePayDecryptedWalletRequest"
          }
        }
      },
      "createSubscriptionRequest": {
        "title": "subscriptionRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "invoiceNumber": {
            "$ref": "#/components/schemas/invoiceNumber"
          },
          "subscriptionType": {
            "$ref": "#/components/schemas/subscriptionType"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/billingDetails"
          },
          "callbackUrl": {
            "$ref": "#/components/schemas/callbackUrl"
          },
          "oneTimeAmount": {
            "nullable": true,
            "description": "Montant de la première transaction de l'abonnement. La valeur doit être en cents. Par conséquent, 10,59 $ doivent être envoyés sous la forme 1059",
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/subscriptionPaymentMethodRequest"
          },
          "ecommerceIndicator": {
            "$ref": "#/components/schemas/ecommerceIndicator"
          },
          "customerId": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client",
            "example": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30
          },
          "customerReference": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client. Il peut s'agir d'un identifiant généré à partir d'un identifiant défini par le marchand.",
            "example": "911677-212",
            "minLength": 1,
            "maxLength": 50
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "dynamicDescriptor": {
            "$ref": "#/components/schemas/dynamicDescriptor"
          },
          "threeDSecureData": {
            "$ref": "#/components/schemas/threeDSecureData"
          },
          "ipv4": {
            "$ref": "#/components/schemas/ipv4"
          },
          "ipv6": {
            "$ref": "#/components/schemas/ipv6"
          }
        },
        "required": [
          "idempotencyKey",
          "paymentMethod",
          "subscriptionType",
          "billingDetails"
        ]
      },
      "customerId": {
        "type": "string",
        "description": "Identification unique du client",
        "example": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
        "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
        "minLength": 30,
        "maxLength": 30
      },
      "updateSubscriptionDetails": {
        "type": "object",
        "description": "Mettre à jour les détails de l'abonnement tels que le cycle de facturation de l'abonnement, le montant et le mode de paiement.",
        "properties": {
          "paymentMethod": {
            "$ref": "#/components/schemas/subscriptionPaymentMethodIdRequest"
          },
          "totalSubscriptionIntervalCount": {
            "$ref": "#/components/schemas/subscriptionIntervalCount"
          },
          "subscriptionAmount": {
            "description": "Le montant de l'abonnement. La valeur doit être en cents. Par conséquent, 10,59 $ doivent être envoyés sous la forme 1059",
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "callbackUrl": {
            "$ref": "#/components/schemas/callbackUrl"
          },
          "customerId": {
            "$ref": "#/components/schemas/customerId"
          },
          "customerReference": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client. Il peut s'agir d'un identifiant généré à partir d'un identifiant défini par le marchand.",
            "example": "911677-212",
            "minLength": 1,
            "maxLength": 50
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "resumeSubscriptionRequest": {
        "title": "resumeSubscriptionRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "pauseSubscriptionRequest": {
        "title": "pauseSubscriptionRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "cancelSubscriptionRequest": {
        "title": "cancelSubscriptionRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          },
          "reason": {
            "description": "Raison de l'annulation.",
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "Defective product",
            "nullable": true
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "extendSubscriptionRequest": {
        "type": "object",
        "description": "Ajoute le nombre donné de transactions d'abonnement au nombre actuel (restant). Cela peut être utilisé si un client décide de prolonger son adhésion/abonnement. Cependant, comme il doit s'agir d'un nombre positif, il ne peut pas être utilisé pour diminuer le nombre actuel de transactions d'abonnement.",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "additionalSubscriptionIntervalCount": {
            "description": "Ajoute le nombre donné de transactions d'abonnement au nombre actuel (restant). Cette fonction peut être utilisée si un client décide de prolonger un abonnement. Cependant, comme ce nombre doit être positif, il ne peut pas être utilisé pour diminuer le nombre actuel de transactions d'abonnement.",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 99,
            "example": 12
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey",
          "additionalSubscriptionIntervalCount"
        ]
      },
      "firstName": {
        "type": "string",
        "description": "Prénom.",
        "minLength": 1,
        "maxLength": 30,
        "example": "John",
        "nullable": true
      },
      "middleName": {
        "type": "string",
        "description": "Indique le deuxième prénom du client.",
        "minLength": 1,
        "maxLength": 30,
        "example": "J.",
        "nullable": true
      },
      "lastName": {
        "type": "string",
        "description": "Nom de famille.",
        "minLength": 1,
        "maxLength": 30,
        "example": "Doe",
        "nullable": true
      },
      "customer": {
        "title": "customer",
        "type": "object",
        "properties": {
          "customerId": {
            "$ref": "#/components/schemas/customerId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/modifiedAt"
          },
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/middleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          },
          "address": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Numéro de téléphone.",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "minLength": 3,
            "maxLength": 16,
            "example": "+18663197450"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "email",
            "description": "Contient l’adresse e-mail du client.\n\nPour connaître les protocoles de courrier électronique standard, consultez : https://www.rfc-editor.org/rfc/rfc5322\n",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "customerId",
          "merchantId",
          "createdAt"
        ]
      },
      "customerList": {
        "title": "customerList",
        "type": "object",
        "properties": {
          "data": {
            "description": "Liste des clients.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/customer"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        },
        "required": [
          "data"
        ]
      },
      "createCustomerRequest": {
        "title": "customerRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/middleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          },
          "address": {
            "nullable": true,
            "title": "customerAddress",
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Numéro de téléphone.",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "minLength": 3,
            "maxLength": 16,
            "example": "+18663197450"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "email",
            "description": "Contient l’adresse e-mail du client.\n\nPour connaître les protocoles de courrier électronique standard, consultez : https://www.rfc-editor.org/rfc/rfc5322\n",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey"
        ]
      },
      "customerRequest": {
        "title": "customerRequest",
        "type": "object",
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/middleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          },
          "address": {
            "nullable": true,
            "title": "customerAddress",
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "phoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Numéro de téléphone.",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "minLength": 3,
            "maxLength": 16,
            "example": "+18663197450"
          },
          "email": {
            "nullable": true,
            "type": "string",
            "format": "email",
            "description": "Contient l’adresse e-mail du client.\n\nPour connaître les protocoles de courrier électronique standard, consultez : https://www.rfc-editor.org/rfc/rfc5322\n",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        }
      },
      "email": {
        "type": "string",
        "format": "email",
        "description": "Contient l’adresse e-mail du client.\n\nPour connaître les protocoles de courrier électronique standard, consultez : https://www.rfc-editor.org/rfc/rfc5322\n",
        "minLength": 1,
        "maxLength": 320,
        "example": "moneris@moneris.com"
      },
      "phoneNumber": {
        "type": "string",
        "description": "Numéro de téléphone.",
        "pattern": "^\\+[1-9]\\d{1,14}$",
        "minLength": 3,
        "maxLength": 16,
        "example": "+18663197450"
      },
      "streetNumber": {
        "type": "string",
        "description": "Numéro de rue",
        "minLength": 1,
        "maxLength": 19,
        "example": "3300"
      },
      "streetName": {
        "type": "string",
        "description": "Nom de la rue",
        "minLength": 1,
        "maxLength": 100,
        "example": "Bloor"
      },
      "city": {
        "type": "string",
        "description": "Identifie la ville.\n",
        "minLength": 1,
        "maxLength": 50,
        "example": "Toronto"
      },
      "province": {
        "type": "string",
        "description": "Code ISO 3166-2 de la province ou de l’État ",
        "minLength": 1,
        "maxLength": 3,
        "format": "iso-3166-2",
        "example": "ON"
      },
      "postalCode": {
        "type": "string",
        "description": "Code postal",
        "minLength": 1,
        "maxLength": 30,
        "example": "M8X 2X2"
      },
      "country": {
        "type": "string",
        "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
        "minLength": 2,
        "maxLength": 2,
        "example": "CA",
        "format": "iso-3166"
      },
      "threeDSecureAuthenticationBillingAddress": {
        "type": "object",
        "title": "threeDSecureAuthenticationRequestBillingAddress",
        "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.",
        "properties": {
          "unitNumber": {
            "nullable": true,
            "type": "string",
            "description": "Numéro d’unité",
            "minLength": 1,
            "maxLength": 19,
            "example": "123A"
          },
          "streetNumber": {
            "$ref": "#/components/schemas/streetNumber"
          },
          "streetName": {
            "$ref": "#/components/schemas/streetName"
          },
          "city": {
            "$ref": "#/components/schemas/city"
          },
          "province": {
            "$ref": "#/components/schemas/province"
          },
          "postalCode": {
            "$ref": "#/components/schemas/postalCode"
          },
          "country": {
            "$ref": "#/components/schemas/country"
          }
        },
        "example": {
          "unitNumber": "123A",
          "streetNumber": "3300",
          "streetName": "Bloor Street West",
          "city": "Toronto",
          "province": "ON",
          "postalCode": "M8X 2X2",
          "country": "CA"
        },
        "required": [
          "streetNumber",
          "streetName",
          "city",
          "province",
          "postalCode",
          "country"
        ]
      },
      "paymentMethodRequest": {
        "title": "paymentMethodRequest",
        "description": "Détails du mode de paiement",
        "oneOf": [
          {
            "$ref": "#/components/schemas/paymentMethodWithId"
          },
          {
            "$ref": "#/components/schemas/paymentMethodCard"
          },
          {
            "$ref": "#/components/schemas/paymentMethodTemporaryToken"
          },
          {
            "$ref": "#/components/schemas/paymentMethodPermanentToken"
          },
          {
            "$ref": "#/components/schemas/applePayDecryptedWallet"
          },
          {
            "$ref": "#/components/schemas/applePayEncryptedWallet"
          },
          {
            "$ref": "#/components/schemas/googlePayDecryptedWallet"
          },
          {
            "$ref": "#/components/schemas/googlePayEncryptedWallet"
          }
        ],
        "discriminator": {
          "propertyName": "paymentMethodSource",
          "mapping": {
            "PAYMENT_METHOD_ID": "#/components/schemas/paymentMethodWithId",
            "CARD": "#/components/schemas/paymentMethodCard",
            "TEMPORARY_TOKEN": "#/components/schemas/paymentMethodTemporaryToken",
            "PERMANENT_TOKEN": "#/components/schemas/paymentMethodPermanentToken",
            "APPLE_PAY_ENCRYPTED": "#/components/schemas/applePayEncryptedWallet",
            "APPLE_PAY_DECRYPTED": "#/components/schemas/applePayDecryptedWallet",
            "GOOGLE_PAY_ENCRYPTED": "#/components/schemas/googlePayEncryptedWallet",
            "GOOGLE_PAY_DECRYPTED": "#/components/schemas/googlePayDecryptedWallet"
          }
        },
        "required": [
          "paymentMethodSource"
        ]
      },
      "threeDSecureMessageCategory": {
        "type": "string",
        "description": "Identifie la catégorie du message pour un cas d’utilisation spécifique.",
        "enum": [
          "PAYMENT",
          "NON_PAYMENT"
        ],
        "example": "PAYMENT"
      },
      "threeDSecureDeviceChannel": {
        "type": "string",
        "description": "Indique le type d’interface de canal utilisé pour lancer la transaction.",
        "enum": [
          "BROWSER",
          "THREE_D_SECURE_REQUESTOR_INITIATED"
        ],
        "example": "BROWSER"
      },
      "threeDSecureRequestType": {
        "type": "string",
        "nullable": true,
        "description": "Type de paiement qui a déclenché la vérification.\n  - **CARDHOLDER** : Le titulaire de la carte a initié le paiement.\n  - **RECURRING** : Paiement récurrent.\n",
        "enum": [
          "CARDHOLDER",
          "RECURRING",
          null
        ],
        "example": "CARDHOLDER"
      },
      "threeDSecureRecurringFrequency": {
        "type": "integer",
        "format": "int32",
        "description": "Indique le nombre minimum de jours entre les autorisations.",
        "minimum": 1,
        "maximum": 9999,
        "example": 1,
        "nullable": true
      },
      "threeDSecureRecurringExpiry": {
        "type": "string",
        "description": "Date à partir de laquelle aucune autre autorisation ne peut être effectuée. Il s’agit d’un champ obligatoire pour les transactions d'abonnement, nous vous suggérons de le définir à une valeur raisonnablement élevée si vous n’avez pas de date d’expiration définie.",
        "format": "date",
        "example": "2019-07-30",
        "nullable": true
      },
      "threeDSecureRequestorInitiatedIndicator": {
        "type": "string",
        "description": "Indique le type de requête 3RI. Cet élément de données fournit des informations supplémentaires à l’ACS pour déterminer la meilleure approche pour traiter une demande 3RI.",
        "enum": [
          "RECURRING_TRANSACTION",
          "INSTALMENT_TRANSACTION",
          "ADD_CARD",
          "MAINTAIN_CARD_INFORMATION",
          "ACCOUNT_VERIFICATION",
          "SPLIT_DELAYED_SHIPMENT",
          "TOP_UP",
          "MAIL_ORDER",
          "TELEPHONE_ORDER",
          "WHITELIST_STATUS_CHECK",
          "OTHER_PAYMENT",
          null
        ],
        "example": "RECURRING_TRANSACTION",
        "nullable": true
      },
      "threeDSecurePriorAuthenticationData": {
        "type": "string",
        "description": "Données qui documentent et prennent en charge un processus d’authentification spécifique. Dans la version actuelle de la spécification, cet élément de données n’est pas défini en détail, mais l’intention est que, pour chaque méthode d’authentification du demandeur 3DS, ce champ contienne des données que l’ACS peut utiliser pour vérifier le processus d’authentification. Dans les futures versions de la spécification, ces détails devraient être inclus.",
        "maxLength": 2048,
        "example": "12345678",
        "nullable": true
      },
      "threeDSecurePriorAuthenticationMethod": {
        "type": "string",
        "description": "Mécanisme utilisé par le Titulaire de la Carte pour s’authentifier préalablement auprès du Demandeur 3DS.",
        "enum": [
          "FRICTIONLESS_AUTHENTICATION_OCCURRED_BY_ACS",
          "CARDHOLDER_CHALLENGE_OCCURRED_BY_ACS",
          "AVS_VERIFIED",
          "OTHER_ISSUER_METHODS",
          null
        ],
        "example": "AVS_VERIFIED",
        "nullable": true
      },
      "threeDSecurePriorAuthenticationTimestamp": {
        "type": "string",
        "description": "Date et heure en UTC de l’authentification précédente du titulaire de la carte.",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z",
        "nullable": true
      },
      "threeDSecurePriorAuthenticationReference": {
        "type": "string",
        "description": "Cet élément de données fournit des renseignements supplémentaires au SCA pour déterminer la meilleure approche pour traiter une demande.",
        "maxLength": 36,
        "example": "12345678",
        "nullable": true
      },
      "threeDSecurePriorAuthenticationInformation": {
        "type": "object",
        "description": "Informations sur la façon dont le demandeur 3DS a authentifié le titulaire de la carte dans le cadre d’une transaction 3DS précédente.",
        "nullable": true,
        "properties": {
          "threeDSecurePriorAuthenticationData": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationData"
          },
          "threeDSecurePriorAuthenticationMethod": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationMethod"
          },
          "threeDSecurePriorAuthenticationTimestamp": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationTimestamp"
          },
          "threeDSecurePriorAuthenticationReference": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationReference"
          }
        }
      },
      "threeDSecureCompletionIndicator": {
        "type": "string",
        "description": "Indique si la recherche de carte 3DS s’est terminée avec succès.  Une recherche de carte réussie augmente les chances d’une authentification de carte sans friction.\n  - **SUCCESS** : Terminé avec succès.\n  - **FAILURE** : La recherche de carte 3DS a échoué, mais a échoué.\n  - **UNAVAILABLE** : Indisponible ou non tenté.\n",
        "enum": [
          "SUCCESS",
          "FAILURE",
          "UNAVAILABLE",
          null
        ],
        "example": "SUCCESS",
        "nullable": true
      },
      "threeDSecureChallengeRequested": {
        "type": "string",
        "description": "Indique si une demande d’authentification basée sur le navigateur est demandée pour cette transaction. La norme n’est « pas de préférence »",
        "enum": [
          "NO_PREFERENCE",
          "NO_CHALLENGE_REQUESTED",
          "CHALLENGE_REQUESTED_MANDATE",
          null
        ],
        "example": "NO_PREFERENCE",
        "nullable": true,
        "default": "NO_PREFERENCE"
      },
      "threeDSecureChallengeWindowSize": {
        "type": "string",
        "description": "Concerne le rendu du défi dans le navigateur.\n  - **X_SMALL** : 250 x 400\n  - **SMALL** : 390 x 400\n  - **MEDIUM** : 500 x 600\n  - **LARGE** : 600 x 400\n  - **FULL_SCREEN** : Plein écran\n",
        "enum": [
          "X_SMALL",
          "SMALL",
          "MEDIUM",
          "LARGE",
          "FULL_SCREEN",
          null
        ],
        "example": "FULL_SCREEN",
        "nullable": true
      },
      "browserUserAgent": {
        "type": "string",
        "description": "Contenu exact de l’en-tête de l’agent utilisateur HTTP.\nNotez que lorsque la longueur totale dépasse 2048 caractères, tronquez la partie excédentaire.\n",
        "maxLength": 2048,
        "example": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})",
        "nullable": true
      },
      "browserJavaEnabled": {
        "type": "boolean",
        "description": "Indique si Java est activé dans le navigateur",
        "example": true
      },
      "browserJavascriptEnabled": {
        "type": "boolean",
        "description": "Indique si Javascript est activé dans le navigateur",
        "example": true
      },
      "browserScreenHeight": {
        "type": "integer",
        "format": "int32",
        "description": "Définie la hauteur en pixels de l’écran du titulaire de la carte.",
        "minimum": 0,
        "maximum": 999999,
        "example": 1080
      },
      "browserScreenWidth": {
        "type": "integer",
        "format": "int32",
        "description": "Définie la largeur en pixels de l’écran du titulaire de la carte.",
        "minimum": 0,
        "maximum": 999999,
        "example": 1920
      },
      "authenticationRequest": {
        "title": "authenticationRequest",
        "description": "Utilisez la demande d’authentification 3DS pour lancer le processus de validation de la carte et de l’identité du titulaire de la carte. Cette demande prend en charge toutes les méthodes d’authentification 3DS, y compris l’authentification 3RI (3DS Requestor Initiat) et l’authentification découplée. Les champs device_channel et message_category contrôler le type de requête 3DS effectuée. Pour effectuer une authentification 3DS standard avec une expérience de navigateur de titulaire de carte, envoyez device_channel = 02 pour BRW. Le résultat de cette demande détermine si la carte prend en charge les fonctionnalités 3DS et, le cas échéant, si la transaction utilise un flux sans friction ou un flux de défi. Pour effectuer une authentification initiée par le demandeur 3DS sans expérience de navigateur du titulaire de carte, envoyez device_channel = 03 pour 3RI. Tous les champs liés à l’invite d’authentification du navigateur ne sont plus obligatoires, mais les autres champs conditionnels pour 3RI deviennent obligatoires.",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "cardLookupId": {
            "nullable": true,
            "type": "string",
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "amount": {
            "$ref": "#/components/schemas/money"
          },
          "cardholderName": {
            "$ref": "#/components/schemas/cardholderName"
          },
          "cardholderEmail": {
            "$ref": "#/components/schemas/email"
          },
          "cardholderPhoneNumber": {
            "$ref": "#/components/schemas/phoneNumber"
          },
          "shippingAddress": {
            "nullable": true,
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "billingAddress": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationBillingAddress"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodRequest"
          },
          "threeDSecureMessageCategory": {
            "$ref": "#/components/schemas/threeDSecureMessageCategory"
          },
          "threeDSecureDeviceChannel": {
            "$ref": "#/components/schemas/threeDSecureDeviceChannel"
          },
          "threeDSecureRequestType": {
            "$ref": "#/components/schemas/threeDSecureRequestType"
          },
          "threeDSecureRecurringFrequency": {
            "$ref": "#/components/schemas/threeDSecureRecurringFrequency"
          },
          "threeDSecureRecurringExpiry": {
            "$ref": "#/components/schemas/threeDSecureRecurringExpiry"
          },
          "threeDSecureRequestorInitiatedIndicator": {
            "$ref": "#/components/schemas/threeDSecureRequestorInitiatedIndicator"
          },
          "threeDSecurePriorAuthenticationInformation": {
            "$ref": "#/components/schemas/threeDSecurePriorAuthenticationInformation"
          },
          "threeDSecureNotificationUrl": {
            "nullable": true,
            "type": "string",
            "description": "URL d’encodage complète du système qui reçoit le message de réponse ou le message d’erreur.",
            "minLength": 1,
            "maxLength": 256,
            "example": "https%3A%2F%2Fdeveloper.moneris.com%2F"
          },
          "threeDSecureCompletionIndicator": {
            "$ref": "#/components/schemas/threeDSecureCompletionIndicator"
          },
          "threeDSecureChallengeRequested": {
            "$ref": "#/components/schemas/threeDSecureChallengeRequested"
          },
          "threeDSecureChallengeWindowSize": {
            "$ref": "#/components/schemas/threeDSecureChallengeWindowSize"
          },
          "browserIpAddress": {
            "description": "Adresse IP à partir de laquelle le navigateur se connecte.",
            "type": "string",
            "format": "ipv4",
            "example": "104.75.173.179",
            "nullable": true
          },
          "browserUserAgent": {
            "$ref": "#/components/schemas/browserUserAgent"
          },
          "browserJavaEnabled": {
            "$ref": "#/components/schemas/browserJavaEnabled"
          },
          "browserJavascriptEnabled": {
            "$ref": "#/components/schemas/browserJavascriptEnabled"
          },
          "browserScreenHeight": {
            "$ref": "#/components/schemas/browserScreenHeight"
          },
          "browserScreenWidth": {
            "$ref": "#/components/schemas/browserScreenWidth"
          },
          "browserLanguage": {
            "nullable": true,
            "type": "string",
            "format": "iso-639",
            "description": "Fournit le code de langue à deux lettres selon la norme ISO 639-1. \n\nPour obtenir la liste complète des codes de langue, consultez le site : https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes.\n",
            "minLength": 2,
            "maxLength": 2,
            "example": "en"
          }
        },
        "required": [
          "amount",
          "billingAddress",
          "browserIpAddress",
          "browserScreenHeight",
          "browserScreenWidth",
          "cardholderEmail",
          "cardholderName",
          "cardholderPhoneNumber",
          "idempotencyKey",
          "threeDSecureDeviceChannel",
          "threeDSecureMessageCategory"
        ]
      },
      "threeDSecureMessageType": {
        "type": "string",
        "description": "Indique le type de réponse dans le flux 3DS.",
        "nullable": true,
        "enum": [
          "AUTHENTICATION_RESPONSE_MESSAGE",
          "AUTHENTICATION_REQUEST_MESSAGE",
          "PREPARATION_RESPONSE_MESSAGE",
          "PREPARATION_REQUEST_MESSAGE",
          "CHALLENGE_RESPONSE_MESSAGE",
          "CHALLENGE_REQUEST_MESSAGE",
          "RESULTS_REQUEST_MESSAGE",
          "RESULTS_RESPONSE_MESSAGE",
          "ERROR_MESSAGE",
          null
        ],
        "example": "CHALLENGE_RESPONSE_MESSAGE"
      },
      "threeDSecureTransactionStatus": {
        "type": "string",
        "description": "Indique le résultat de la transaction.  Pour plus d’informations sur ce domaine, veuillez consulter https://docs.3dsecure.io/3dsv2/specification_220.html#attr-ARes-transStatus\n  - **AUTHENTICATED** : Authentification/vérification du compte réussie.\n  - **AUTHENTICATION_ATTEMPTED** : Tentatives de traitement effectuées ; Non authentifié/vérifié, mais une preuve de tentative d’authentification/vérification est fournie.\n  - **CHALLENGE_AUTHENTICATION_REQUIRED** : Défi requis ; Une authentification supplémentaire est requise à l’aide de 'challengeUrl' et 'challengeData'.\n  - **CHALLENGE_DECOUPLED_AUTHENTICATION_CONFIRMED** : Défi requis ; Authentification découplée confirmée. \n  - **TECHNICAL_ISSUE** : L’authentification/vérification de compte n’a pas pu être effectuée ; Problème technique ou autre.\n  - **NOT_AUTHENTICATED** : Non authentifié / Compte non vérifié ; Transaction refusée.\n  - **REJECTED** : Authentification/vérification de compte rejetée ; L’émetteur rejette l’authentification/vérification et demande que l’autorisation ne soit pas tentée.\n  - **CHALLENGE_PREFERENCE_ACKNOWLEDGED** : à titre informatif seulement ; Reconnaissance de la préférence du demandeur 3DS.\n",
        "enum": [
          "AUTHENTICATED",
          "AUTHENTICATION_ATTEMPTED",
          "CHALLENGE_AUTHENTICATION_REQUIRED",
          "CHALLENGE_DECOUPLED_AUTHENTICATION_CONFIRMED",
          "TECHNICAL_ISSUE",
          "NOT_AUTHENTICATED",
          "REJECTED",
          "CHALLENGE_PREFERENCE_ACKNOWLEDGED"
        ]
      },
      "threeDSecureTransactionStatusReason": {
        "type": "string",
        "nullable": true,
        "description": "Fournit des informations sur la raison pour laquelle le champ Statut de la transaction a la valeur spécifiée.\n",
        "example": "01 - Card authentication failed"
      },
      "threeDSecureChallengeUrl": {
        "type": "string",
        "description": "Si le transStatus est « C », ce champ sera rempli avec l’URL pour POST le challengeData afin de créer l’écran de défi du titulaire de carte",
        "format": "uri",
        "minLength": 1,
        "maxLength": 2048,
        "example": "https://developer.moneris.com/",
        "nullable": true
      },
      "threeDSecureChallengeData": {
        "type": "string",
        "description": "Chaîne qui doit être postée sur l’URL du défi pour créer l’écran de défi",
        "minLength": 1,
        "maxLength": 2048,
        "nullable": true
      },
      "threeDSecureChallengeCompletionIndicator": {
        "type": "string",
        "nullable": true,
        "description": "Indique si le défi a été terminé. Ceci est renvoyé dans la demande de recherche CAVV.\n",
        "enum": [
          "YES",
          "NO",
          null
        ]
      },
      "threeDSecureCardholderInformation": {
        "nullable": true,
        "type": "string",
        "description": "Texte fourni par l’ACS/l’émetteur au titulaire de la carte lors d’une transaction sans friction ou découplée. L’émetteur peut fournir des informations au titulaire de la carte.",
        "maxLength": 128,
        "example": "Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx."
      },
      "threeDSecureAuthenticationType": {
        "type": "string",
        "nullable": true,
        "description": "Indique le type de méthode d’authentification que l’émetteur utilisera pour défier le titulaire de la carte, que ce soit dans le message ARes ou ce qui a été utilisé par l’ACS dans le message RReq.",
        "enum": [
          "STATIC",
          "DYNAMIC",
          "OUT_OF_BAND",
          "DECOUPLED",
          null
        ],
        "example": "DYNAMIC"
      },
      "threeDSecureAuthenticationTimestamp": {
        "type": "string",
        "description": "Date et heure en UTC de l’authentification du titulaire de la carte.",
        "format": "date-time",
        "example": "2019-07-30T06:43:40.252Z",
        "nullable": true
      },
      "threeDSecureAuthentication": {
        "title": "authenticationResponse",
        "type": "object",
        "properties": {
          "threeDSecureAuthenticationId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "cardLookupId": {
            "nullable": true,
            "type": "string",
            "description": "Utilisé pour identifier les ressources API qui peuvent être nécessaires pour les transactions ultérieures futures ; c’est-à-dire les remboursements, les corrections, les achèvements, les annulations, etc.",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30,
            "example": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "threeDSecureMessageType": {
            "$ref": "#/components/schemas/threeDSecureMessageType"
          },
          "threeDSecureTransactionStatus": {
            "$ref": "#/components/schemas/threeDSecureTransactionStatus"
          },
          "threeDSecureTransactionStatusReason": {
            "$ref": "#/components/schemas/threeDSecureTransactionStatusReason"
          },
          "ecommerceIndicator": {
            "$ref": "#/components/schemas/ecommerceIndicator"
          },
          "threeDSecureChallengeUrl": {
            "$ref": "#/components/schemas/threeDSecureChallengeUrl"
          },
          "threeDSecureChallengeData": {
            "$ref": "#/components/schemas/threeDSecureChallengeData"
          },
          "threeDSecureAuthenticationValue": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationValue"
          },
          "threeDSecureChallengeCompletionIndicator": {
            "$ref": "#/components/schemas/threeDSecureChallengeCompletionIndicator"
          },
          "threeDSecureServerTransactionId": {
            "nullable": true,
            "type": "string",
            "description": "Indique les informations requises lors de l’envoi d’une transaction 3-D Secure 2.0+. \n\nCes données sont obtenues à partir d’une transaction de demande de recherche CAVV ou de demande d’authentification MPI 3DS.\n",
            "format": "uuid",
            "example": "ad9b0eda-bf9b-4288-b188-9467993603e1"
          },
          "threeDSecureDirectoryServerTransactionId": {
            "nullable": true,
            "type": "string",
            "description": "Identificateur de transaction unique et universel attribué par le serveur d’annuaire 3DS (DS) pour identifier une transaction unique.",
            "format": "uuid",
            "example": "ad9b0eda-bf9b-4288-b188-9467993603e1"
          },
          "threeDSecureAccessControlServerTransactionId": {
            "nullable": true,
            "type": "string",
            "description": "Obligatoire en cas d’envoi d’une transaction 3-D Secure 2.0+. Les données sont obtenues à partir d’une transaction de demande de recherche Cavv ou de demande d’authentification MPI 3DS",
            "format": "uuid",
            "example": "ad9b0eda-bf9b-4288-b188-9467993603e1"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethod"
          },
          "threeDSecureCardholderInformation": {
            "$ref": "#/components/schemas/threeDSecureCardholderInformation"
          },
          "threeDSecureVersion": {
            "$ref": "#/components/schemas/threeDSecureVersion"
          },
          "threeDSecureAuthenticationType": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationType"
          },
          "threeDSecureAuthenticationTimestamp": {
            "$ref": "#/components/schemas/threeDSecureAuthenticationTimestamp"
          }
        },
        "required": [
          "threeDSecureAuthenticationId",
          "merchantId",
          "threeDSecureTransactionStatus",
          "ecommerceIndicator",
          "paymentMethod",
          "threeDSecureVersion"
        ]
      },
      "threeDSecureChallengeResponseData": {
        "type": "string",
        "description": "Fournit les données de réponse du défi.",
        "example": "TBD"
      },
      "lookupRequest": {
        "title": "challengeFlowRequest",
        "description": "L’objectif du flux 3-D Secure est de vérifier que le véritable titulaire de la carte fait partie de l’autorisation. Le flux d’authentification est utilisé pour présenter un moyen d’authentifier le titulaire de la carte à l’aide, par exemple, de l’OTP ou d’une méthode d’identification fédérée.",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "threeDSecureChallengeResponseData": {
            "$ref": "#/components/schemas/threeDSecureChallengeResponseData"
          }
        },
        "required": [
          "idempotencyKey",
          "threeDSecureChallengeResponseData"
        ]
      },
      "threeDSecureNotificationUrl": {
        "type": "string",
        "description": "URL d’encodage complète du système qui reçoit le message de réponse ou le message d’erreur.",
        "minLength": 1,
        "maxLength": 256,
        "example": "https%3A%2F%2Fdeveloper.moneris.com%2F"
      },
      "cardLookupRequest": {
        "title": "cardLookupRequest",
        "description": "La demande card_lookup vérifie l’applicabilité de 3DS sur la carte et renvoie la version 3DS prise en charge par la carte. Il renvoie également l’URL de la méthode 3DS et les données de la méthode 3DS pour l’envoi d’un POST d’empreinte d’appareil à l’ACS de l’émetteur.",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodRequest"
          },
          "threeDSecureNotificationUrl": {
            "$ref": "#/components/schemas/threeDSecureNotificationUrl"
          }
        },
        "required": [
          "idempotencyKey",
          "paymentMethod",
          "threeDSecureNotificationUrl"
        ]
      },
      "threeDSecureMethodUrl": {
        "type": "string",
        "format": "uri",
        "description": "Renvoie l’URL de l’étape de prise d’empreinte de l’appareil.",
        "minLength": 1,
        "maxLength": 256,
        "example": "https://developer.moneris.com/"
      },
      "threeDSecureMethodData": {
        "type": "string",
        "description": "Données qui doivent être publiées sur l’URL de la méthode 3DS pour l’étape de prise d’empreinte de l’appareil.",
        "minLength": 1,
        "maxLength": 254
      },
      "cardLookup": {
        "title": "cardLookup",
        "type": "object",
        "properties": {
          "cardLookupId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "threeDSecureServerTransactionId": {
            "$ref": "#/components/schemas/threeDSecureServerTransactionId"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethod"
          },
          "threeDSecureVersion": {
            "$ref": "#/components/schemas/threeDSecureVersion"
          },
          "threeDSecureMethodUrl": {
            "$ref": "#/components/schemas/threeDSecureMethodUrl"
          },
          "threeDSecureMethodData": {
            "$ref": "#/components/schemas/threeDSecureMethodData"
          }
        },
        "required": [
          "cardLookupId",
          "merchantId",
          "paymentMethod",
          "threeDSecureServerTransactionId",
          "threeDSecureVersion",
          "threeDSecureMethodUrl",
          "threeDSecureMethodData"
        ]
      },
      "kountResult": {
        "description": "Réponse de décision automatique",
        "type": "string",
        "enum": [
          "APPROVED",
          "DECLINED",
          "UNDER_REVIEW"
        ]
      },
      "fraudScore": {
        "description": "Score de risque final renvoyé par le système Kount",
        "type": "integer",
        "format": "int32",
        "maxLength": 3,
        "example": 99,
        "nullable": true
      },
      "kountTransactionId": {
        "description": "Kount Transaction ID",
        "type": "string",
        "maxLength": 12,
        "example": "123456789012"
      },
      "kountTriggeredCounter": {
        "type": "object",
        "description": "Compteur Kount qui s’est déclenché",
        "properties": {
          "name": {
            "type": "string",
            "description": "Nom du compteur",
            "maxLength": 64
          },
          "value": {
            "type": "number",
            "format": "double",
            "description": "Somme du nombre de fois qu’un compteur a été déclenché.",
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "kountPiercedAddress": {
        "type": "object",
        "description": "Détails de l’adresse IP percée.",
        "nullable": true,
        "properties": {
          "latitude": {
            "description": "Latitude de l’adresse IP percée",
            "type": "number",
            "format": "double",
            "example": -90.1922,
            "nullable": true
          },
          "longitude": {
            "description": "Longitude de l’adresse IP percée",
            "type": "number",
            "format": "double",
            "example": 38.6312,
            "nullable": true
          },
          "city": {
            "nullable": true,
            "type": "string",
            "description": "Identifie la ville.\n",
            "minLength": 1,
            "maxLength": 50,
            "example": "Toronto"
          },
          "region": {
            "description": "État/région de l’adresse IP percée",
            "type": "string",
            "example": "Ontario",
            "maxLength": 255,
            "nullable": true
          },
          "owner": {
            "description": "Propriétaire de l’adresse IP percée ou du bloc d’adresses",
            "type": "string",
            "maxLength": 64,
            "nullable": true
          },
          "country": {
            "nullable": true,
            "type": "string",
            "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
            "minLength": 2,
            "maxLength": 2,
            "example": "CA",
            "format": "iso-3166"
          }
        }
      },
      "kountTriggeredRule": {
        "type": "object",
        "description": "La règle de Kount qui a été déclenchée",
        "properties": {
          "id": {
            "description": "ID de règle associé aux règles créées par le marchand",
            "type": "integer",
            "format": "int64",
            "example": 8
          },
          "description": {
            "description": "Descriptions de règle associées à l’Id",
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "example": "Rule description example"
          }
        }
      },
      "kountInfo": {
        "description": "Objet des paramètres de réponse de Kount",
        "type": "object",
        "properties": {
          "browser": {
            "description": "Navigateur Web",
            "type": "string",
            "maxLength": 64,
            "example": "Google Chrome",
            "nullable": true
          },
          "cardBrand": {
            "nullable": true,
            "type": "string",
            "description": "Affiche le nom de la marque de la carte associé au type de carte.",
            "enum": [
              "MASTERCARD",
              "VISA",
              "AMERICAN_EXPRESS",
              "JCB",
              "DISCOVER",
              "INTERAC",
              "UNIONPAY",
              "GIFT_MONERIS",
              "GIFT_DATACANDY",
              "GIFT_GIVEX",
              null
            ],
            "example": "MASTERCARD"
          },
          "associatedCardCount": {
            "description": "Nombre total de cartes de crédit associées à persona tel que vu par Kount",
            "type": "integer",
            "format": "int32",
            "example": 3,
            "nullable": true
          },
          "cookiesEnabled": {
            "description": "Un indicateur pour indiquer si les cookies sont activés ou non sur l’appareil qui passe une commande",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "countersTriggered": {
            "type": "array",
            "description": "Compteurs déclenchés lors de l’évaluation des règles",
            "items": {
              "$ref": "#/components/schemas/kountTriggeredCounter"
            }
          },
          "country": {
            "description": "Code de pays ISO à deux caractères associé à l’appareil physique",
            "nullable": true,
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "example": "CA",
            "format": "iso-3166"
          },
          "deviceFirstSeenAt": {
            "description": "Date de la première apparition de l’appareil",
            "nullable": true,
            "type": "string",
            "format": "date",
            "example": "2019-07-30"
          },
          "deviceLayers": {
            "description": "5 couches de l’appareil qui comprennent l’empreinte digitale de l’appareil, représentant le système d’exploitation, le navigateur, Javascript, les cookies et les paramètres Flash",
            "type": "string",
            "maxLength": 55,
            "minLength": 55,
            "nullable": true
          },
          "deviceCount": {
            "description": "Nombre total d’appareils uniques associés à persona tel que vu par Kount",
            "type": "integer",
            "format": "int32",
            "example": 2,
            "nullable": true
          },
          "deviceScreenResolution": {
            "description": "Résolution de l’écran de l’appareil",
            "type": "string",
            "maxLength": 10,
            "example": "1920x1080",
            "nullable": true
          },
          "emailCount": {
            "description": "Nombre total d’adresses e-mail uniques associées à persona telles que vues par Kount",
            "type": "integer",
            "format": "int32",
            "example": 3,
            "nullable": true
          },
          "errorCount": {
            "description": "Nombre d’erreurs générées par la requête Kount",
            "type": "integer",
            "format": "int32",
            "example": 3,
            "nullable": true
          },
          "errorCode": {
            "description": "Code d’erreur affiché dans la réponse du service d’enquête sur les risques",
            "type": "string",
            "maxLength": 4,
            "example": "1080",
            "nullable": true
          },
          "kountFingerprint": {
            "description": "L’empreinte digitale unique de l’appareil qui passe la commande",
            "type": "string",
            "maxLength": 32,
            "example": "123456789h123456789p123456789g12",
            "nullable": true
          },
          "flashEnabled": {
            "description": "Un indicateur pour indiquer si Flash est activé sur l’appareil qui passe la commande",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "riskiestAssociatedCountry": {
            "description": "Pays associé au persona avec la plus forte probabilité de fraude\nFait référence au champ GEOX de Kount.\n",
            "nullable": true,
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "example": "CA",
            "format": "iso-3166"
          },
          "userDefinedHomeCountry": {
            "description": "Pays d’origine de l’utilisateur défini par le propriétaire de l’appareil dans le panneau de configuration de l’appareil\nFait référence à la HTTP_COUNTRY de Kount\n",
            "nullable": true,
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "example": "CA",
            "format": "iso-3166"
          },
          "proxyAddress": {
            "description": "Adresse IP du proxy",
            "type": "string",
            "format": "ipv4",
            "example": "104.75.173.179",
            "nullable": true
          },
          "javascriptEnabled": {
            "description": "Un indicateur pour indiquer si JavaScript est activé sur l’appareil",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "deviceDataCollectedByDataCollector": {
            "description": "Indicateur indiquant si les données de l’appareil ont été collectées ou non par le processus de collecte de données",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "knowYourCustomerFlag": {
            "description": "Indicateur de connaissance du client",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "deviceLanguage": {
            "description": "Langue ISO à deux caractères définie par le propriétaire de l’appareil dans le panneau de configuration de l’appareil",
            "nullable": true,
            "type": "string",
            "format": "iso-639",
            "minLength": 2,
            "maxLength": 2,
            "example": "en"
          },
          "localTime": {
            "description": "L’heure locale que le propriétaire de l’appareil a définie dans le panneau de configuration de l’appareil",
            "nullable": true,
            "type": "string",
            "format": "date-time",
            "example": "2019-07-30T06:43:40.252Z"
          },
          "isMobileDevice": {
            "description": "Indicateur pour indiquer si l’appareil qui passe la commande est un appareil mobile",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "usesMobileForwarder": {
            "description": "Si l’appareil est mobile, utilise-t-il un transitaire pour traiter le service des transporteurs",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "mobileType": {
            "description": "Le type d’appareil mobile, p. ex., iPhone, Android, Blackberry, iPad, etc.",
            "type": "string",
            "maxLength": 32,
            "example": "iPhone",
            "nullable": true
          },
          "kountNetwork": {
            "description": "Type de réseau le plus risqué associé à un persona au cours des 14 derniers jours :",
            "type": "string",
            "nullable": true,
            "enum": [
              "ANONYMOUS",
              "HIGH_SCHOOL",
              "LIBRARY",
              "NORMAL",
              "OPEN_PROXY",
              "PRISON",
              "SATELLITE",
              null
            ]
          },
          "mode": {
            "nullable": true,
            "description": "Spécifie le type de mode de publication du service d’interrogation des risques\n\nModes de service d’interrogation des risques\n\nLes modes sont utilisés pour spécifier le type de données soumises à Kount.\nNotez que TOUS LES NOMS DE CHAMP pour un appel RIS doivent être en MAJUSCULES. Il ne peut pas s’agir d’autres combinaisons de cas\ntels que sess, Merc, mOdE. Toutefois, les valeurs des champs peuvent être mixtes avec des casses, telles que\nSESS=UpperMixedCaseSessID95628.\n- REQUÊTE = Mode Q\n  Requêtes initiales adressées par le commerçant à Kount qui ne proviennent pas d’un centre d’appels\n  environnement.\n- MISE À JOUR = Mode U\n  Mettre à jour l’appel à Kount, n’entraîne pas de réévaluation de la transaction mais mettra à jour ce qui est affiché\n  dans la console Web de l’agent. Cet appel de mise à jour n’est pas pris en compte dans le nombre de transactions RIS\n  achetées. Seuls certains champs peuvent être mis à jour avec les appels MODE=U. Le champ PTYP ne peut être mis à jour que si\n  le message initial à Kount était PTYP=NONE\n",
            "type": "string",
            "enum": [
              "QUERY",
              "UPDATE",
              null
            ]
          },
          "operatingSystem": {
            "description": "Système d’exploitation de l’appareil",
            "type": "string",
            "maxLength": 64,
            "example": "macOS",
            "nullable": true
          },
          "pcRemoteEnabled": {
            "description": "Indicateur indiquant si l’appareil est activé pour utiliser le logiciel à distance du PC",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "proxyEnabled": {
            "description": "Indicateur indiquant si un serveur proxy est détecté ou non",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "piercedAddress": {
            "$ref": "#/components/schemas/kountPiercedAddress"
          },
          "reasonCode": {
            "description": "Code motif associé à l’action de la règle",
            "type": "string",
            "maxLength": 16,
            "example": "Invalid Data",
            "nullable": true
          },
          "region": {
            "description": "Région associée à l’emplacement de l’appareil",
            "type": "string",
            "maxLength": 2,
            "example": "CA",
            "nullable": true
          },
          "riskiestAssociatedRegion": {
            "description": "Indique l’emplacement géographique le plus risqué associé au Persona. \nFait référence au GEOX de Kount.\n",
            "type": "string",
            "maxLength": 2,
            "example": "CA",
            "nullable": true
          },
          "rulesTriggered": {
            "type": "array",
            "description": "Règles déclenchées par courrier à Kount",
            "items": {
              "$ref": "#/components/schemas/kountTriggeredRule"
            }
          },
          "sessionId": {
            "nullable": true,
            "description": "ID de session unique ; Doit être unique sur une période de 30 jours",
            "type": "string",
            "maxLength": 32,
            "example": "xjudq804i1049jkjakdad"
          },
          "websiteId": {
            "nullable": true,
            "description": "Identifiant du site Web d’où provient la commande",
            "type": "string",
            "maxLength": 8,
            "example": "DEFAULT"
          },
          "timezone": {
            "description": "Le fuseau horaire de l’appareil ; Au format ISO de +|–hh:mm",
            "type": "string",
            "maxLength": 6,
            "example": "-04:00",
            "nullable": true
          },
          "deviceUserAgent": {
            "nullable": true,
            "type": "string",
            "description": "Contenu exact de l’en-tête de l’agent utilisateur HTTP.\nNotez que lorsque la longueur totale dépasse 2048 caractères, tronquez la partie excédentaire.\n",
            "maxLength": 2048,
            "example": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})"
          },
          "velocity": {
            "description": "Quantité de commandes vues par persona au cours des 14 derniers jours",
            "type": "integer",
            "format": "int64",
            "example": 8,
            "nullable": true
          },
          "maximumVelocity": {
            "description": "Quantité de commandes de persona dans la fenêtre la plus active de 6 heures au cours des 14 derniers jours ; payment_response champ doit être égal à « A »",
            "type": "integer",
            "format": "int64",
            "example": 8,
            "nullable": true
          },
          "kountVersion": {
            "description": "Spécifie la version du système Kount utilisé",
            "type": "string",
            "maxLength": 4,
            "example": "1.0",
            "nullable": true
          },
          "deviceVoiceActivated": {
            "description": "S’il s’agit d’un appareil mobile, indicateur indiquant si l’appareil est activé par la voix",
            "type": "boolean",
            "example": true,
            "nullable": true
          },
          "warningCount": {
            "description": "Nombre d’avertissements générés par le service d’information Kount",
            "type": "integer",
            "format": "int32",
            "example": 8,
            "nullable": true
          },
          "warningCode": {
            "description": "Code d’avertissement affiché dans la réponse du service d’enquête sur les risques",
            "type": "string",
            "maxLength": 4,
            "example": "180",
            "nullable": true
          },
          "warningDetail": {
            "description": "Détails de l’avertissement",
            "type": "string",
            "nullable": true
          }
        }
      },
      "kountInquiry": {
        "title": "kountInquiry",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "kountInquiryId": {
                "$ref": "#/components/schemas/resourceId"
              },
              "orderId": {
                "$ref": "#/components/schemas/orderId"
              },
              "kountResult": {
                "$ref": "#/components/schemas/kountResult"
              },
              "fraudScore": {
                "$ref": "#/components/schemas/fraudScore"
              },
              "kountTransactionId": {
                "$ref": "#/components/schemas/kountTransactionId"
              }
            },
            "required": [
              "kountInquiryId",
              "kountResult",
              "kountTransactionId"
            ]
          },
          {
            "$ref": "#/components/schemas/kountInfo"
          }
        ],
        "required": [
          "orderId",
          "kountTransactionId",
          "kountResult"
        ]
      },
      "kountInquiryList": {
        "title": "kountInquiryList",
        "type": "object",
        "properties": {
          "data": {
            "description": "Liste des demandes de renseignements Kount.",
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/kountInquiry"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        },
        "required": [
          "data"
        ]
      },
      "kountAccountId": {
        "description": "Identifiant local à 6 chiffres utilisé par le commerçant pour identifier la demande d’enquête Kount",
        "type": "string",
        "minLength": 6,
        "maxLength": 6,
        "example": "760000"
      },
      "kountApiKey": {
        "description": "La clé API associée à l’identifiant du marchand Kount",
        "type": "string",
        "maxLength": 256,
        "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI3NjAwMDAiLCJhdWQiOiJLb3VudC4xIiwiaWF0IjoxNTU4MDQwODQ5LCJzY3AiOnsia2EiOm51bGwsImtjIjpmYWxzZSwiYXBpIjp0cnVlLCJyaXMiOnRydWV9fQ.y3_2yzd11-Y_F6_xzVsXI-NO1a7P6ldMjDnKzl5yBko"
      },
      "originatedFromCallCenter": {
        "description": "Fait référence à l’indicateur de centre d’appels de Kount. \n\nIndicateur indiquant si la demande d’interrogation de risque provient d’un environnement de centre d’appels Si les agents du service clientèle accèdent à une page de saisie de commande distincte qui ne collecte pas de données iframe : lors de l’envoi de la demande de kount_inquiry, définissez call_center_ind sur Y Si les agents du service clientèle accèdent à la même page de saisie de commande que le client :  Lors de l’envoi de la demande kount_inquiry, définissez call_center_ind sur N Si l’appel du service d’enquête sur les risques ne provient pas d’un environnement de centre d’appels, définissez call_center_ind sur N\n\nVrai pour OUI, Faux pour NON\n",
        "type": "boolean"
      },
      "sessionId": {
        "description": "ID de session unique ; Doit être unique sur une période de 30 jours",
        "type": "string",
        "maxLength": 32,
        "example": "xjudq804i1049jkjakdad"
      },
      "websiteId": {
        "description": "Identifiant du site Web d’où provient la commande",
        "type": "string",
        "maxLength": 8,
        "example": "DEFAULT"
      },
      "kountPaymentId": {
        "title": "Kount Payment Id",
        "type": "object",
        "description": "ID de paiement",
        "properties": {
          "paymentId": {
            "$ref": "#/components/schemas/paymentId"
          }
        },
        "required": [
          "paymentId"
        ]
      },
      "kountValidationId": {
        "title": "Kount Validation Id",
        "type": "object",
        "description": "Validation Id",
        "properties": {
          "validationId": {
            "$ref": "#/components/schemas/resourceId"
          },
          "amount": {
            "$ref": "#/components/schemas/money"
          }
        },
        "required": [
          "validationId",
          "amount"
        ]
      },
      "paymentToken": {
        "description": "Jeton de paiement soumis par le commerçant pour la commande (carte de crédit, identifiant du payeur, itinéraire/transit, MICR et numéro de compte).\n\nSi paymentType est défini sur NOCE, la valeur paymentToken doit être laissée vide (NULL).\n\nSi les renseignements de la carte de crédit ne sont pas disponibles et que la tokénisation Moneris est utilisée pour traiter le paiement, définissez paymentType = CARD et envoyez le jeton dans le champ paymentToken.\n",
        "type": "string",
        "maxLength": 32,
        "example": "4242424242424242"
      },
      "paymentType": {
        "description": "Type de paiement soumis par le marchand. \n\nSi les renseignements de la carte de crédit ne sont pas disponibles et que la tokénisation Moneris est utilisée pour traiter le paiement, définissez paymentType = CARD et envoyez le jeton dans le champ paymentToken.\n",
        "type": "string",
        "enum": [
          "APPLE_PAY",
          "CARD",
          "PAYPAL",
          "CHECK",
          "NONE",
          "GREEN_DOT_MONEY_PACK",
          "BILL_ME_LATER",
          "GIFT_CARD",
          "BPAY",
          "NETELLER",
          "GIROPAY",
          "ELV",
          "MERCADE_PAGO",
          "SINGLE_EURO_PAYMENT_AREA",
          "INTERAC",
          "CARTE_BLEUE",
          "POLI",
          "SKRILL_MONEY_BOOKERS",
          "SOFORT"
        ]
      },
      "kountPaymentData": {
        "title": "Kount Payment Data",
        "description": "Données de paiement",
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/money"
          },
          "customerId": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client",
            "example": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "pattern": "^[A-Za-z]{2}\\d{2}[A-Za-z0-9]{26}$",
            "minLength": 30,
            "maxLength": 30
          },
          "customerReference": {
            "nullable": true,
            "type": "string",
            "description": "Identification unique du client. Il peut s'agir d'un identifiant généré à partir d'un identifiant défini par le marchand.",
            "example": "911677-212",
            "minLength": 1,
            "maxLength": 50
          },
          "lastFour": {
            "nullable": true,
            "type": "string",
            "description": "Les 4 derniers chiffres de la carte.",
            "minLength": 4,
            "maxLength": 4,
            "example": "1234"
          },
          "paymentToken": {
            "$ref": "#/components/schemas/paymentToken"
          },
          "paymentType": {
            "$ref": "#/components/schemas/paymentType"
          }
        },
        "required": [
          "paymentToken",
          "paymentType",
          "amount"
        ]
      },
      "kountPaymentDetails": {
        "title": "kountPaymentDetails",
        "description": "Données de paiement",
        "oneOf": [
          {
            "$ref": "#/components/schemas/kountPaymentId"
          },
          {
            "$ref": "#/components/schemas/kountValidationId"
          },
          {
            "$ref": "#/components/schemas/kountPaymentData"
          }
        ]
      },
      "itemId": {
        "type": "string",
        "maxLength": 255,
        "description": "Identificateur unique de l’élément.",
        "example": "e2ab873e-b295-11e9-9c02"
      },
      "itemType": {
        "type": "string",
        "description": "Description générale d’un élément",
        "maxLength": 255,
        "example": "Phone"
      },
      "kountProductItem": {
        "type": "object",
        "description": "Partie de l’article de la transaction",
        "properties": {
          "itemId": {
            "$ref": "#/components/schemas/itemId"
          },
          "itemType": {
            "$ref": "#/components/schemas/itemType"
          },
          "itemQuantity": {
            "type": "integer",
            "format": "int32",
            "description": "Quantité facturée pour ce poste.",
            "minimum": 0,
            "maximum": 999999999,
            "example": 82,
            "nullable": true
          },
          "itemName": {
            "nullable": true,
            "type": "string",
            "description": "Nom de l’élément",
            "minLength": 1,
            "maxLength": 50,
            "example": "Canned Food"
          },
          "itemAmount": {
            "title": "kountProductItemamount",
            "nullable": true,
            "type": "object",
            "description": "Contient le montant de l’article individuel qui est normalement calculé en multipliant le prix par la quantité. La valeur doit être exprimée en centimes. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 15000,
              "currency": "CAD"
            }
          }
        },
        "required": [
          "itemId",
          "itemType"
        ]
      },
      "automaticNumberId": {
        "description": "Identification automatique du numéro (ANI) soumise avec la commande Si l’ANI ne peut pas être déterminé, le commerçant doit passer 0123456789 en tant qu’ANID REMARQUE : Ce champ n’est valide que pour les demandes de téléphone à Web où les agents du service à la clientèle accèdent à une page de saisie de commande distincte qui ne collecte pas de données iframe.",
        "type": "string",
        "maxLength": 32,
        "example": "0123456789",
        "nullable": true
      },
      "gender": {
        "type": "string",
        "nullable": true,
        "description": "Le sexe d’un individu",
        "enum": [
          "MALE",
          "FEMALE",
          null
        ]
      },
      "fullName": {
        "type": "string",
        "description": "Nom complet du client",
        "minLength": 1,
        "maxLength": 64,
        "example": "John Doe",
        "nullable": true
      },
      "financialOrderId": {
        "description": "Identifiant unique pour les transactions chez Kount",
        "type": "string",
        "maxLength": 32,
        "example": "nqa-finorderid-1",
        "nullable": true
      },
      "shippingType": {
        "description": "Type d’expédition. La nomenclature suivante est attendue pour les types d’expédition à transmettre à Kount. REMARQUE :Ces trois attributs peuvent être utilisés pour transmettre des données d’attributs personnalisés si vous souhaitez corréler certaines données avec la réponse renvoyée",
        "type": "string",
        "nullable": true,
        "enum": [
          "SAME_DAY",
          "NEXT_DAY",
          "SECOND_DAY",
          "STANDARD",
          null
        ]
      },
      "kountInquiryRequest": {
        "title": "kountInquiryRequest",
        "type": "object",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "kountAccountId": {
            "$ref": "#/components/schemas/kountAccountId"
          },
          "kountApiKey": {
            "$ref": "#/components/schemas/kountApiKey"
          },
          "originatedFromCallCenter": {
            "$ref": "#/components/schemas/originatedFromCallCenter"
          },
          "sessionId": {
            "$ref": "#/components/schemas/sessionId"
          },
          "websiteId": {
            "$ref": "#/components/schemas/websiteId"
          },
          "paymentDetails": {
            "$ref": "#/components/schemas/kountPaymentDetails"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "products": {
            "type": "array",
            "description": "Liste des articles du produit faisant partie de la transaction",
            "items": {
              "$ref": "#/components/schemas/kountProductItem"
            }
          },
          "automaticNumberId": {
            "$ref": "#/components/schemas/automaticNumberId"
          },
          "billingAddress": {
            "nullable": true,
            "title": "kountBillingAddress",
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "shippingAddress": {
            "nullable": true,
            "title": "kountShippingAddress",
            "type": "object",
            "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
            "properties": {
              "unitNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro d’unité",
                "minLength": 1,
                "maxLength": 19,
                "example": "123A"
              },
              "streetNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de rue",
                "minLength": 1,
                "maxLength": 19,
                "example": "3300"
              },
              "streetName": {
                "nullable": true,
                "type": "string",
                "description": "Nom de la rue",
                "minLength": 1,
                "maxLength": 100,
                "example": "Bloor"
              },
              "city": {
                "nullable": true,
                "type": "string",
                "description": "Identifie la ville.\n",
                "minLength": 1,
                "maxLength": 50,
                "example": "Toronto"
              },
              "province": {
                "nullable": true,
                "type": "string",
                "description": "Code ISO 3166-2 de la province ou de l’État ",
                "minLength": 1,
                "maxLength": 3,
                "format": "iso-3166-2",
                "example": "ON"
              },
              "postalCode": {
                "nullable": true,
                "type": "string",
                "description": "Code postal",
                "minLength": 1,
                "maxLength": 30,
                "example": "M8X 2X2"
              },
              "country": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
                "minLength": 2,
                "maxLength": 2,
                "example": "CA",
                "format": "iso-3166"
              }
            },
            "example": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            }
          },
          "dateOfBirth": {
            "description": "Date de naissance.",
            "nullable": true,
            "type": "string",
            "format": "date",
            "example": "2019-07-30"
          },
          "timestamp": {
            "description": "Il s'agit de l'horodatage associé à la création d'un utilisateur au sein du service Kount.",
            "nullable": true,
            "type": "string",
            "format": "date-time",
            "example": "2019-07-30T06:43:40.252Z"
          },
          "gender": {
            "$ref": "#/components/schemas/gender"
          },
          "customerName": {
            "$ref": "#/components/schemas/fullName"
          },
          "financialOrderId": {
            "$ref": "#/components/schemas/financialOrderId"
          },
          "shippingType": {
            "$ref": "#/components/schemas/shippingType"
          },
          "ipv4": {
            "nullable": false,
            "type": "string",
            "format": "ipv4",
            "description": "Protocole Internet version 4 (IPv4).",
            "example": "104.75.173.179"
          },
          "customData": {
            "$ref": "#/components/schemas/customData"
          }
        },
        "required": [
          "idempotencyKey",
          "kountAccountId",
          "kountApiKey",
          "paymentDetails",
          "originatedFromCallCenter",
          "sessionId",
          "websiteId",
          "ipv4",
          "email",
          "products"
        ]
      },
      "kountRefundStatus": {
        "description": "Statut de remboursement/rétrofacturation. R - Remboursement, C - Rétrofacturation",
        "type": "string",
        "nullable": true,
        "enum": [
          "REFUND",
          "CHARGEBACK",
          null
        ]
      },
      "evaluateKountResult": {
        "description": "une réévaluation complète sera effectuée avec Kount. La valeur par défaut est false.",
        "type": "boolean",
        "default": false,
        "example": false
      },
      "kountAssertRequest": {
        "title": "kountAssertRequest",
        "type": "object",
        "properties": {
          "kountAccountId": {
            "$ref": "#/components/schemas/kountAccountId"
          },
          "kountApiKey": {
            "$ref": "#/components/schemas/kountApiKey"
          },
          "paymentDetails": {
            "title": "kountAssertPaymentDetails",
            "description": "Kount Assert Payment Data",
            "oneOf": [
              {
                "$ref": "#/components/schemas/kountPaymentId"
              },
              {
                "type": "object",
                "properties": {
                  "validationId": {
                    "$ref": "#/components/schemas/resourceId"
                  }
                },
                "required": [
                  "validationId"
                ]
              },
              {
                "type": "object",
                "title": "Kount Assert Payment Data",
                "description": "Kount Assert Payment Data",
                "properties": {
                  "lastFour": {
                    "nullable": true,
                    "type": "string",
                    "description": "Les 4 derniers chiffres de la carte.",
                    "minLength": 4,
                    "maxLength": 4,
                    "example": "1234"
                  },
                  "paymentToken": {
                    "nullable": true,
                    "description": "Jeton de paiement soumis par le commerçant pour la commande (carte de crédit, identifiant du payeur, itinéraire/transit, MICR et numéro de compte).\n\nSi paymentType est défini sur NOCE, la valeur paymentToken doit être laissée vide (NULL).\n\nSi les renseignements de la carte de crédit ne sont pas disponibles et que la tokénisation Moneris est utilisée pour traiter le paiement, définissez paymentType = CARD et envoyez le jeton dans le champ paymentToken.\n",
                    "type": "string",
                    "maxLength": 32,
                    "example": "4242424242424242"
                  },
                  "paymentType": {
                    "$ref": "#/components/schemas/paymentType"
                  }
                },
                "required": [
                  "paymentType"
                ]
              }
            ]
          },
          "financialOrderId": {
            "nullable": true,
            "description": "Identifiant unique pour les transactions chez Kount",
            "type": "string",
            "maxLength": 32,
            "example": "nqa-finorderid-1"
          },
          "refundStatus": {
            "$ref": "#/components/schemas/kountRefundStatus"
          },
          "evaluateKountResult": {
            "$ref": "#/components/schemas/evaluateKountResult"
          }
        },
        "required": [
          "kountAccountId",
          "kountApiKey"
        ]
      },
      "installmentEligibilityRequest": {
        "type": "object",
        "description": "Demande d'éligibilité au versement.",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "orderId": {
            "$ref": "#/components/schemas/orderId"
          },
          "amount": {
            "$ref": "#/components/schemas/money"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethodRequest"
          }
        },
        "required": [
          "idempotencyKey",
          "amount",
          "paymentMethod"
        ]
      },
      "installmentName": {
        "type": "string",
        "description": "Nom du plan de versement. Cela peut ne pas être unique.",
        "example": "Plan6M"
      },
      "installmentType": {
        "type": "string",
        "description": "Type de plan de versement.",
        "enum": [
          "BILATERAL",
          "ISSUER_DEFAULT",
          "ISSUER_PROMOTION",
          "MARKET"
        ],
        "example": "ISSUER_PROMOTION"
      },
      "installmentCount": {
        "type": "integer",
        "format": "int32",
        "minimum": 0,
        "maximum": 1000,
        "description": "Nombre maximum de versements pouvant figurer dans l'acceptation de plan créée à partir de ce plan.",
        "example": 6
      },
      "installmentFrequency": {
        "type": "string",
        "description": "Types de durée pris en charge pour un plan.",
        "enum": [
          "WEEKLY",
          "BIWEEKLY",
          "MONTHLY",
          "BIMONTHLY"
        ],
        "example": "MONTHLY"
      },
      "installmentTermsAndConditionsText": {
        "type": "string",
        "description": "Texte des conditions générales pour le plan de versement.",
        "minLength": 1,
        "maxLength": 2000,
        "example": "You are selecting a 6-month installment plan."
      },
      "url": {
        "type": "string",
        "format": "uri",
        "description": "Fournit l’identificateur de ressource uniforme basé sur la norme RFC 3986.\n\nPour plus de détails, visitez : https://www.rfc-editor.org/rfc/rfc3986.\n",
        "minLength": 1,
        "maxLength": 256,
        "example": "https://developer.moneris.com/"
      },
      "language": {
        "type": "string",
        "format": "iso-639",
        "description": "Fournit le code de langue à deux lettres selon la norme ISO 639-1. \n\nPour obtenir la liste complète des codes de langue, consultez le site : https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes.\n",
        "minLength": 2,
        "maxLength": 2,
        "example": "en"
      },
      "installmentTermsAndConditions": {
        "type": "object",
        "properties": {
          "installmentTermsAndConditionsText": {
            "$ref": "#/components/schemas/installmentTermsAndConditionsText"
          },
          "installmentTermsAndConditionsUrl": {
            "$ref": "#/components/schemas/url"
          },
          "installmentTermsAndConditionsVersion": {
            "$ref": "#/components/schemas/installmentTermsAndConditionsVersion"
          },
          "installmentTermsAndConditionsLanguageCode": {
            "$ref": "#/components/schemas/language"
          }
        },
        "required": [
          "installmentTermsAndConditionsText",
          "installmentTermsAndConditionsUrl",
          "installmentTermsAndConditionsVersion",
          "installmentTermsAndConditionsLanguageCode"
        ]
      },
      "installmentPromotionCode": {
        "type": "string",
        "description": "Un identifiant externe à ce plan fourni par l'émetteur à Visa qui identifie ce plan d'installment.",
        "nullable": true,
        "minLength": 1,
        "maxLength": 2
      },
      "installmentPromotionId": {
        "nullable": true,
        "type": "string",
        "description": "Un identifiant externe fourni par l'émetteur à Visa qui identifie un programme ou une promotion qui est configuré en dehors des services d'installment Visa.",
        "minLength": 1,
        "maxLength": 8,
        "example": "02226M1"
      },
      "firstInstallment": {
        "type": "object",
        "description": "Détails des coûts (frais et principal) pour le premier versement.",
        "properties": {
          "installmentUpFrontFee": {
            "nullable": true,
            "type": "object",
            "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "installmentFee": {
            "nullable": true,
            "type": "object",
            "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "installmentAmount": {
            "$ref": "#/components/schemas/money"
          }
        },
        "required": [
          "installmentAmount"
        ]
      },
      "lastInstallment": {
        "type": "object",
        "description": "Détails des coûts (frais et principal) pour le dernier versement.",
        "properties": {
          "installmentFee": {
            "nullable": true,
            "type": "object",
            "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "installmentAmount": {
            "$ref": "#/components/schemas/money"
          }
        },
        "required": [
          "installmentAmount"
        ]
      },
      "installmentPlan": {
        "type": "object",
        "description": "Détails du plan de versement.",
        "properties": {
          "planId": {
            "$ref": "#/components/schemas/installmentId"
          },
          "planIdReference": {
            "$ref": "#/components/schemas/installmentIdReference"
          },
          "planName": {
            "$ref": "#/components/schemas/installmentName"
          },
          "planType": {
            "$ref": "#/components/schemas/installmentType"
          },
          "installmentCount": {
            "$ref": "#/components/schemas/installmentCount"
          },
          "installmentFrequency": {
            "$ref": "#/components/schemas/installmentFrequency"
          },
          "planTermsAndConditions": {
            "type": "array",
            "description": "Conditions générales du plan de versement.",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/installmentTermsAndConditions"
            }
          },
          "installmentPromotionCode": {
            "$ref": "#/components/schemas/installmentPromotionCode"
          },
          "installmentPromotionId": {
            "$ref": "#/components/schemas/installmentPromotionId"
          },
          "firstInstallment": {
            "$ref": "#/components/schemas/firstInstallment"
          },
          "lastInstallment": {
            "$ref": "#/components/schemas/lastInstallment"
          },
          "annualPercentageRate": {
            "description": "Taux annuel en pourcentage (APR) configuré par l'émetteur lors de la création du plan. Il n'est pas utilisé pour les calculs mais uniquement à des fins d'affichage.",
            "type": "number",
            "format": "decimal",
            "multipleOf": 0.01,
            "minimum": 0,
            "maximum": 100,
            "example": 90.5
          },
          "installmentTotalFee": {
            "$ref": "#/components/schemas/money"
          },
          "totalPlanCost": {
            "$ref": "#/components/schemas/money"
          }
        },
        "required": [
          "planId",
          "planIdReference",
          "planName",
          "planType",
          "installmentCount",
          "installmentFrequency",
          "planTermsAndConditions",
          "installmentPromotionCode",
          "installmentPromotionId",
          "firstInstallment",
          "lastInstallment",
          "annualPercentageRate",
          "installmentTotalFee",
          "totalPlanCost"
        ]
      },
      "installmentEligibilityResponse": {
        "type": "object",
        "description": "Réponse d'éligibilité au versement.",
        "properties": {
          "installmentPlans": {
            "description": "List of eligible plans.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/installmentPlan"
            }
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/paymentMethod"
          }
        },
        "required": [
          "installmentPlans",
          "paymentMethod"
        ]
      },
      "chainId": {
        "type": "string",
        "description": "A unique identifier assigned to a specific organizational chain.",
        "nullable": true,
        "minLength": 13,
        "maxLength": 13,
        "example": "0030400001622"
      },
      "institutionNumber": {
        "type": "string",
        "description": "The name or identifier of the financial institution.",
        "maxLength": 5,
        "example": 809,
        "pattern": "^\\d{5}"
      },
      "transitNumber": {
        "type": "string",
        "description": "The identifier of the transit bank associated.",
        "maxLength": 5,
        "example": "00160",
        "pattern": "^\\d{5}"
      },
      "accountNumber": {
        "type": "string",
        "description": "Attribute that represent the unique identifier for a bank account.",
        "nullable": true,
        "maxLength": 10
      },
      "bank": {
        "type": "object",
        "description": "An object that contains information about the bank associated with the account or transaction.",
        "required": [
          "currency",
          "institutionNumber",
          "transitNumber",
          "accountNumber"
        ],
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "institutionNumber": {
            "$ref": "#/components/schemas/institutionNumber"
          },
          "transitNumber": {
            "$ref": "#/components/schemas/transitNumber"
          },
          "accountNumber": {
            "$ref": "#/components/schemas/accountNumber"
          }
        }
      },
      "addionalBankingAccountType": {
        "type": "string",
        "description": "Le type du compte bancaire supplémentaire.",
        "enum": [
          "POS_BILLING_ACCOUNT",
          "CHARGEBACK_ACCOUNT",
          "DEBIT_DEPOSIT_ACCOUNT"
        ]
      },
      "additionalBankingAccount": {
        "type": "object",
        "description": "Un objet qui contient des informations de compte bancaire supplémentaires.",
        "allOf": [
          {
            "$ref": "#/components/schemas/bank"
          },
          {
            "type": "object",
            "required": [
              "accountType"
            ],
            "properties": {
              "accountType": {
                "$ref": "#/components/schemas/addionalBankingAccountType"
              }
            }
          }
        ]
      },
      "bankingDetails": {
        "type": "object",
        "description": "Un objet qui contient les informations bancaires nécessaires liées au compte ou à la transaction.",
        "required": [
          "creditDepositAccount"
        ],
        "properties": {
          "creditDepositAccount": {
            "$ref": "#/components/schemas/bank"
          },
          "additionalBankingAccounts": {
            "type": "array",
            "description": "Une liste de comptes bancaires supplémentaires associés au commerçant.",
            "items": {
              "$ref": "#/components/schemas/additionalBankingAccount"
            },
            "maxItems": 10
          }
        }
      },
      "settlementOption": {
        "type": "string",
        "description": "La méthode de règlement des transactions.",
        "enum": [
          "SYSTEM_CLOSE",
          "MERCHANT_CLOSE"
        ]
      },
      "settlementTime": {
        "nullable": true,
        "type": "string",
        "description": "Un horodatage indiquant l'heure à laquelle une transaction est réglée.",
        "format": "time",
        "example": "18:10:00"
      },
      "merchantCategoryCode": {
        "type": "string",
        "description": "A four-digit code that classifies the type of business or service provided by the merchant, based on standard industry categories.",
        "minLength": 4,
        "maxLength": 4,
        "example": "0742"
      },
      "averageTicketSize": {
        "type": "integer",
        "description": "Une valeur numérique représentant le montant moyen de transaction pour l'entreprise.",
        "format": "int32"
      },
      "isSeasonalMerchant": {
        "type": "boolean",
        "description": "Une valeur booléenne indiquant si l'entreprise fonctionne de manière saisonnière."
      },
      "maximumTransactionVolume": {
        "type": "integer",
        "description": "Une valeur numérique qui représente le volume de transaction le plus élevé attendu.",
        "format": "int32"
      },
      "directSellingPercentage": {
        "description": "Le pourcentage de transactions traitées par la vente directe.",
        "type": "number",
        "format": "decimal",
        "minimum": 0,
        "maximum": 100,
        "example": 90.5
      },
      "motoTransactionPercentage": {
        "description": "Le pourcentage de transactions traitées par commande par correspondance / commande par téléphone.",
        "type": "number",
        "format": "decimal",
        "minimum": 0,
        "maximum": 100,
        "example": 90.5
      },
      "ecommerceTransactionPercentage": {
        "description": "Le pourcentage de transactions traitées par le commerce électronique.",
        "type": "number",
        "format": "decimal",
        "minimum": 0,
        "maximum": 100,
        "example": 90.5
      },
      "businessUrl": {
        "type": "string",
        "description": "L'URL officielle du site Web de l'entreprise.",
        "nullable": true,
        "format": "uri",
        "maxLength": 255,
        "example": "www.abc.com"
      },
      "serviceProvider": {
        "type": "string",
        "description": "Le nom ou l'identifiant du fournisseur de services associé à l'entreprise.",
        "nullable": true,
        "maxLength": 255,
        "example": "moneris.com"
      },
      "serviceDeliverToCanadaAvailable": {
        "type": "boolean",
        "description": "Une valeur booléenne indiquant si l'entreprise est disponible pour la livraison au Canada."
      },
      "serviceDeliverToUSAvailable": {
        "type": "boolean",
        "description": "Une valeur booléenne indiquant si l'entreprise est disponible pour la livraison aux États-Unis."
      },
      "creditTransactionVolume": {
        "type": "integer",
        "description": "Une valeur numérique représentant le volume total de transactions généré par les paiements basés sur le crédit.",
        "format": "int32"
      },
      "masterCardTransactionVolume": {
        "type": "integer",
        "description": "Une valeur numérique représentant le volume total de transactions généré par les paiements MasterCard.",
        "format": "int32"
      },
      "visaTransactionVolume": {
        "type": "integer",
        "description": "Une valeur numérique représentant le volume total de transactions généré par les paiements Visa.",
        "format": "int32"
      },
      "visaDebitTransactionVolume": {
        "type": "integer",
        "description": "Une valeur numérique représentant le volume total de transactions généré par les paiements Visa Débit.",
        "format": "int32",
        "example": 42
      },
      "amexTransactionVolume": {
        "type": "integer",
        "description": "Une valeur numérique représentant le volume total de transactions généré par les paiements American Express.",
        "format": "int32",
        "example": 1000
      },
      "interacTransactionVolume": {
        "type": "integer",
        "description": "Une valeur numérique représentant le volume total de transactions généré par les paiements Interac.",
        "format": "int32",
        "example": 1000
      },
      "masterCardDebitTransactionVolume": {
        "type": "integer",
        "description": "Une valeur numérique représentant le volume total de transactions généré par les paiements MasterCard Débit.",
        "format": "int32",
        "example": 1000
      },
      "unionPayTransactionVolume": {
        "type": "integer",
        "description": "Une valeur numérique représentant le volume total de transactions généré par les paiements UnionPay.",
        "format": "int32",
        "example": 1000
      },
      "discoverTransactionVolume": {
        "type": "integer",
        "description": "Une valeur numérique représentant le volume total de transactions généré par les paiements Discover.",
        "format": "int32",
        "example": 1000
      },
      "businessCategory": {
        "type": "string",
        "description": "La catégorie de l'entreprise.",
        "nullable": true,
        "maxLength": 255,
        "example": "RESTAURANTS",
        "enum": [
          "AIRLINES",
          "AMUSEMENT_AND_ENTERTAINMENT",
          "AUTOMOBILE_VEHICLE_RENTAL",
          "AUTOMOBILES_AND_VEHICLES",
          "BUSINESS_SERVICES",
          "CONTRACTED_SERVICES",
          "GOVERNMENT_SERVICES",
          "HOTELS_AND_MOTELS",
          "MAIL_ORDER_TELEPHONE_ORDER_PROVIDERS",
          "PERSONAL_SERVICE_PROVIDERS",
          "PROFESSIONAL_SERVICES_AND_MEMBERSHIPS",
          "REPAIR_SERVICES",
          "RESTAURANTS",
          "RETAILER",
          "RETAILERS",
          "SERVICE_PROVIDERS",
          "TRANSPORTATION",
          "UTILITIES",
          "WHOLESALERS_MANUFACTURERS"
        ]
      },
      "businessSubCategory": {
        "type": "string",
        "description": "La sous-catégorie de l'entreprise.",
        "nullable": true,
        "enum": [
          "A_1_RENT_A_CAR",
          "ACCOUNTING",
          "ACTION_RENT_A_CAR",
          "ADAMS_MARK",
          "ADRIA",
          "ADVANTAGE_RENT_A_CAR",
          "ADVERTISING",
          "AER_LINGUS",
          "AERO_COACH_AVIATION",
          "AERO_PERU",
          "AERO_SERVICO_CARABOBO",
          "AERO_VIRGIN_ISLANDS",
          "AEROLINEAS_ARGENTINAS",
          "AEROLINEAS_NICARAGUENSIS",
          "AEROMEXICO",
          "AFFILIATED_AUTO_RENTAL",
          "AGENCY_RENT_A_CAR",
          "AGRICULTURAL_COOPERATIVES",
          "AIR_AFRIQUE",
          "AIR_ALGERIE",
          "AIR_BRITISH_COLUMBIA",
          "AIR_CANADA",
          "AIR_CHINA",
          "AIR_CONDITIONER",
          "AIR_CONDITIONING_CONTRACTOR",
          "AIR_COURIER",
          "AIR_DJIBOUTI",
          "AIR_FRANCE",
          "AIR_INDIA",
          "AIR_JAMAICA",
          "AIR_LANKA",
          "AIR_LITTORAL",
          "AIR_MAURITIUS",
          "AIR_NEW_ZEALAND",
          "AIR_PANAMA",
          "AIR_SEYCHELLES",
          "AIR_ZAIRE",
          "AIR_ZIMBABWE",
          "AIRCRAFT_EQUIPMENT",
          "AIRINTER",
          "AIRPORT_TERMINALS",
          "AIRPORTS",
          "AIRWAYS_RENT_A_CAR",
          "AJAX_RENT_A_CAR",
          "ALAMO_RENT_A_CAR",
          "ALASKA",
          "ALCOHOL_STORE",
          "ALIMONY",
          "ALL_NIPPON",
          "ALLSTATE_RENT_A_CAR",
          "ALM_ANTILEAN",
          "ALOHA",
          "ALTERATIONS",
          "ALTRA_RENT_A_CAR",
          "AMBULANCE_SERVICES",
          "AMELIA_ISLAND_PLANTATION",
          "AMERICA_WEST",
          "AMERICAN",
          "AMERICAN_INT_RENT_A_CAR",
          "AMERICAN_TRANS_AIR",
          "AMERICANA",
          "AMERISUITES",
          "AMFAC",
          "AMUSEMENT_PARKS",
          "ANA",
          "ANSA_INTERNATIONAL_RENT_A_CAR",
          "ANSETT",
          "ANTIQUE_REPAIR",
          "ANTIQUE_REPRODUCTION",
          "ANTIQUE_RESTORATION",
          "ANTIQUES",
          "APPLIANCE",
          "AQUARIUMS",
          "ARABELLA",
          "ARCADE",
          "ARCHITECTS",
          "ARCTIA",
          "ART_DEALERS",
          "ART_SUPPLIES",
          "ARTIFICIAL_LIMBS",
          "ASIANA",
          "ATHLETIC_FIELDS",
          "ATTORNEYS",
          "AUBERGE_DES_GOVERNMENTS",
          "AUDITING",
          "AUSTRIAN",
          "AUSTRIAN_AIR_SERVICE",
          "AUTO_BODY",
          "AUTO_CASH_FI",
          "AUTO_DEALER_USED",
          "AUTO_HOST_CAR_RENTAL",
          "AUTOHANSA_RENT_A_CAR",
          "AUTOMATE_RENT_A_CAR",
          "AUTOMATED_FUEL_DISPENSER",
          "AUTOMOBILE_ASSOCIATION",
          "AUTOMOTIVE_PAINT",
          "AUTOMOTIVE_SERVICE",
          "AUTOMOTIVE_SERVICE_SHOPS",
          "AVCAR_RENT_A_CAR",
          "AVENSA",
          "AVIANCA",
          "AVIATION_FUEL",
          "AVIS_RENT_A_CAR",
          "AVON_RENT_A_CAR",
          "AWNINGS",
          "BAHAMAS_AIR",
          "BAIL_PAYMENTS",
          "BAKERIES",
          "BALLYS",
          "BANDS",
          "BAR_HARBOUR",
          "BARBER_SHOP",
          "BARS",
          "BEAU_RIVAGE",
          "BEAUTY_SALON",
          "BEAUTY_SPA",
          "BEER",
          "BELLAGIO",
          "BEMIDJI",
          "BEST_WESTERN",
          "BICYCLE_SALES",
          "BICYCLE_SERVICE",
          "BIG_BOX_HOME_SUPPLIERS",
          "BILLIARD_AND_POOL_HALL",
          "BILTMORE",
          "BINIONS_HORSESHOE_CLUB",
          "BLINDS",
          "BLUEPRINTING",
          "BOAT_DEALER",
          "BOAT_LEASES",
          "BOAT_RENTALS",
          "BOCA_RATON_RESORT",
          "BOND_PAYMENTS",
          "BOOKKEEPING",
          "BOOKS",
          "BOTANICAL_GARDENS",
          "BOWLING_ALLEYS",
          "BOYS_CLOTHING",
          "BRADBURY_SUITES",
          "BRIDGE_TOLLS",
          "BRITISH_AIRWAYS",
          "BRITISH_MIDLAND",
          "BROADMOOR",
          "BROCKWAY",
          "BROKERS",
          "BROOKS_RENT_A_CAR",
          "BUDGET_HOST_INNS",
          "BUDGET_RENT_A_CAR",
          "BUDGETEL_INNS",
          "BUFFALO_BILLS",
          "BUILDING_SUPPLIES",
          "BUS_LINES",
          "BUSES_LOCAL",
          "BUSINESS_SCHOOLS",
          "BUSINESS_SERVICES_OTHER",
          "BUTCHERS",
          "BUYING_SERVICES",
          "BWIA_INTERNATIONAL",
          "CABLE_SERVICES",
          "CABS",
          "CAESARS",
          "CALIFORNIA",
          "CAMERA",
          "CAMP_GROUNDS",
          "CAMPANILE",
          "CAMPER_DEALER",
          "CANADIAN",
          "CANDY",
          "CANYON_RANCH",
          "CAPTITOL",
          "CAR_ACCESSORIES",
          "CAR_AUTO_BODY",
          "CAR_PAINTING",
          "CAR_PARTS",
          "CAR_SERVICE",
          "CAR_SUPPLIES",
          "CAR_WASHERS",
          "CAREFREE_RESORTS",
          "CAREY_RENT_A_CAR",
          "CARLTON",
          "CARNIVAL",
          "CARNIVALS",
          "CARPENTER",
          "CARPET",
          "CARPET_CLEANING",
          "CATALOGUE",
          "CATALOGUE_AND_RETAIL",
          "CATERERS",
          "CATHAY_PACIFIC",
          "CHARITABLE_ORG",
          "CHATEAU_ELAN_RESORT",
          "CHEMICALS_OTHER",
          "CHILD_CARE",
          "CHILD_SUPPORT",
          "CHILDRENS_CLOTHING",
          "CHINA",
          "CHINA_EASTERN",
          "CHIROPODISTS",
          "CHIROPRACTORS",
          "CIGA",
          "CIGAR_STAND",
          "CIGARS",
          "CIRCUS_CIRCUS",
          "CIRCUSES",
          "CITE_RENT_A_CAR",
          "CITY_LODGE",
          "CIVIC_ASSOCIATIONS",
          "CLARION",
          "CLEANING_AND_MAINTENANCE",
          "CLEANING_PRODUCTS",
          "CLIMATE_DE_FRANCE",
          "CLOCK",
          "CLUB_MED",
          "COAL_DEALER",
          "COAST",
          "COIN",
          "COLLECTION_AGENCIES",
          "COLLEGES",
          "COLORADO_BELLE",
          "COMAIR",
          "COMFORT_INNS",
          "COMMAND",
          "COMMERCIAL_CLOTHING",
          "COMMERCIAL_CONTRACTOR",
          "COMMERCIAL_EQUIPMENT_OTHER",
          "COMMERCIAL_FOOTWEAR",
          "COMMERCIAL_FURNITURE",
          "COMMERCIAL_LAUNDRY",
          "COMMERCIAL_PHOTOGRAPHER",
          "COMMERCIAL_SPORTS",
          "COMPANIA_FAUCETT",
          "COMPANIA_PANEMENA",
          "COMPRI",
          "COMPUTER_EQUIPMENT",
          "COMPUTER_INFORMATION_SERVICES",
          "COMPUTER_NETWORK_SERVICES",
          "COMPUTER_PROGRAMMING",
          "COMPUTER_SERVICES",
          "COMPUTER_SERVICES_OTHER",
          "COMPUTER_SOFTWARE",
          "CONCORDE",
          "CONCRETE_WORK",
          "CONFECTIONERY",
          "CONSORT",
          "CONSTRUCTION_MATERIALS_OTHER",
          "CONSULTING_SERVICES",
          "CONTINENTAL",
          "CONTRACTORS_SPECIAL_TRADE",
          "CORNER_STORE",
          "CORRESPONDENCE_SCHOOLS",
          "COSMETICS",
          "COUNTRY_CLUBS",
          "COUNTRY_INN_BY_CARLSON",
          "COURIER_SERVICES",
          "COURT_COSTS",
          "COURTYARD_INNS",
          "CP",
          "CRAFT_SHOWS",
          "CRAFT_SUPPLIES",
          "CREDIT_REPORTING_AGENCIES",
          "CREMATORIUMS",
          "CROATIA",
          "CROWN",
          "CROWNE_PLAZA",
          "CRUISE_LINES",
          "CRUZEIRO",
          "CRYSTAL",
          "CSA",
          "CUMBERLAND",
          "CUMULOS",
          "CUNARD",
          "CURTAIN",
          "CYPRUS_AIR",
          "DAIRY_PRODUCTS",
          "DAN",
          "DAN_AIR",
          "DANCE_HALLS",
          "DANCE_SCHOOL",
          "DANCE_STUDIO",
          "DATA_PROCESSING_SERVICES",
          "DATING_SERVICE",
          "DAY_CARE_CENTERS",
          "DAYS_INNS",
          "DE_VERA",
          "DEALERS",
          "DEBT_COUNSELING",
          "DELTA",
          "DENTAL_EQUIPMENT",
          "DENTAL_LABORATORIES",
          "DENTISTS",
          "DEPARTMENT_STORE",
          "DETECTIVE_AGENCY",
          "DIGITAL_APPLICATIONS",
          "DIGITAL_GAMES",
          "DIGITAL_MEDIA_BOOKS_MOVIES_MUSIC",
          "DILLON_INNS",
          "DIRECT_MARKETING",
          "DISCO",
          "DISCOUNT_STORE",
          "DISINFECTORS",
          "DISNEYLAND",
          "DOCTORS_OTHER",
          "DOLLAR_RENT_A_CAR",
          "DOLLAR_STORE",
          "DOLPHYINARIUMS",
          "DOOR_TO_DOOR_SALES",
          "DORAL",
          "DORNIT",
          "DOUBLETREE",
          "DOWNTOWER_PASSPORT",
          "DRAPERY",
          "DRIVE_IN_THEATER",
          "DRUG",
          "DRUG_SUPPLIES",
          "DRURY_INN",
          "DRY_CLEANER",
          "DRY_GOODS",
          "DUNFEY",
          "DURABLE_GOODS_OTHER",
          "DUTY_FREE",
          "DVD_RENTAL",
          "ECONO_CAR_RENT_A_CAR",
          "ECONOLODGES",
          "ECONOMY_INNS",
          "ECUATORIANA",
          "EGYPTAIR",
          "EL_AL",
          "ELDORADO",
          "ELECTRIC_CHARGING_STATION",
          "ELECTRIC_UTILITY",
          "ELECTRICAL",
          "ELECTRICAL_CONTRACTORS",
          "ELECTRICAL_PARTS_EQUIPMENT",
          "ELECTRONIC",
          "ELECTRONICS",
          "ELEMENTARY_SCHOOLS",
          "EMBASSY",
          "EMBASSY_SUITES",
          "EMIRATES",
          "ENGINEERS",
          "ENTERPRISE_RENT_A_CAR",
          "EQUESTRIAN",
          "ESCORT_SERVICE",
          "ETHIOPIAN",
          "EUROPE_BY_CAR",
          "EUROPE_CAR",
          "EVA",
          "EXCALIBUR",
          "EXCEL_INN",
          "EXPOSITIONS",
          "EXTERMINATORS",
          "FABRIC",
          "FAIRFIELD",
          "FAIRFIELD_INN",
          "FAIRMONT",
          "FAMILY_CLOTHING",
          "FAMILY_LAUNDRY",
          "FARM_EQUIPMENT",
          "FAST_FOOD_RESTAURANT",
          "FAX_PACKAGES",
          "FERRIES",
          "FI_AUTO_CASH",
          "FI_MANUAL_CASH",
          "FILM_DEVELOPING",
          "FINES",
          "FINNAIR",
          "FIREPLACE",
          "FIREPLACE_ACCESSORIES",
          "FLAG_INN",
          "FLOOR_COVERING",
          "FLORIST",
          "FLORIST_SUPPLIES",
          "FLOWER_SUPPLIES",
          "FLOWERS",
          "FLYING_FIELDS",
          "FOOD_STORES_OTHER",
          "FOOTWEAR_COMMERCIAL",
          "FORMAL_WEAR",
          "FORTE",
          "FORTUNE_TELLERS",
          "FORUM",
          "FOUR_POINTS",
          "FOUR_SEASONS",
          "FRATERNAL_ASSOCIATIONS",
          "FREEDOM",
          "FREEZER",
          "FREIGHT_CARRIERS",
          "FREIGHT_COURIER",
          "FREMONT",
          "FRIENDSHIP_INNS",
          "FRONTIER",
          "FUEL_DEALERS",
          "FUNERAL_HOMES",
          "FUR_STORE",
          "FURNITURE",
          "FURNITURE_EQUIPMENT",
          "FURNITURE_LEASING",
          "FURNITURE_OFFICE_COMMERCIAL",
          "FURNITURE_REFINISHING",
          "FURNITURE_RENTAL",
          "FURRIER",
          "GALLERY",
          "GAMBLING_TRANSACTIONS",
          "GAME",
          "GARAGES",
          "GARDENS",
          "GARMENT_CLEANING",
          "GARUDA",
          "GAS_STATION_AUTOMATED",
          "GAS_STATIONS",
          "GAS_UTILITY",
          "GENERAL_CONTRACTOR",
          "GENERAL_RENT_A_CAR",
          "GIFT_CARD",
          "GLASS",
          "GLASSES",
          "GLASSWARE",
          "GODFREY_RENT_A_CAR",
          "GOLDEN_NUGGET",
          "GOLDEN_PACIFIC",
          "GOLDEN_TULIP",
          "GOLF_COURSES_PUBLIC",
          "GOVERNMENTAL_SERVICES_OTHER",
          "GRAPHIC_ART",
          "GREENBRIAN_RESORT",
          "GROCERY_STORE",
          "GROUND_COURIER",
          "GULF",
          "GUYANA",
          "HALEKULANI",
          "HAMPTON_INN",
          "HARDWARE_EQUIPMENT",
          "HARDWARE_STORE",
          "HARLEY",
          "HARRAHS",
          "HARVEY_BRISTOL",
          "HAT_CLEANING",
          "HAVASU",
          "HAWAIIAN",
          "HEALTH_SPA",
          "HEARING_AID_SUPPLIES",
          "HEARING_AIDS",
          "HEATING_CONTRACTOR",
          "HEATING_EQUIPMENT",
          "HELMSLEY",
          "HERTZ_RENT_A_CAR",
          "HILTON",
          "HILTON_INTERNATIONAL",
          "HOBBY_SHOP",
          "HOLIDAY_INNS",
          "HOLIDAY_RENT_A_CAR",
          "HOME_FURNISHINGS",
          "HOME_FURNISHINGS_OTHER",
          "HOME_SUPPLY_WAREHOUSE",
          "HORTICULTURAL_SERVICES",
          "HOSPITAL_EQUIPMENT",
          "HOSPITALITY_INNS",
          "HOSPITALS",
          "HOTEL_IBIS",
          "HOTEL_MELIA",
          "HOTEL_MERCURE",
          "HOTEL_OKURA",
          "HOTEL_UNIVERSAL",
          "HOTELES_EL_PRESIDENTE",
          "HOUSEHOLD_APPLIANCES",
          "HOWARD_JOHNSON_INN",
          "HUDSON_HOTEL",
          "HUNGAR",
          "HUSA",
          "HYATT",
          "IBERTOL",
          "IBUSZ",
          "ICELANDIAR",
          "IMPERIAL_LONDON",
          "INBOUND_TELEMARKETING",
          "INDIAN",
          "INDUSTRIAL_SUPPLIES_OTHER",
          "INFANTS_CLOTHING",
          "INFORMATION_SERVICES",
          "INNKEEPERS",
          "INSTRUMENT",
          "INSURANCE",
          "INSURANCE_PREMIUMS",
          "INSURANCE_RENT_A_CAR",
          "INSURANCE_UNDERWRITING",
          "INTEGRATED_SYSTEMS_DESIGN",
          "INTERCONTINENTAL",
          "INTERENT_RENT_A_CAR",
          "INTERHOTEL_CLERK",
          "INTERNOR_HOTELS",
          "ISLAND",
          "ITA_AIRWAYS",
          "JANITORIAL_SERVICES",
          "JAPAN",
          "JEWELLERY",
          "JOHN_ASCUAGAS_NUGGET",
          "JOLLY",
          "JOURNEYS_END_MOTELS",
          "JUGOSLAV",
          "KAHALA_MANDARIN_ORIENTAL",
          "KAROS",
          "KEMWELL_GROUP_RENT_A_CAR",
          "KENYA",
          "KLM",
          "KM_MALTA_AIRLINES",
          "KNIGHTS_INN",
          "KOREAN",
          "KUWAIT",
          "LA_MANSION_DEL_RIO",
          "LA_QUINTA_MOTOR_INNS",
          "LAB_BOLIVIA",
          "LABORATORIES_NON_MEDICAL",
          "LABORATORY_EQUIPMENT",
          "LACSA_COSTA_RICA",
          "LADBROKE",
          "LADECO",
          "LADY_LUCK",
          "LANCHILE",
          "LANDSCAPING_SERVICES",
          "LAP",
          "LAUNDROMATS",
          "LAUNDRY_CLEANING",
          "LAUNDRY_FAMILY",
          "LAV_LINEA_VENEZOLANA",
          "LAWN_AND_GARDEN",
          "LEASING_EQUIPMENT",
          "LEATHER_GOODS",
          "LEGAL_SERVICES",
          "LIAT",
          "LIMOUSINES",
          "LIQUOUR",
          "LOCAL_TELEPHONE_ACCESS",
          "LOCAL_TRANSPORTATION",
          "LOEWS",
          "LONG_DISTANCE_TELEPHONE_PACKAGES",
          "LOT",
          "LOTTERY",
          "LUFTHANSA",
          "LUGGAGE",
          "LUMBER",
          "LUXAIR",
          "LUXOR",
          "MAIN_STREET_STATION",
          "MAJOR_RENT_A_CAR",
          "MALAYSIAN",
          "MALEV",
          "MANAGEMENT_SERVICES",
          "MANDALAY_BAY_RESORT",
          "MANDARIN_ORIENTAL",
          "MANUAL_CASH_FI",
          "MARINAS",
          "MARINE_SERVICE",
          "MARINE_SUPPLIES",
          "MARITIM",
          "MARKETPLACES",
          "MARRIAGE_COUNSELING",
          "MARRIOTT",
          "MASONRY",
          "MASSAGE_PARLORS",
          "MASTERS_ECONOMY_INNS",
          "MEAT_FREEZERS",
          "MEAT_LOCKER_PROVISIONERS",
          "MEAT_MARKETS",
          "MEDICAL_EQUIPMENT",
          "MEDICAL_LABORATORIES",
          "MEDICAL_OTHER",
          "MEMBER_MERCHANDISE",
          "MEMBERSHIP_CLUBS",
          "MEMBERSHIP_OTHER",
          "MEN_AND_BOYS_CLOTHING",
          "MEN_AND_WOMENS_CLOTHING",
          "MENDING",
          "MERIDIAN",
          "MERLIN",
          "MESA",
          "METAL_SERVICES_CENTERS",
          "METAL_SERVICES_OFFICES",
          "METRO",
          "METROFLIGHT",
          "METROPOLE",
          "MEXICANA",
          "MGM_GRAND",
          "MICROFILM_EQUIPMENT",
          "MIDDLE_EAST",
          "MIDWAY_MOTOR_LODGE",
          "MIDWEST_EXPRESS",
          "MILLENNIUM_BROADWAY",
          "MILLEVILLE_RENT_A_CAR",
          "MIRGAGE",
          "MISC_ENTERTAINERS",
          "MIYAKO",
          "MOBILE_HOME_DEALER",
          "MONTE_CARLO",
          "MOTEL_6",
          "MOTION_PICTURE_PRODUCTION",
          "MOTION_PICTURE_THEATRES",
          "MOTOR_HOME_DEALER",
          "MOTOR_HOME_RENTAL",
          "MOTOR_VEHICLE_SUPPLIES",
          "MOTORCYCLE_DEALER",
          "MOTORCYCLE_SHOP",
          "MOUNT_CHARLOTTE_THISTLE",
          "MOUNT_COOK",
          "MOVENPICK",
          "MOVERS_TRUCKS",
          "MOVIE_PRODUCTION",
          "MOVIE_THEATER",
          "MUSEUMS",
          "MUSIC",
          "NANNIES",
          "NATIONAIR",
          "NATIONAL_CAR_RENTAL",
          "NEEDLEWORK",
          "NEVELE_GRAND",
          "NEW_AND_USED_TRUCK_DEALER",
          "NEW_OTANI",
          "NEW_PARTS_CARS",
          "NEW_YORK_NEW_YORK",
          "NEW_YORK_HELICOPTER",
          "NEWS_DEALERS",
          "NEWS_STANDS",
          "NEWSPAPERS",
          "NIGERIA",
          "NIGHTCLUB",
          "NOAHS",
          "NONDURABLE_GOODS_OTHER",
          "NON_FIN_INSTITUTION_STORED_CARD_PURCHASE_LOAD",
          "NON_MEDICAL_LABORATORIES",
          "NORONTAIR",
          "NORTHWEST",
          "NOVELTY_GOODS",
          "NOVOTEL",
          "NUMISMATIC_SUPPLIES",
          "NURSERY",
          "NURSERY_SCHOOLS",
          "NURSERY_STOCK",
          "NURSING_HOME",
          "NUTS",
          "OBEROI",
          "OFFICE_EQUIPMENT",
          "OFFICE_FURNITURE",
          "OFFICE_SUPPLIES",
          "OIL_DEALER",
          "OLYMPIC",
          "OMNI",
          "OPHTHALMIC_EQUIPMENT",
          "OPHTHALMOLOGISTS",
          "OPRYLAND",
          "OPTICAL_GOODS",
          "OPTICIANS",
          "OPTOMETRISTS",
          "ORCHESTRAS",
          "ORTHODONTISTS",
          "ORTHOPEDIC_GOODS",
          "OSTEOPATHS",
          "OTHER_AIRLINE",
          "OTHER_BUSINESS_SERVICES",
          "OTHER_CLOTHING",
          "OTHER_DIRECT_MARKETING",
          "OTHER_EQUIPMENT",
          "OTHER_HOTELS",
          "OTHER_PERSONAL_SERVICES",
          "OTHER_RENTAL_CAR",
          "OUTBOUND_TELEMARKETING",
          "PAINT",
          "PAINT_SUPPLIES",
          "PAKISTAN",
          "PAN_AMERICAN",
          "PANNONI",
          "PARK_INNS_INTERNATIONAL",
          "PARK_PLAZA_HOTEL",
          "PARKING_LOTS",
          "PATRICIA_GRAND_RESORTS",
          "PAWN_SHOP",
          "PAY_TV_SERVICES",
          "PAYLESS_CAR_RENTAL",
          "PEABODY",
          "PENINSULA",
          "PENTA",
          "PERIODICALS",
          "PERSONAL_CARE_FACILITY",
          "PERSONAL_COUNSELING",
          "PET_FOOD",
          "PET_STORE",
          "PET_SUPPLIES",
          "PETROLEUM",
          "PETROLEUM_DEALER",
          "PETROLEUM_PRODUCTS",
          "PHARMACY",
          "PHILATELIC_SUPPLIES",
          "PHILIPPINE",
          "PHOTO_DEVELOPING",
          "PHOTOCOPY_EQUIPMENT",
          "PHOTOCOPYING_SERVICES",
          "PHOTOGRAPHER",
          "PHOTOGRAPHER_COMMERCIAL",
          "PHOTOGRAPHIC_STUDIOS",
          "PHOTOGRAPHIC_SUPPLIES",
          "PHOTOGRAPHY_EQUIPMENT",
          "PIANO",
          "PIECE_GOODS",
          "PIECE_NOTIONS",
          "PLASTER_INSTALLATION",
          "PLUMBER_CONTRACTOR",
          "PLUMBING_EQUIPMENT",
          "PODIATRISTS",
          "POLISHING_PRODUCTS",
          "POLITICAL_ORGANIZATION",
          "POOL_HALL",
          "POOL_SUPPLIES",
          "POSTAL_SERVICES_GOVT_ONLY",
          "PRECIOUS_METALS",
          "PRECIOUS_STONES",
          "PRIMADONNA",
          "PRINCE",
          "PRINCESS",
          "PRINCEVILLE",
          "PRINTING_SERVICES_OTHER",
          "PRINTING_SUPPLIES",
          "PRIVATE_GOLF_CLUBS",
          "PROF_SPORTS_CLUB",
          "PROFESSIONAL_SCHOOLS",
          "PROSTHETICS",
          "PROTEA",
          "PROTECTIVE_AGENCY",
          "PUBLIC_GOLF_COURSES",
          "PUBLIC_RELATIONS",
          "PUBLIC_WAREHOUSING",
          "PUBLISHING_MISCELLANEOUS",
          "PULLMAN_INTERNATIONAL",
          "QANTAS",
          "QATAR",
          "QUALIFY_PACIFIC",
          "QUALITY_INNS",
          "QUASI_CASH_MERCHANT",
          "RADIO_SERVICES",
          "RADISSON",
          "RAILWAY_FREIGHT",
          "RAILWAYS",
          "RAMADA_INNS",
          "RANK",
          "RANTASIPI",
          "RAZOR",
          "RAZOR_SERVICE",
          "REAL_ESTATE_AGENTS",
          "RECORD",
          "RECREATIONAL_CAMP",
          "RECREATIONAL_TRAILER_DEALER",
          "RECREATIONAL_VEHICLE_RENTAL",
          "RED_ROOF_INNS",
          "REFRIGERATION",
          "REFRIGERATOR",
          "REGAL_8_INNS",
          "REGENT_INTERNATIONAL",
          "RELAX_INNS",
          "RELIGIOUS_ITEMS",
          "RELIGIOUS_ORGANIZATIONS",
          "RENAISSANCE",
          "RENO",
          "RENTAL_EQUIPMENT",
          "RENTAL_TRUCK",
          "RENTAL_UNIFORMS",
          "RENTAL_TRUCK_AND_UTILITY_TRAILER",
          "RENT_A_WRECK",
          "REPAIR_SHOPS_OTHER",
          "REPLACEMENT_RENT_A_CAR",
          "REPRODUCTIONS",
          "RESERVE_RENT_A_CAR",
          "RESIDENCE_INN",
          "RESIDENTIAL_CONTRACTOR",
          "RESO",
          "RESTAURANTS",
          "RETAIL_AND_CATALOGUE",
          "REUPHOLSTERER",
          "RICA",
          "RIDING_APPARELL",
          "RIO_HOTELS",
          "RIO_SUITES",
          "RIVIERA",
          "RIYADH_AIR",
          "ROAD_TOLLS",
          "ROADWAY_INNS",
          "ROOFER",
          "ROYAL",
          "ROYAL_AIR_MAROC",
          "ROYAL_DUTCH_AIRLINES_KLM",
          "ROYCE",
          "RUG",
          "SABENA",
          "SAETA",
          "SAHARA",
          "SALVAGE_YARDS",
          "SAMS_TOWN",
          "SAN_JUAN",
          "SANDMAN",
          "SANDMAN_INN",
          "SANDS_RESORT",
          "SANITATION_PRODUCTS",
          "SANITATION_UTILITY",
          "SARA",
          "SAROVA",
          "SAS",
          "SASHA",
          "SATELLITE_SERVICES",
          "SAUDI_ARABIAN",
          "SCANDIC",
          "SCENIC",
          "SCHOOL_SUPPLIES",
          "SCHOOLS_OTHER",
          "SEA_AQUARIUMS",
          "SEA_PINES_RESORT",
          "SEAMSTRESSES",
          "SECOND_HAND",
          "SECONDARY_SCHOOLS",
          "SECRETARIAL_SCHOOLS",
          "SECRETARIAL_SUPPORT",
          "SECURITIES",
          "SECURITY",
          "SERVICE_SHOP_CAR",
          "SERVICE_STATION_AUTOMATED",
          "SEWING",
          "SHANGRI_LA_INTERNATIONAL",
          "SHEET_METAL_WORK",
          "SHEET_MUSIC",
          "SHERATON",
          "SHILO_INN",
          "SHOE_REPAIR_SHOP",
          "SHOE_SHINING",
          "SHOES",
          "SHONEYS_INNS",
          "SHOPPING_SERVICES",
          "SHOWCASE_RENT_A_CAR",
          "SIDER",
          "SIERRA_SUITES",
          "SILVER_LEGACY",
          "SILVER_STAR",
          "SILVERWARE",
          "SIMMONS",
          "SINGAPORE",
          "SINGLETON",
          "SLEEP_INN",
          "SMALL_APPLIANCE",
          "SNAPPY_CAR_RENTAL",
          "SNOWMOBILE_DEALER",
          "SOCIAL_ASSOCIATIONS",
          "SOCIAL_SERVICE",
          "SOFITEL",
          "SOKOS",
          "SOL",
          "SONESTA",
          "SOUTH_AFRICAN",
          "SOUTHERN_PACIFIC",
          "SOUTHERN_SUN",
          "SOUTHWEST",
          "SOUVENIR",
          "SPANAIR",
          "SPECIAL_TRADE_CONTRACTOR",
          "SPORTING_CAMP",
          "SPORTING_GOODS",
          "SPORTS_COMMERCIAL",
          "SPORTS_PROMOTERS",
          "SPRINGHILL_SUITES",
          "ST_REGIS",
          "STAKIS",
          "STAMP",
          "STARWOOD_RESORTS",
          "STATIONARY",
          "STEIGENBERGER",
          "STENOGRAPHY",
          "STONEWORK",
          "SUBSCRIPTION",
          "SUBWAYS",
          "SUDAN",
          "SUNBELT",
          "SUNWORLD",
          "SUPER_8",
          "SUPERMARKET",
          "SURINAM",
          "SURVEYORS",
          "SWIMMING_POOLS",
          "SWISSAIR",
          "SWISSOTEL",
          "TACA_INTERNATIONAL",
          "TAILORS",
          "TALAIR",
          "TAME",
          "TAN",
          "TAP",
          "TAROM",
          "TAVERN",
          "TAX_PAYMENTS",
          "TAX_PREPARATION",
          "TAXIS",
          "TELECOM_EQUIPMENT",
          "TELECOM_SVC",
          "TELEGRAPH_SERVICES",
          "TELEPHONE_EQUIPMENT",
          "TELEPHONE_SERVICES",
          "TEMPORARY_HELP",
          "TENTS",
          "THAI",
          "THE_RITZ_CARLTON",
          "THE_VENETIAL",
          "THEATER_TICKET_AGENCIES",
          "THEATRICAL_PRODUCERS",
          "THRIFT",
          "THRIFTY_CAR_RENTAL",
          "THUNDERBIRD",
          "THY",
          "TILDEN_RENT_A_CAR",
          "TILE_SETTING",
          "TIME_SHARES",
          "TIRE_RETREADING_AND_REPAIR",
          "TIRE_SHOPS",
          "TOKYO",
          "TOKYO_INN",
          "TOOL_LEASING",
          "TOOL_RENTAL",
          "TOUPEE_SHOP",
          "TOUR_OPERATORS",
          "TOURIST_ATTRACTIONS",
          "TOWER",
          "TOWING",
          "TOWNEPLACE_SUITES",
          "TOYS",
          "TRADE_SCHOOLS",
          "TRAILER_PARKS",
          "TRAILER_RENTALS",
          "TRAINS_LOCAL",
          "TRANSAERO",
          "TRANSPORTATION_OTHER",
          "TRANSWORLD",
          "TRAVEL_AGENCIES",
          "TRAVEL_RELATED",
          "TRAVELODGE",
          "TREASURE_ISLAND",
          "TROPICAL_RENT_A_CAR",
          "TROPICANA",
          "TRUCK_DEALER_NEW_AND_USED",
          "TRUCK_DEALER_USED",
          "TUNIS",
          "TYPESETTING",
          "US_AIR_SHUTLE",
          "UGLY_DUCKLING_RENT_A_CAR",
          "UNIFORMS",
          "UNITED",
          "UNIVERSITIES",
          "UPHOLSTERY_CLEANING",
          "US_AIRWAYS",
          "USA_RENT_A_CAR",
          "USED_AND_NEW_AUTO_DEALER",
          "USED_AND_NEW_TRUCK_DEALER",
          "USED_AUTO_DEALER",
          "USED_CLOTHING",
          "USED_TRUCK_DEALER",
          "UTA",
          "UTILITY_TRAILER_DEALER",
          "VAGABOND",
          "VALLEY",
          "VALUE_RENT_A_CAR",
          "VANGUARD",
          "VARIETY_STORE",
          "VARIG",
          "VARNISH_SUPPLIES",
          "VASP",
          "VENEZOLANA_INTERNATIONAL",
          "VENTURE_INNS",
          "VETERINARY_SERVICES",
          "VIDEO_GAME_ARCADES",
          "VIDEO_GAME_SUPPLIER",
          "VIDEO_GAME_SUPPLIES",
          "VIDEO_RENTAL",
          "VIDEO_TAPE_PRODUCTION",
          "VIRGIN_ATLANTIC",
          "VIRGIN_RIVER",
          "VOCATIONAL_SCHOOLS",
          "W_HOTELS",
          "WALDORF",
          "WALLPAPER",
          "WAREHOUSES",
          "WATCH",
          "WATCHES",
          "WATER_UTILITY",
          "WELCOMGROUP",
          "WELDING",
          "WELLESLEY_INNS",
          "WESTIN",
          "WHISKEY_PETES",
          "WHOLESALE_CLUBS",
          "WIDEROES",
          "WIG_SHOP",
          "WINDOW_COVERINGS",
          "WINDOW_UPHOLSTERY",
          "WINDWARD_ISLAND",
          "WINE",
          "WINERIES",
          "WINGS",
          "WOMEN_AND_MENS_CLOTHING",
          "WOMENS_ACCESSORIES",
          "WOMENS_READY_TO_WEAR",
          "WOMENS_SPECIALTY_SHOP",
          "WOOD_DEALER",
          "WOODSIDE",
          "WRAPPING_PAPER",
          "WRECKERS",
          "ZABO",
          "ZOOS"
        ]
      },
      "offeredProductsAndServicesDescription": {
        "type": "string",
        "description": "Une description du type de produits et services offerts par l'entreprise.",
        "nullable": true,
        "maxLength": 255,
        "example": "food"
      },
      "riskLevel": {
        "type": "string",
        "description": "Le niveau de risque associé à l'entreprise.",
        "nullable": true,
        "enum": [
          "LOW",
          "MEDIUM",
          "HIGH"
        ],
        "example": "LOW"
      },
      "businessDetails": {
        "type": "object",
        "description": "Un objet contenant les informations clés sur l'entreprise associée au compte ou à la transaction.",
        "required": [
          "merchantCategoryCode",
          "isSeasonalMerchant",
          "directSellingPercentage",
          "motoTransactionPercentage",
          "ecommerceTransactionPercentage"
        ],
        "properties": {
          "merchantCategoryCode": {
            "$ref": "#/components/schemas/merchantCategoryCode"
          },
          "averageTicketSize": {
            "$ref": "#/components/schemas/averageTicketSize"
          },
          "isSeasonalMerchant": {
            "$ref": "#/components/schemas/isSeasonalMerchant"
          },
          "maximumTransactionVolume": {
            "$ref": "#/components/schemas/maximumTransactionVolume"
          },
          "directSellingPercentage": {
            "$ref": "#/components/schemas/directSellingPercentage"
          },
          "motoTransactionPercentage": {
            "$ref": "#/components/schemas/motoTransactionPercentage"
          },
          "ecommerceTransactionPercentage": {
            "$ref": "#/components/schemas/ecommerceTransactionPercentage"
          },
          "businessUrl": {
            "$ref": "#/components/schemas/businessUrl"
          },
          "serviceProvider": {
            "$ref": "#/components/schemas/serviceProvider"
          },
          "serviceDeliverToCanadaAvailable": {
            "$ref": "#/components/schemas/serviceDeliverToCanadaAvailable"
          },
          "serviceDeliverToUSAvailable": {
            "$ref": "#/components/schemas/serviceDeliverToUSAvailable"
          },
          "creditTransactionVolume": {
            "$ref": "#/components/schemas/creditTransactionVolume"
          },
          "masterCardTransactionVolume": {
            "$ref": "#/components/schemas/masterCardTransactionVolume"
          },
          "visaTransactionVolume": {
            "$ref": "#/components/schemas/visaTransactionVolume"
          },
          "visaDebitTransactionVolume": {
            "$ref": "#/components/schemas/visaDebitTransactionVolume"
          },
          "amexTransactionVolume": {
            "$ref": "#/components/schemas/amexTransactionVolume"
          },
          "interacTransactionVolume": {
            "$ref": "#/components/schemas/interacTransactionVolume"
          },
          "masterCardDebitTransactionVolume": {
            "$ref": "#/components/schemas/masterCardDebitTransactionVolume"
          },
          "unionPayTransactionVolume": {
            "$ref": "#/components/schemas/unionPayTransactionVolume"
          },
          "discoverTransactionVolume": {
            "$ref": "#/components/schemas/discoverTransactionVolume"
          },
          "category": {
            "$ref": "#/components/schemas/businessCategory"
          },
          "subCategory": {
            "$ref": "#/components/schemas/businessSubCategory"
          },
          "offeredProductsAndServicesDescription": {
            "$ref": "#/components/schemas/offeredProductsAndServicesDescription"
          },
          "riskLevel": {
            "$ref": "#/components/schemas/riskLevel"
          }
        }
      },
      "contactInformation": {
        "type": "object",
        "description": "Un objet contenant toutes les informations de contact.",
        "required": [
          "firstName",
          "lastName",
          "phone"
        ],
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "phone": {
            "$ref": "#/components/schemas/phoneNumber"
          }
        }
      },
      "legalName": {
        "type": "string",
        "description": "Le nom enregistré du commerçant.",
        "maxLength": 60,
        "example": "Pizza 2 Go"
      },
      "operatingAsName": {
        "type": "string",
        "description": "Le nom commercial sous lequel le commerçant opère.",
        "maxLength": 30,
        "example": "Pizza 2 Go"
      },
      "yearsOfOwnership": {
        "type": "integer",
        "description": "Un entier représentant le nombre d'années pendant lesquelles le commerçant a été propriétaire.",
        "format": "int32"
      },
      "monthsOfOwnership": {
        "type": "integer",
        "description": "Un entier représentant le nombre de mois pendant lesquels le commerçant a été propriétaire.",
        "format": "int32"
      },
      "merchantType": {
        "type": "string",
        "description": "La catégorie de l'entreprise du commerçant.",
        "nullable": true,
        "enum": [
          "NATIONAL",
          "INDEPENDENT_BUSINESS"
        ]
      },
      "merchantInformation": {
        "type": "object",
        "description": "Un objet contenant toutes les informations sur le commerçant.",
        "required": [
          "language",
          "legalName",
          "operatingAsName",
          "cardholderName",
          "yearsOfOwnership",
          "monthsOfOwnership",
          "customerServicePhoneNumber",
          "email"
        ],
        "properties": {
          "language": {
            "enum": [
              "en",
              "fr"
            ],
            "description": "La langue préférée du commerçant.",
            "type": "string",
            "format": "iso-639",
            "minLength": 2,
            "maxLength": 2,
            "example": "en"
          },
          "legalName": {
            "$ref": "#/components/schemas/legalName"
          },
          "operatingAsName": {
            "$ref": "#/components/schemas/operatingAsName"
          },
          "cardholderName": {
            "description": "Le nom de la personne à qui la carte de crédit ou de débit est émise.",
            "nullable": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 60,
            "example": "John Doe"
          },
          "yearsOfOwnership": {
            "$ref": "#/components/schemas/yearsOfOwnership"
          },
          "monthsOfOwnership": {
            "$ref": "#/components/schemas/monthsOfOwnership"
          },
          "customerServicePhoneNumber": {
            "$ref": "#/components/schemas/phoneNumber"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "merchantType": {
            "$ref": "#/components/schemas/merchantType"
          }
        }
      },
      "address": {
        "type": "object",
        "description": "L’adresse postale, y compris la rue, la ville, la province et le code postal.\nEn option, un numéro d’unité peut être fourni.\n",
        "properties": {
          "unitNumber": {
            "nullable": true,
            "type": "string",
            "description": "Numéro d’unité",
            "minLength": 1,
            "maxLength": 19,
            "example": "123A"
          },
          "streetNumber": {
            "nullable": true,
            "type": "string",
            "description": "Numéro de rue",
            "minLength": 1,
            "maxLength": 19,
            "example": "3300"
          },
          "streetName": {
            "nullable": true,
            "type": "string",
            "description": "Nom de la rue",
            "minLength": 1,
            "maxLength": 100,
            "example": "Bloor"
          },
          "city": {
            "nullable": true,
            "type": "string",
            "description": "Identifie la ville.\n",
            "minLength": 1,
            "maxLength": 50,
            "example": "Toronto"
          },
          "province": {
            "nullable": true,
            "type": "string",
            "description": "Code ISO 3166-2 de la province ou de l’État ",
            "minLength": 1,
            "maxLength": 3,
            "format": "iso-3166-2",
            "example": "ON"
          },
          "postalCode": {
            "nullable": true,
            "type": "string",
            "description": "Code postal",
            "minLength": 1,
            "maxLength": 30,
            "example": "M8X 2X2"
          },
          "country": {
            "nullable": true,
            "type": "string",
            "description": "Fournit le code de pays à deux lettres selon la norme ISO 3166-1 alpha-2. \nPour obtenir la liste complète des codes de pays, consultez le site : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.\n",
            "minLength": 2,
            "maxLength": 2,
            "example": "CA",
            "format": "iso-3166"
          }
        },
        "example": {
          "unitNumber": "123A",
          "streetNumber": "3300",
          "streetName": "Bloor Street West",
          "city": "Toronto",
          "province": "ON",
          "postalCode": "M8X 2X2",
          "country": "CA"
        }
      },
      "marketSegment": {
        "type": "string",
        "description": "Identifies the specific customer or business segment targeted by a product or service.",
        "nullable": true,
        "enum": [
          "PAYROC",
          "ADVANCE_IT",
          "ATB",
          "ATB_8760",
          "ADYEN",
          "BRAINTREE",
          "CYDCOR",
          "DIRECT_CASH",
          "INTUIT",
          "MCA",
          "OPTIMAL",
          "PAYSAFE_RETAIL_RESELLER",
          "PROTOCOL",
          "SAGE",
          "SONA",
          "SOFT_TECH",
          "TILL_PAYMENTS",
          "UEAT",
          "CLEVERPAYS",
          "PAYLITE",
          "ILIXIUM",
          "LOYALTY_SENSE",
          "POWER_PAYMENTS",
          "PAYMENT_EXPERTS",
          "INTERNATIONAL_PAYMENT_SOLUTIONS",
          "PAYOLOGY",
          "NATIONAL_PAYMENTS"
        ]
      },
      "merchantDetails": {
        "type": "object",
        "description": "Un objet qui contient les informations clés sur le commerçant associé.",
        "required": [
          "contactInformation",
          "merchantInformation",
          "locationAddress"
        ],
        "properties": {
          "contactInformation": {
            "$ref": "#/components/schemas/contactInformation"
          },
          "merchantInformation": {
            "$ref": "#/components/schemas/merchantInformation"
          },
          "locationAddress": {
            "$ref": "#/components/schemas/address"
          },
          "marketSegment": {
            "$ref": "#/components/schemas/marketSegment"
          }
        }
      },
      "dropShipping": {
        "type": "boolean",
        "description": "Une valeur booléenne indiquant si l'entreprise pratique la livraison directe dans le cadre de ses opérations."
      },
      "businessActivity": {
        "type": "object",
        "description": "Un objet contenant tous les détails sur l'activité commerciale.",
        "required": [
          "dropShipping"
        ],
        "properties": {
          "dropShipping": {
            "$ref": "#/components/schemas/dropShipping"
          }
        }
      },
      "businessType": {
        "type": "string",
        "description": "La catégorie de l'entreprise.",
        "enum": [
          "SOLE_PROPRIETOR",
          "LIMITED_PARTNERSHIP",
          "PARTNERSHIP",
          "NON_PROFIT",
          "NON_FOR_PROFIT",
          "PRIVATE_CORPORATION",
          "PUBLIC_CORPORATION",
          "GOVERNMENT"
        ]
      },
      "legalEntity": {
        "type": "object",
        "title": "Legal Entity",
        "description": "Un objet contenant tous les détails sur l'entité juridique de l'entreprise.",
        "required": [
          "businessType"
        ],
        "properties": {
          "businessType": {
            "$ref": "#/components/schemas/businessType"
          }
        }
      },
      "signingOfficer": {
        "type": "object",
        "description": "Un objet contenant tous les détails sur l'agent signataire de l'entreprise.",
        "required": [
          "creditReportAllowed",
          "firstName",
          "lastName",
          "address",
          "dateOfBirth",
          "ownershipPercentage",
          "title"
        ],
        "properties": {
          "signingOfficerIdentifier": {
            "description": "Un identifiant unique pour l'agent signataire.",
            "type": "integer",
            "format": "int64"
          },
          "creditReportAllowed": {
            "type": "boolean",
            "description": "Une valeur booléenne indiquant si l'entreprise a autorisé l'examen de son rapport de crédit."
          },
          "firstName": {
            "description": "Le prénom de l'agent signataire.",
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "example": "John",
            "nullable": true
          },
          "lastName": {
            "description": "Le nom de famille de l'agent signataire.",
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "example": "Doe",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "dateOfBirth": {
            "description": "La date de naissance de l'agent signataire.",
            "type": "string",
            "format": "date",
            "example": "2019-07-30"
          },
          "ownershipPercentage": {
            "description": "Une valeur numérique représentant le pourcentage de propriété détenu par un individu dans l'entreprise.",
            "type": "number",
            "format": "decimal",
            "minimum": 0,
            "maximum": 100,
            "example": 90.5
          },
          "title": {
            "description": "Le poste officiel de l'agent signataire au sein de l'entreprise.",
            "type": "string",
            "maxLength": 60,
            "enum": [
              "OWNER",
              "PRESIDENT",
              "VICE_PRESIDENT",
              "SECRETARY",
              "TREASURER",
              "DIRECTOR",
              "OTHER"
            ]
          },
          "merchantRiskRate": {
            "nullable": true,
            "type": "string",
            "description": "Un score indiquant le niveau de risque associé aux transactions du commerçant.",
            "maxLength": 60,
            "example": "A+",
            "enum": [
              "A",
              "A_PLUS",
              "B_HIGH",
              "B_LOW",
              "B_LOW_PLUS",
              "B_MID",
              "C",
              "C_HIGH",
              "C_HIGH_PLUS",
              "C_LOW",
              "C_LOW_PLUS",
              "C_MID",
              "C_MID_PLUS",
              "C_PLUS",
              "D",
              "D_HIGH",
              "D_LOW",
              "D_MID",
              "E",
              "E_MINUS",
              "F"
            ]
          }
        }
      },
      "securityDetails": {
        "type": "object",
        "description": "Un objet contenant tous les détails sur les informations de sécurité.",
        "required": [
          "legalEntity",
          "signingOfficers"
        ],
        "properties": {
          "legalEntity": {
            "$ref": "#/components/schemas/legalEntity"
          },
          "signingOfficers": {
            "type": "array",
            "description": "Une liste d'entités d'agents signataires.",
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/signingOfficer"
            }
          }
        }
      },
      "merchantRiskRate": {
        "type": "string",
        "description": "Un score indiquant le niveau de risque associé aux transactions du commerçant.",
        "maxLength": 60,
        "example": "A+",
        "enum": [
          "A",
          "A_PLUS",
          "B_HIGH",
          "B_LOW",
          "B_LOW_PLUS",
          "B_MID",
          "C",
          "C_HIGH",
          "C_HIGH_PLUS",
          "C_LOW",
          "C_LOW_PLUS",
          "C_MID",
          "C_MID_PLUS",
          "C_PLUS",
          "D",
          "D_HIGH",
          "D_LOW",
          "D_MID",
          "E",
          "E_MINUS",
          "F"
        ]
      },
      "merchantPayload": {
        "type": "object",
        "description": "Un objet contenant les détails de la charge utile du commerçant.",
        "required": [
          "bankingDetails",
          "businessDetails",
          "merchantDetails",
          "businessActivity",
          "securityDetails"
        ],
        "properties": {
          "chainId": {
            "$ref": "#/components/schemas/chainId"
          },
          "bankingDetails": {
            "$ref": "#/components/schemas/bankingDetails"
          },
          "pointOfSaleOptions": {
            "nullable": true,
            "type": "object",
            "description": "Un objet contenant les détails sur les options de point de vente disponibles pour le traitement des transactions.",
            "required": [
              "settlementOption"
            ],
            "properties": {
              "settlementOption": {
                "$ref": "#/components/schemas/settlementOption"
              },
              "settlementTime": {
                "$ref": "#/components/schemas/settlementTime"
              },
              "debitPerTransactionRefundLimit": {
                "nullable": true,
                "type": "object",
                "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
                "properties": {
                  "amount": {
                    "$ref": "#/components/schemas/amount"
                  },
                  "currency": {
                    "$ref": "#/components/schemas/currency"
                  }
                },
                "required": [
                  "amount",
                  "currency"
                ],
                "example": {
                  "amount": 16000,
                  "currency": "CAD"
                }
              },
              "dailyRefundLimit": {
                "nullable": true,
                "type": "object",
                "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
                "properties": {
                  "amount": {
                    "$ref": "#/components/schemas/amount"
                  },
                  "currency": {
                    "$ref": "#/components/schemas/currency"
                  }
                },
                "required": [
                  "amount",
                  "currency"
                ],
                "example": {
                  "amount": 16000,
                  "currency": "CAD"
                }
              },
              "dailyCancellationLimit": {
                "nullable": true,
                "type": "object",
                "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
                "properties": {
                  "amount": {
                    "$ref": "#/components/schemas/amount"
                  },
                  "currency": {
                    "$ref": "#/components/schemas/currency"
                  }
                },
                "required": [
                  "amount",
                  "currency"
                ],
                "example": {
                  "amount": 16000,
                  "currency": "CAD"
                }
              }
            }
          },
          "businessDetails": {
            "$ref": "#/components/schemas/businessDetails"
          },
          "merchantDetails": {
            "$ref": "#/components/schemas/merchantDetails"
          },
          "businessActivity": {
            "$ref": "#/components/schemas/businessActivity"
          },
          "securityDetails": {
            "$ref": "#/components/schemas/securityDetails"
          },
          "riskDetails": {
            "nullable": true,
            "type": "object",
            "description": "Un objet contenant des informations liées à l'évaluation des risques d'une transaction ou d'un compte.",
            "required": [
              "merchantRiskRate"
            ],
            "properties": {
              "merchantRiskRate": {
                "$ref": "#/components/schemas/merchantRiskRate"
              }
            }
          }
        }
      },
      "createMerchantRequest": {
        "description": "Créez un nouveau commerçant avec les détails fournis.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "idempotencyKey": {
                "$ref": "#/components/schemas/idempotencyKey"
              }
            },
            "required": [
              "idempotencyKey"
            ]
          },
          {
            "$ref": "#/components/schemas/merchantPayload"
          }
        ]
      },
      "merchant": {
        "description": "Un objet contenant les détails d'un commerçant.",
        "type": "object",
        "properties": {
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "businessDetails": {
            "nullable": true,
            "type": "object",
            "description": "Un objet contenant les informations clés sur l'entreprise associée au compte ou à la transaction.",
            "required": [
              "merchantCategoryCode",
              "isSeasonalMerchant",
              "directSellingPercentage",
              "motoTransactionPercentage",
              "ecommerceTransactionPercentage"
            ],
            "properties": {
              "merchantCategoryCode": {
                "$ref": "#/components/schemas/merchantCategoryCode"
              },
              "averageTicketSize": {
                "$ref": "#/components/schemas/averageTicketSize"
              },
              "isSeasonalMerchant": {
                "$ref": "#/components/schemas/isSeasonalMerchant"
              },
              "maximumTransactionVolume": {
                "$ref": "#/components/schemas/maximumTransactionVolume"
              },
              "directSellingPercentage": {
                "$ref": "#/components/schemas/directSellingPercentage"
              },
              "motoTransactionPercentage": {
                "$ref": "#/components/schemas/motoTransactionPercentage"
              },
              "ecommerceTransactionPercentage": {
                "$ref": "#/components/schemas/ecommerceTransactionPercentage"
              },
              "businessUrl": {
                "$ref": "#/components/schemas/businessUrl"
              },
              "serviceProvider": {
                "$ref": "#/components/schemas/serviceProvider"
              },
              "serviceDeliverToCanadaAvailable": {
                "$ref": "#/components/schemas/serviceDeliverToCanadaAvailable"
              },
              "serviceDeliverToUSAvailable": {
                "$ref": "#/components/schemas/serviceDeliverToUSAvailable"
              },
              "creditTransactionVolume": {
                "$ref": "#/components/schemas/creditTransactionVolume"
              },
              "masterCardTransactionVolume": {
                "$ref": "#/components/schemas/masterCardTransactionVolume"
              },
              "visaTransactionVolume": {
                "$ref": "#/components/schemas/visaTransactionVolume"
              },
              "visaDebitTransactionVolume": {
                "$ref": "#/components/schemas/visaDebitTransactionVolume"
              },
              "amexTransactionVolume": {
                "$ref": "#/components/schemas/amexTransactionVolume"
              },
              "interacTransactionVolume": {
                "$ref": "#/components/schemas/interacTransactionVolume"
              },
              "masterCardDebitTransactionVolume": {
                "$ref": "#/components/schemas/masterCardDebitTransactionVolume"
              },
              "unionPayTransactionVolume": {
                "$ref": "#/components/schemas/unionPayTransactionVolume"
              },
              "discoverTransactionVolume": {
                "$ref": "#/components/schemas/discoverTransactionVolume"
              },
              "category": {
                "$ref": "#/components/schemas/businessCategory"
              },
              "subCategory": {
                "$ref": "#/components/schemas/businessSubCategory"
              },
              "offeredProductsAndServicesDescription": {
                "$ref": "#/components/schemas/offeredProductsAndServicesDescription"
              },
              "riskLevel": {
                "$ref": "#/components/schemas/riskLevel"
              }
            }
          },
          "merchantDetails": {
            "nullable": true,
            "type": "object",
            "description": "Un objet qui contient les informations clés sur le commerçant associé.",
            "required": [
              "contactInformation",
              "merchantInformation",
              "locationAddress"
            ],
            "properties": {
              "contactInformation": {
                "$ref": "#/components/schemas/contactInformation"
              },
              "merchantInformation": {
                "$ref": "#/components/schemas/merchantInformation"
              },
              "locationAddress": {
                "$ref": "#/components/schemas/address"
              },
              "marketSegment": {
                "$ref": "#/components/schemas/marketSegment"
              }
            }
          },
          "businessActivity": {
            "nullable": true,
            "type": "object",
            "description": "Un objet contenant tous les détails sur l'activité commerciale.",
            "required": [
              "dropShipping"
            ],
            "properties": {
              "dropShipping": {
                "$ref": "#/components/schemas/dropShipping"
              }
            }
          },
          "securityDetails": {
            "nullable": true,
            "type": "object",
            "description": "Un objet contenant tous les détails sur les informations de sécurité.",
            "required": [
              "legalEntity",
              "signingOfficers"
            ],
            "properties": {
              "legalEntity": {
                "$ref": "#/components/schemas/legalEntity"
              },
              "signingOfficers": {
                "type": "array",
                "description": "Une liste d'entités d'agents signataires.",
                "maxItems": 100,
                "items": {
                  "$ref": "#/components/schemas/signingOfficer"
                }
              }
            }
          },
          "riskDetails": {
            "nullable": true,
            "type": "object",
            "description": "Un objet contenant des informations liées à l'évaluation des risques d'une transaction ou d'un compte.",
            "required": [
              "merchantRiskRate"
            ],
            "properties": {
              "merchantRiskRate": {
                "$ref": "#/components/schemas/merchantRiskRate"
              }
            }
          },
          "pointOfSaleOptions": {
            "nullable": true,
            "type": "object",
            "description": "Un objet contenant les détails sur les options de point de vente disponibles pour le traitement des transactions.",
            "required": [
              "settlementOption"
            ],
            "properties": {
              "settlementOption": {
                "$ref": "#/components/schemas/settlementOption"
              },
              "settlementTime": {
                "$ref": "#/components/schemas/settlementTime"
              },
              "debitPerTransactionRefundLimit": {
                "nullable": true,
                "type": "object",
                "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
                "properties": {
                  "amount": {
                    "$ref": "#/components/schemas/amount"
                  },
                  "currency": {
                    "$ref": "#/components/schemas/currency"
                  }
                },
                "required": [
                  "amount",
                  "currency"
                ],
                "example": {
                  "amount": 16000,
                  "currency": "CAD"
                }
              },
              "dailyRefundLimit": {
                "nullable": true,
                "type": "object",
                "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
                "properties": {
                  "amount": {
                    "$ref": "#/components/schemas/amount"
                  },
                  "currency": {
                    "$ref": "#/components/schemas/currency"
                  }
                },
                "required": [
                  "amount",
                  "currency"
                ],
                "example": {
                  "amount": 16000,
                  "currency": "CAD"
                }
              },
              "dailyCancellationLimit": {
                "nullable": true,
                "type": "object",
                "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
                "properties": {
                  "amount": {
                    "$ref": "#/components/schemas/amount"
                  },
                  "currency": {
                    "$ref": "#/components/schemas/currency"
                  }
                },
                "required": [
                  "amount",
                  "currency"
                ],
                "example": {
                  "amount": 16000,
                  "currency": "CAD"
                }
              }
            }
          },
          "bankingDetails": {
            "nullable": true,
            "type": "object",
            "description": "Un objet qui contient les informations bancaires nécessaires liées au compte ou à la transaction.",
            "required": [
              "creditDepositAccount"
            ],
            "properties": {
              "creditDepositAccount": {
                "$ref": "#/components/schemas/bank"
              },
              "additionalBankingAccounts": {
                "type": "array",
                "description": "Une liste de comptes bancaires supplémentaires associés au commerçant.",
                "items": {
                  "$ref": "#/components/schemas/additionalBankingAccount"
                },
                "maxItems": 10
              }
            }
          },
          "chainId": {
            "$ref": "#/components/schemas/chainId"
          },
          "createdAt": {
            "nullable": true,
            "description": "Heure à laquelle l’objet a été créé",
            "type": "string",
            "format": "date-time",
            "example": "2019-07-30T06:43:40.252Z"
          },
          "modifiedAt": {
            "nullable": true,
            "description": "Heure à laquelle l’objet a été modifié",
            "type": "string",
            "format": "date-time",
            "example": "2019-07-30T06:43:40.252Z"
          }
        },
        "required": [
          "merchantId"
        ]
      },
      "deviceName": {
        "type": "string",
        "description": "Le nom de l'appareil.",
        "nullable": true
      },
      "carriers": {
        "type": "array",
        "description": "Une liste des options de transporteur disponibles pour l'appareil.",
        "items": {
          "type": "string"
        },
        "maxItems": 10
      },
      "softwareVendors": {
        "type": "array",
        "description": "Une liste des fournisseurs de logiciels associés à l'appareil.",
        "items": {
          "type": "string"
        }
      },
      "cardReaderName": {
        "type": "string",
        "description": "Le nom du lecteur de carte associé à l'appareil.",
        "nullable": true
      },
      "pinpadType": {
        "type": "string",
        "description": "Le type de clavier PIN associé à l'appareil.",
        "nullable": true
      },
      "serviceCode": {
        "type": "string",
        "description": "Le code de service associé à l'appareil.",
        "nullable": true
      },
      "supplyType": {
        "type": "string",
        "description": "Le type d'approvisionnement associé à l'appareil.",
        "nullable": true
      },
      "supplyName": {
        "type": "string",
        "description": "Indique le nom du bien disponible pour l'exécution ou la distribution.",
        "maxLength": 100,
        "example": "2-PLY Sales Draft Slips (25)"
      },
      "quantity": {
        "type": "integer",
        "description": "Spécifie la quantité de biens actuellement disponibles pour un produit particulier.",
        "format": "int32",
        "minimum": 1,
        "maximum": 100,
        "example": 1
      },
      "supply": {
        "type": "object",
        "description": "Un objet contenant tous les détails liés à un approvisionnement.",
        "required": [
          "supplyName",
          "unitPrice"
        ],
        "properties": {
          "supplyName": {
            "$ref": "#/components/schemas/supplyName"
          },
          "unitPrice": {
            "$ref": "#/components/schemas/money"
          },
          "quantity": {
            "$ref": "#/components/schemas/quantity"
          }
        }
      },
      "merchantSupply": {
        "type": "object",
        "description": "Un objet contenant tous les détails liés à un approvisionnement de commerçant.",
        "required": [
          "deviceName",
          "supplyType"
        ],
        "properties": {
          "deviceName": {
            "$ref": "#/components/schemas/deviceName"
          },
          "carriers": {
            "$ref": "#/components/schemas/carriers"
          },
          "softwareVendors": {
            "$ref": "#/components/schemas/softwareVendors"
          },
          "cardReaderName": {
            "$ref": "#/components/schemas/cardReaderName"
          },
          "pinpadType": {
            "$ref": "#/components/schemas/pinpadType"
          },
          "serviceCode": {
            "$ref": "#/components/schemas/serviceCode"
          },
          "unitPrice": {
            "nullable": true,
            "type": "object",
            "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "supplyType": {
            "$ref": "#/components/schemas/supplyType"
          },
          "supplies": {
            "type": "array",
            "description": "Une liste d'approvisionnements associés à l'appareil.",
            "items": {
              "$ref": "#/components/schemas/supply"
            }
          }
        }
      },
      "merchantSupplies": {
        "description": "Un objet contenant une liste d'approvisionnements associés au commerçant.",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Une liste d'articles de fourniture associés à la ressource",
            "items": {
              "$ref": "#/components/schemas/merchantSupply"
            }
          },
          "self": {
            "$ref": "#/components/schemas/self"
          },
          "first": {
            "$ref": "#/components/schemas/first"
          },
          "last": {
            "$ref": "#/components/schemas/last"
          },
          "next": {
            "$ref": "#/components/schemas/next"
          },
          "previous": {
            "$ref": "#/components/schemas/previous"
          }
        }
      },
      "representativeCode": {
        "type": "string",
        "description": "Un code qui identifie l'agent représentant associé à la commande.",
        "nullable": true,
        "maxLength": 10,
        "example": "A0"
      },
      "userIdentifier": {
        "type": "string",
        "description": "Un identifiant unique attribué à un utilisateur dans le système.",
        "nullable": true,
        "maxLength": 30
      },
      "userDetails": {
        "type": "object",
        "description": "Un objet contenant des informations personnelles sur l'utilisateur impliqué dans la transaction.",
        "properties": {
          "userIdentifier": {
            "$ref": "#/components/schemas/userIdentifier"
          },
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          }
        }
      },
      "applicablePromotions": {
        "type": "array",
        "description": "Une liste de codes de promotion applicables à la commande.",
        "maxItems": 10,
        "items": {
          "type": "string",
          "maxLength": 100
        }
      },
      "feeType": {
        "type": "string",
        "description": "Spécifie la catégorie ou l'objectif des frais appliqués à une transaction ou un service.",
        "nullable": true,
        "maxLength": 30
      },
      "tax": {
        "type": "object",
        "description": "Un objet qui contient des informations sur la taxe appliquée à des frais de commande.",
        "properties": {
          "taxName": {
            "type": "string",
            "description": "The name of the tax applied to the fee.",
            "enum": [
              "GOODS_SERVICES_TAX",
              "PROVINCIAL_SALES_TAX",
              "HARMONIZED_SALES_TAX"
            ]
          },
          "taxAmount": {
            "$ref": "#/components/schemas/money"
          }
        },
        "required": [
          "taxName",
          "taxAmount"
        ]
      },
      "isApproved": {
        "type": "boolean",
        "description": "Un indicateur booléen pour indiquer si les frais ont été approuvés pour inclusion dans la transaction.",
        "example": true
      },
      "waivePeriod": {
        "type": "string",
        "description": "Spécifie la période pendant laquelle les frais sont annulés et ne sont pas facturés à l'utilisateur.",
        "format": "period",
        "nullable": true,
        "example": "2022-06-30T14:52:44.276/PT48H",
        "maxLength": 34
      },
      "feeDetails": {
        "type": "object",
        "description": "Un objet contenant les détails des frais.",
        "nullable": true,
        "properties": {
          "accountServiceFee": {
            "description": "Frais facturés pour maintenir le compte associé à la commande.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "consolidatedAccountServiceFee": {
            "description": "Frais combinés ou agrégés facturés pour la maintenance de comptes consolidés.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "minimumMerchantDiscountRateFee": {
            "description": "Le taux d'escompte marchand minimum qui s'applique à une transaction.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "paperStatementFee": {
            "description": "Frais facturés pour recevoir des relevés papier.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "pciSecurityFee": {
            "description": "Frais facturés pour couvrir les coûts d'assurance de conformité avec les données de l'industrie des cartes de paiement.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "totalAdminFee": {
            "description": "Le total des frais administratifs appliqués à une commande.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "upgradeFee": {
            "description": "Frais facturés pour la mise à niveau d'un produit vers une version plus récente.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "agedCloseBatchFee": {
            "description": "Frais facturés lorsqu'un lot de transactions reste ouvert au-delà d'une période définie sans être réglé.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "mastercardComplianceFee": {
            "description": "Frais associés à l'assurance de conformité avec la réglementation de MasterCard.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "dialCommunicationFee": {
            "description": "Frais facturés pour l'utilisation de méthodes de communication par connexion commutée pour transmettre les données de transaction.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "handlingFee": {
            "description": "Frais facturés pour couvrir les coûts associés à la préparation et au traitement d'une commande.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "chargeBackFee": {
            "description": "Frais appliqués lorsqu'une rétrofacturation est initiée par un client.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "consolidation": {
            "description": "Frais facturés pour combiner plusieurs services ou transactions en un seul forfait.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          }
        }
      },
      "applicationDetails": {
        "type": "object",
        "description": "Détails concernant la demande.",
        "nullable": true,
        "properties": {
          "applicationType": {
            "type": "string",
            "description": "Le type de demande en cours de soumission.",
            "enum": [
              "NET_NEW_MERCHANT",
              "EXISTING_MERCHANT_ADD_POS",
              "EXISTING_MERCHANT_UPGRADE_POS"
            ],
            "example": "NET_NEW_MERCHANT",
            "nullable": true
          }
        }
      },
      "agreementModelCode": {
        "type": "string",
        "description": "Un code qui identifie le type spécifique ou le modèle d'accord associé à la commande ou au compte.",
        "nullable": true,
        "maxLength": 15
      },
      "agreementModelInformation": {
        "type": "object",
        "description": "Un objet contenant les détails d'information du modèle d'accord.",
        "nullable": true,
        "properties": {
          "agreementModelCode": {
            "$ref": "#/components/schemas/agreementModelCode"
          }
        }
      },
      "valueAddedServices": {
        "type": "array",
        "description": "Une liste de services à valeur ajoutée associés à la commande.",
        "maxItems": 18,
        "items": {
          "type": "string",
          "enum": [
            "ABU",
            "BOOKMARK",
            "BOOKMARK_PRO",
            "DCC",
            "GIFT_CARD",
            "INSTALLMENTS",
            "INTERAC_ECOM",
            "INTERAC_ONLINE",
            "LOYALTY",
            "MCP",
            "MONERIS_ADVANCE",
            "P2PE",
            "PAYMENT_REQUEST",
            "SAF",
            "THIRD_PARTY_GIFT_CARD",
            "VAU",
            "WEB_CREATION_PACKAGES",
            "WIX"
          ]
        },
        "uniqueItems": true
      },
      "documentsStatus": {
        "type": "object",
        "description": "Un objet contenant les détails du statut des documents.",
        "nullable": true,
        "properties": {
          "creditDocumentsStatus": {
            "type": "array",
            "description": "Une liste des statuts de documents pour la commande.",
            "items": {
              "type": "object",
              "properties": {
                "documentName": {
                  "type": "string",
                  "nullable": true,
                  "description": "Le type du statut du document.",
                  "maxLength": 100,
                  "enum": [
                    "ADVERTISING",
                    "ALCOHOL_CARD_NOT_PRESENT_OFFICER_CERTIFICATE",
                    "ALCOHOL_CARD_NOT_PRESENT_OFFICER_CERTIFICATE_SOLE_PROPRIETOR",
                    "APPLICABLE_LICENCE",
                    "BUSINESS_REGISTRATION_DOCUMENTS",
                    "CAF",
                    "CANNABIS_ATTESTATION",
                    "FIREARMS_CARD_NOT_PRESENT_OFFICER_CERTIFICATE",
                    "FIREARMS_CARD_NOT_PRESENT_OFFICER_CERTIFICATE_SOLE_PROPRIETOR",
                    "FINANCIAL_STATEMENTS",
                    "LEGAL_OPINION_LETTER",
                    "MASTER_CARD_MRP_REGISTRATION",
                    "MEDICAL_DENTAL_EQUIPMENT_CARD_NOT_PRESENT_OFFICER_CERTIFICATE",
                    "MEDICAL_DENTAL_EQUIPMENT_CARD_NOT_PRESENT_OFFICER_CERTIFICATE_SOLE_PROPRIETOR",
                    "OFFICER_CERTIFICATE",
                    "OFFICER_CERTIFICATE_SOLE_PROPRIETOR",
                    "ORGANIZATION_CHART",
                    "PG",
                    "PHARMACY_CARD_NOT_PRESENT_OFFICER_CERTIFICATE",
                    "PHARMACY_CARD_NOT_PRESENT_OFFICER_CERTIFICATE_SOLE_PROPRIETOR",
                    "POLITICAL_ORGANIZATION_REGISTRATION",
                    "PREVIOUS_PROCESSING_STATEMENTS",
                    "PSNW",
                    "SMOKING_SUPPLIES_CARD_NOT_PRESENT_OFFICER_CERTIFICATE",
                    "SMOKING_SUPPLIES_CARD_NOT_PRESENT_OFFICER_CERTIFICATE_SOLE_PROPRIETOR",
                    "VISA_HBR_REGISTRATION"
                  ]
                },
                "documentStatus": {
                  "type": "string",
                  "nullable": true,
                  "description": "Le nom de la sélection associée au document.",
                  "maxLength": 100
                }
              }
            },
            "maxItems": 40
          },
          "additionalDocumentsStatus": {
            "type": "array",
            "description": "Une liste de statuts de documents supplémentaires associés à la commande.",
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "documentName": {
                  "type": "string",
                  "nullable": true,
                  "description": "Le type du statut du document supplémentaire.",
                  "maxLength": 6,
                  "enum": [
                    "AMEX_ELIGIBILITY_VERIFICATION",
                    "CONTROL_VERIFICATION",
                    "MASSAGE_LICENSE_NUMBER",
                    "MERCHANT_CONFIRMATION",
                    "REGISTRATION_NUMBER",
                    "TICO_IATA_NUMBER"
                  ]
                },
                "documentStatus": {
                  "type": "string",
                  "nullable": true,
                  "description": "Le statut de la sélection associée à la saisie du document.",
                  "maxLength": 100
                },
                "additionalComment": {
                  "nullable": true,
                  "type": "string",
                  "description": "Commentaire associé au document supplémentaire.",
                  "maxLength": 100
                }
              }
            }
          }
        }
      },
      "confirmation": {
        "type": "object",
        "description": "Un objet contenant les détails de la confirmation.",
        "nullable": true,
        "properties": {
          "hasManualImprinter": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si la commande nécessite une imprimante manuelle."
          },
          "hasConsentedToCollectPersonalInformation": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si l'utilisateur a consenti à l'utilisation de ses informations personnelles."
          },
          "isSignatureRequired": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si une signature est requise pour la commande.",
            "default": true
          },
          "additionalNote": {
            "type": "string",
            "description": "Note ou commentaires supplémentaires liés à la commande.",
            "nullable": true,
            "maxLength": 500
          }
        }
      },
      "supplies": {
        "type": "array",
        "description": "Une liste d'articles de fourniture.",
        "items": {
          "$ref": "#/components/schemas/supply"
        },
        "maxItems": 116
      },
      "collectionRate": {
        "type": "integer",
        "description": "Le taux auquel les paiements sont collectés ou déduits.",
        "format": "int32",
        "example": 10
      },
      "monerisAdvanceFeeDetails": {
        "type": "object",
        "description": "Une liste de frais associés à Moneris Advance.",
        "nullable": true,
        "properties": {
          "preferredAmountFee": {
            "description": "Le montant préféré facturé pour le service Moneris Advance.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "chargeableAmountFee": {
            "description": "Le montant facturé pour le service Moneris Advance.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          }
        }
      },
      "monerisAdvance": {
        "type": "object",
        "description": "Un objet contenant les détails relatifs à Moneris Advance.",
        "nullable": true,
        "properties": {
          "approvedAmount": {
            "nullable": true,
            "type": "object",
            "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "collectionRate": {
            "$ref": "#/components/schemas/collectionRate"
          },
          "premiumAmount": {
            "nullable": true,
            "type": "object",
            "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "isEligible": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si le produit est éligible pour un service ou une fonctionnalité spécifique."
          },
          "feeDetails": {
            "$ref": "#/components/schemas/monerisAdvanceFeeDetails"
          }
        }
      },
      "terminalCarrier": {
        "type": "string",
        "description": "Le nom de l'opérateur de réseau mobile ou du fournisseur de services.",
        "example": "Telus",
        "maxLength": 255,
        "nullable": true
      },
      "terminalName": {
        "type": "string",
        "description": "Le nom du terminal.",
        "example": "Moneris Go",
        "maxLength": 255
      },
      "software": {
        "type": "string",
        "description": "Indique la version du logiciel ou la plateforme fonctionnant sur le dispositif terminal.",
        "maxLength": 255,
        "nullable": true
      },
      "pinpadModel": {
        "type": "string",
        "description": "Spécifie le modèle ou le type du composant pavé numérique intégré au terminal.",
        "maxLength": 50,
        "nullable": true
      },
      "cableType": {
        "type": "string",
        "description": "Indique le type de câble inclus avec le dispositif terminal.",
        "nullable": true,
        "maxLength": 50
      },
      "pinpadCableType": {
        "type": "string",
        "description": "Spécifie le type de câble utilisé pour connecter le pavé numérique au terminal.",
        "nullable": true,
        "maxLength": 50
      },
      "pointOfSaleType": {
        "type": "string",
        "description": "Spécifie le type de terminal de point de vente utilisé.",
        "nullable": true,
        "maxLength": 50
      },
      "transferDeviceReference": {
        "type": "string",
        "description": "Indique l'identifiant du dispositif transféré dans le cadre de la demande de terminal actuelle.",
        "nullable": true,
        "maxLength": 50
      },
      "kioskReference": {
        "type": "string",
        "description": "Identifie le kiosque spécifique associé au terminal.",
        "nullable": true,
        "maxLength": 50
      },
      "manufacturer": {
        "type": "string",
        "description": "Le nom de l'entreprise qui produit le terminal.",
        "nullable": true,
        "maxLength": 50
      },
      "installationType": {
        "type": "string",
        "description": "Spécifie la méthode ou l'environnement d'installation du terminal.",
        "nullable": true,
        "maxLength": 50,
        "enum": [
          "ONSITE_PREMIUM_INSTALLATION",
          "ONSITE_PRO_INSTALLATION",
          "ONSITE_STANDARD_INSTALLATION",
          "ONSITE",
          "MERCHANT_INSTALL",
          "PHONE"
        ]
      },
      "terminal": {
        "type": "object",
        "description": "Un objet représentant un terminal de paiement pour traiter les transactions.",
        "required": [
          "terminalName"
        ],
        "properties": {
          "carrier": {
            "$ref": "#/components/schemas/terminalCarrier"
          },
          "terminalName": {
            "$ref": "#/components/schemas/terminalName"
          },
          "software": {
            "$ref": "#/components/schemas/software"
          },
          "pinpadModel": {
            "$ref": "#/components/schemas/pinpadModel"
          },
          "unitPrice": {
            "description": "Le coût d'une seule unité du terminal.",
            "nullable": true,
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "quantity": {
            "type": "integer",
            "description": "Le nombre d'unités de terminal achetées ou assignées.",
            "format": "int32",
            "example": 4
          },
          "cableType": {
            "$ref": "#/components/schemas/cableType"
          },
          "pinpadCableType": {
            "$ref": "#/components/schemas/pinpadCableType"
          },
          "waivePeriod": {
            "$ref": "#/components/schemas/waivePeriod"
          },
          "pointOfSaleType": {
            "$ref": "#/components/schemas/pointOfSaleType"
          },
          "transferDeviceReference": {
            "$ref": "#/components/schemas/transferDeviceReference"
          },
          "kioskReference": {
            "$ref": "#/components/schemas/kioskReference"
          },
          "kioskUnitPrice": {
            "description": "Le coût d'une seule unité de kiosque.",
            "nullable": true,
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "manufacturer": {
            "$ref": "#/components/schemas/manufacturer"
          },
          "installationType": {
            "$ref": "#/components/schemas/installationType"
          }
        }
      },
      "counterTopTerminals": {
        "type": "array",
        "description": "Une liste de terminaux de paiement disponibles au comptoir.",
        "items": {
          "$ref": "#/components/schemas/terminal"
        },
        "maxItems": 5
      },
      "integratedProduct": {
        "type": "object",
        "description": "Un objet contenant les détails du produit intégré.",
        "nullable": true,
        "properties": {
          "variableConfigurationCode": {
            "type": "string",
            "description": "Un code de configuration utilisé pour identifier les paramètres variables pour les transactions.",
            "maxLength": 50,
            "nullable": true
          },
          "cardPresentVariableConfigurationCode": {
            "type": "string",
            "description": "Un code de configuration utilisé pour identifier les paramètres de carte présente pour les transactions.",
            "maxLength": 50,
            "nullable": true
          },
          "cardNotPresentVariableConfigurationCode": {
            "type": "string",
            "description": "Un code de configuration utilisé pour identifier les paramètres de carte non présente pour les transactions.",
            "maxLength": 50,
            "nullable": true
          },
          "cardPresentVariableConfigurationCodeSelectionName": {
            "type": "string",
            "description": "Une chaîne représentant la sélection de code variable pour le produit intégré.",
            "maxLength": 50,
            "nullable": true
          },
          "cardNotPresentVariableConfigurationCodeSelectionName": {
            "type": "string",
            "description": "Une chaîne représentant la sélection de code variable pour le produit intégré.",
            "maxLength": 50,
            "nullable": true
          },
          "integrationFeesDetails": {
            "type": "object",
            "description": "Un objet représentant les frais associés au produit intégré.",
            "nullable": true,
            "properties": {
              "creditFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "integrationFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "pointOfSalePadsFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "visaBypassVerificationFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "vaultFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "touchBistroTrainingFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "tokenSharingSetupFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "vaultPerTransactionFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "cloudAccessFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "kioskTransactionFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "p2peFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "p2peIndoorFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "p2peOutdoorFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "p2pePerTransactionFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              }
            }
          },
          "terminals": {
            "type": "array",
            "description": "Une liste de terminaux de paiement disponibles pour le produit intégré.",
            "items": {
              "$ref": "#/components/schemas/terminal"
            },
            "maxItems": 21
          },
          "creditElectronicCashRegistersQuantity": {
            "type": "integer",
            "description": "Un nombre représentant la quantité de caisses enregistreuses électroniques utilisées pour les transactions de crédit.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "debitElectronicCashRegistersQuantity": {
            "type": "integer",
            "description": "Un nombre représentant la quantité de caisses enregistreuses électroniques utilisées pour les transactions de débit.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "debitCreditElectronicCashRegistersQuantity": {
            "type": "integer",
            "description": "Un nombre représentant la quantité de caisses enregistreuses électroniques utilisées pour les transactions de débit et de crédit.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "storeAndForwardCreditElectronicCashRegistersQuantity": {
            "type": "integer",
            "description": "Un nombre représentant la quantité de caisses enregistreuses électroniques utilisées pour les transactions de crédit en mode stockage et transmission.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "storeAndForwardDebitElectronicCashRegistersQuantity": {
            "type": "integer",
            "description": "Un nombre représentant la quantité de caisses enregistreuses électroniques utilisées pour les transactions de débit en mode stockage et transmission.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          }
        }
      },
      "storeAndForward": {
        "type": "object",
        "description": "Un objet contenant les détails du produit Store and Forward.",
        "nullable": true,
        "properties": {
          "isEnabled": {
            "type": "boolean",
            "description": "Un indicateur booléen indiquant si le produit Store and Forward est activé."
          },
          "storedCumulativeTransactionVolume": {
            "type": "integer",
            "description": "Une chaîne représentant le volume de transactions cumulatif stocké dans le produit Store and Forward.",
            "format": "int32"
          },
          "maximumStoredTransactionAmount": {
            "description": "Le montant maximum pouvant être stocké dans le produit Store and Forward.",
            "nullable": true,
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          }
        }
      },
      "petroTrak": {
        "type": "object",
        "description": "Un objet contenant les détails du produit PetroTrak.",
        "nullable": true,
        "properties": {
          "feeDetails": {
            "type": "object",
            "nullable": true,
            "description": "Un objet représentant les frais associés au produit PetroTrak.",
            "properties": {
              "receivableAccountsTransactionFee": {
                "description": "Frais appliqués aux transactions de comptes débiteurs.",
                "nullable": true,
                "type": "object",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "softwareFee": {
                "description": "Frais appliqués pour l'utilisation de logiciels liés au produit PetroTrak.",
                "nullable": true,
                "type": "object",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              }
            }
          },
          "deviceOwnershipName": {
            "type": "string",
            "nullable": true,
            "description": "Le nom de la propriété du dispositif pour le produit PetroTrak.",
            "maxLength": 100
          },
          "siteNumber": {
            "type": "string",
            "nullable": true,
            "description": "Le numéro de site associé au produit PetroTrak.",
            "maxLength": 50
          },
          "corporateBrand": {
            "type": "string",
            "nullable": true,
            "description": "La marque d'entreprise associée au produit PetroTrak.",
            "maxLength": 50
          },
          "profileIdentifier": {
            "type": "string",
            "nullable": true,
            "description": "Un identifiant unique pour le profil PetroTrak.",
            "maxLength": 50
          },
          "profileName": {
            "type": "string",
            "nullable": true,
            "description": "Le nom du profil PetroTrak.",
            "maxLength": 100
          },
          "lines": {
            "type": "array",
            "description": "Une liste de lignes associées au produit PetroTrak.",
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "binRange": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 255,
                  "description": "La plage de BIN (numéros d'identification bancaire) associée au produit PetroTrak."
                },
                "lowPrefix": {
                  "type": "string",
                  "nullable": true,
                  "description": "Le préfixe bas associé au produit PetroTrak.",
                  "maxLength": 50
                },
                "highPrefix": {
                  "type": "string",
                  "nullable": true,
                  "description": "Le préfixe haut associé au produit PetroTrak.",
                  "maxLength": 50
                },
                "service": {
                  "type": "string",
                  "nullable": true,
                  "description": "Le type de service associé au produit PetroTrak.",
                  "maxLength": 50
                },
                "discountRate": {
                  "type": "string",
                  "nullable": true,
                  "description": "Le type de taux de remise associé au produit PetroTrak.",
                  "maxLength": 50
                },
                "discountRateValue": {
                  "nullable": true,
                  "description": "La valeur du taux de remise associée au produit PetroTrak.",
                  "type": "object",
                  "properties": {
                    "amount": {
                      "$ref": "#/components/schemas/amount"
                    },
                    "currency": {
                      "$ref": "#/components/schemas/currency"
                    }
                  },
                  "required": [
                    "amount",
                    "currency"
                  ],
                  "example": {
                    "amount": 16000,
                    "currency": "CAD"
                  }
                }
              }
            }
          },
          "terminals": {
            "type": "array",
            "description": "Une liste de terminaux de paiement disponibles pour le produit PetroTrak.",
            "items": {
              "$ref": "#/components/schemas/terminal"
            },
            "maxItems": 21
          }
        }
      },
      "multiCurrencyProduct": {
        "type": "object",
        "description": "Un objet contenant les détails du produit multi-devises.",
        "nullable": true,
        "properties": {
          "feeDetails": {
            "type": "object",
            "description": "Un objet représentant les frais associés au produit multi-devises.",
            "nullable": true,
            "properties": {
              "setupFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "nonDomesticSettlementFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "visaBusinessToBusinessVirtualForeignFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "visaBusinessToBusinessVirtualForeignSingleCurrencyFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "visaBusinessToBusinessAssessmentForeignSingleCurrencyFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "visaBusinessToBusinessAssessmentForeignFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "visaAssessmentSingleCurrencyFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "visaAssessmentForeignFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              }
            }
          },
          "packageIdentifier": {
            "type": "string",
            "description": "Un identifiant unique pour le forfait de tarification multi-devises.",
            "maxLength": 50,
            "nullable": true
          },
          "packageDescription": {
            "type": "string",
            "description": "Une description du forfait de tarification multi-devises.",
            "maxLength": 100,
            "nullable": true
          },
          "markUpPercentage": {
            "type": "number",
            "description": "Le pourcentage de majoration facturé pour les transactions multi-devises.",
            "format": "float",
            "minimum": 0,
            "maximum": 100
          },
          "revenueSharePercentage": {
            "type": "number",
            "description": "Le pourcentage de revenus partagé avec le marchand.",
            "format": "float",
            "minimum": 0,
            "maximum": 100
          }
        }
      },
      "bookmark": {
        "type": "object",
        "description": "Un objet contenant les détails du produit Bookmark.",
        "nullable": true,
        "properties": {
          "packageFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "packageName": {
            "type": "string",
            "description": "Le forfait associé au produit Bookmark.",
            "maxLength": 50,
            "nullable": true
          },
          "licenseName": {
            "type": "string",
            "description": "Le nom de la licence associée au produit Bookmark.",
            "maxLength": 50,
            "nullable": true
          },
          "referringSalesRepresentativeCode": {
            "type": "string",
            "description": "Le code du représentant commercial référant le produit Bookmark.",
            "maxLength": 50,
            "nullable": true
          },
          "bundleName": {
            "type": "string",
            "description": "Le nom du forfait associé au produit Bookmark.",
            "maxLength": 50,
            "nullable": true
          },
          "hasShoppingCard": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si le produit Bookmark dispose d'une option carte de magasinage."
          },
          "shoppingCardOptionName": {
            "type": "string",
            "description": "Le nom de l'option carte de magasinage associée au produit Bookmark.",
            "maxLength": 50,
            "nullable": true
          }
        }
      },
      "bookmarkPro": {
        "type": "object",
        "description": "Un objet contenant les détails du produit Bookmark Pro.",
        "nullable": true,
        "properties": {
          "professionalFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "referringSalesRepresentativeCode": {
            "type": "string",
            "nullable": true,
            "description": "Le code du représentant commercial référant le produit Bookmark Pro.",
            "maxLength": 50
          }
        }
      },
      "thirdPartyGiftCardFeeDetails": {
        "type": "object",
        "description": "Un objet représentant les frais associés aux cartes-cadeaux de tiers.",
        "nullable": true,
        "properties": {
          "programMonthlyFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "perTransactionFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          }
        }
      },
      "ueat": {
        "type": "object",
        "description": "Un objet contenant les détails du produit Ueat.",
        "nullable": true,
        "properties": {
          "plannedGoLiveDate": {
            "type": "string",
            "description": "La date de mise en service prévue pour le produit Ueat.",
            "format": "date",
            "example": "2010-02-21",
            "nullable": true
          },
          "numberOfMenuItems": {
            "type": "integer",
            "description": "Le nombre d'éléments de menu disponibles dans le produit Ueat.",
            "format": "int32",
            "minimum": 1,
            "maximum": 10000
          },
          "isMemberOfArq": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si le produit Ueat est membre du programme ARQ."
          },
          "averageAmountSpent": {
            "nullable": true,
            "type": "object",
            "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "pointOfSaleSystemName": {
            "type": "string",
            "description": "Le nom du système de point de vente utilisé avec le produit Ueat.",
            "maxLength": 100,
            "nullable": true
          },
          "feeDetails": {
            "type": "object",
            "nullable": true,
            "description": "Un objet représentant les frais associés au produit Ueat.",
            "properties": {
              "implementationFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "additionalBoutiqueFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "additionalBoutiqueOneTimeFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "mobileAppFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "mobileAppOneTimeFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "webCreationAndHostingFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "webCreationAndHostingOneTimeFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "payAtRestaurantPerTransactionFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "payAtRestaurantFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "oneTimeTaxFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              }
            }
          },
          "isLiveIn30": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si le produit Ueat est en ligne dans 30 jours."
          },
          "additionalNote": {
            "type": "string",
            "description": "Note ou commentaires supplémentaires liés au produit Ueat.",
            "maxLength": 500,
            "nullable": true
          },
          "additionalLocations": {
            "type": "array",
            "maxItems": 10,
            "description": "Une liste d'emplacements supplémentaires associés au produit Ueat.",
            "items": {
              "$ref": "#/components/schemas/address"
            }
          }
        }
      },
      "monerisGoAppetit": {
        "type": "object",
        "description": "Un objet contenant les détails du produit Moneris Go Appetit.",
        "nullable": true,
        "properties": {
          "softwarePackageName": {
            "type": "string",
            "description": "Le nom du progiciel associé au produit Moneris Go Appetit.",
            "maxLength": 100,
            "nullable": true
          },
          "referringSalesRepresentativeCode": {
            "type": "string",
            "nullable": true,
            "description": "Le code du représentant commercial référant le produit Moneris Go Appetit.",
            "maxLength": 50
          },
          "hasDevice": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si le produit Moneris Go Appetit inclut un dispositif."
          },
          "timeZoneName": {
            "type": "string",
            "description": "Le fuseau horaire associé au produit Moneris Go Appetit.",
            "maxLength": 50,
            "nullable": true
          },
          "feeDetails": {
            "type": "object",
            "nullable": true,
            "description": "Un objet représentant les frais associés au produit Moneris Go Appetit.",
            "properties": {
              "softwarePackageFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "tabletLicenseFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "reservationFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "onlineOrderingFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              }
            }
          }
        }
      },
      "webCreationPackagesFeeDetails": {
        "type": "object",
        "description": "Un objet représentant les frais associés aux forfaits de création web.",
        "nullable": true,
        "properties": {
          "standardPlusFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "optionalServicesFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          }
        }
      },
      "installmentsFeeDetails": {
        "type": "object",
        "description": "Un objet représentant les frais associés aux paiements par versements.",
        "nullable": true,
        "properties": {
          "monerisVisaInstallmentsFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "visaInstallmentsAccessFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          }
        }
      },
      "wixPointOfSale": {
        "type": "object",
        "description": "Un objet contenant les détails du produit Wix Point of Sale.",
        "nullable": true,
        "properties": {
          "hasDevice": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si le produit Wix Point of Sale inclut un dispositif."
          },
          "lanesNumber": {
            "type": "integer",
            "description": "Le nombre de voies disponibles pour le produit Wix Point of Sale.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "wixJson": {
            "type": "string",
            "description": "Une chaîne JSON contenant des détails supplémentaires sur le produit Wix Point of Sale.",
            "maxLength": 1000,
            "nullable": true
          },
          "softwareAccessFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          }
        }
      },
      "p2pe": {
        "type": "object",
        "description": "Un objet contenant les détails du produit P2PE.",
        "nullable": true,
        "properties": {
          "transactionVolume": {
            "type": "integer",
            "description": "Le volume de transactions pour le produit P2PE.",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000000
          },
          "quantity": {
            "type": "integer",
            "description": "La quantité de dispositifs P2PE.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "feeDetails": {
            "type": "object",
            "description": "Un objet représentant les frais associés au produit P2PE.",
            "nullable": true,
            "properties": {
              "indoorFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "outdoorFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "transactionFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              },
              "solutionFee": {
                "nullable": true,
                "type": "object",
                "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
                "properties": {
                  "feeType": {
                    "$ref": "#/components/schemas/feeType"
                  },
                  "unitPrice": {
                    "$ref": "#/components/schemas/money"
                  },
                  "taxes": {
                    "type": "array",
                    "description": "A list of tax items associated with the fee.",
                    "items": {
                      "$ref": "#/components/schemas/tax"
                    },
                    "maxItems": 10
                  },
                  "frequency": {
                    "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                    "type": "string",
                    "nullable": true,
                    "maxLength": 20,
                    "enum": [
                      "DAILY",
                      "MONTHLY",
                      "QUARTERLY",
                      "ONE_OFF",
                      "ANNUALLY"
                    ]
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 30,
                    "example": 3
                  },
                  "isApproved": {
                    "$ref": "#/components/schemas/isApproved"
                  },
                  "waivePeriod": {
                    "$ref": "#/components/schemas/waivePeriod"
                  }
                },
                "required": [
                  "unitPrice"
                ]
              }
            }
          }
        }
      },
      "wirelessFeeDetails": {
        "type": "object",
        "description": "Une liste de frais associés au produit sans fil.",
        "nullable": true,
        "properties": {
          "activationFee": {
            "description": "Frais uniques facturés pour l'activation du service sans fil.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "goSoftwareFee": {
            "description": "Frais associés au logiciel Moneris Go pour les dispositifs sans fil.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          }
        }
      },
      "wireless": {
        "type": "object",
        "description": "Un objet contenant les détails du produit de connectivité sans fil.",
        "nullable": true,
        "properties": {
          "terminals": {
            "type": "array",
            "description": "Une liste de terminaux de paiement disponibles au comptoir.",
            "items": {
              "$ref": "#/components/schemas/terminal"
            },
            "maxItems": 21
          },
          "feeDetails": {
            "$ref": "#/components/schemas/wirelessFeeDetails"
          }
        }
      },
      "cardNotPresentConfigurationCode": {
        "nullable": true,
        "type": "string",
        "description": "Un code de configuration utilisé pour identifier les paramètres variables pour les transactions.",
        "maxLength": 50
      },
      "monerisGatewayFeeDetails": {
        "type": "object",
        "description": "Une liste de frais associés à Moneris Gateway.",
        "nullable": true,
        "properties": {
          "baseFee": {
            "description": "Les frais standard facturés pour un produit.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "recurringFee": {
            "description": "Frais facturés de manière régulière.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "batchProcessingFee": {
            "description": "Indique si des frais s'appliquent aux services de traitement par lots.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "cardPresentDebitFee": {
            "description": "Représente les frais appliqués aux transactions par carte de débit.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "levelTwoThreeFee": {
            "description": "Frais associés au traitement de niveau 2 ou niveau 3.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "setupFee": {
            "description": "Frais uniques facturés pour la configuration initiale et l'intégration du produit.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "vaultFee": {
            "description": "Frais facturés pour l'utilisation d'un service de coffre-fort de cartes sécurisé.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "riskToolFee": {
            "description": "Frais associés à l'utilisation d'outils de prévention de la fraude et de gestion des risques.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "addressVerificationServiceFee": {
            "description": "Frais facturés pour l'utilisation du service de vérification d'adresse.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "verifiedByVisaFee": {
            "description": "Frais associés au service Verified by Visa.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "vaultOneTimeFee": {
            "description": "Frais uniques facturés pour la configuration initiale ou l'activation d'un service de coffre-fort de cartes.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "vaultPerTransactionFee": {
            "description": "Frais facturés pour chaque transaction qui utilise les informations de paiement stockées.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "vaultPerClickPerTransactionFee": {
            "description": "Frais facturés pour chaque transaction traitée en utilisant une méthode de paiement tokenisée du coffre-fort, initiée par un seul clic ou une action.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "interacRegistrationFee": {
            "description": "Frais associés à l'enregistrement d'un marchand ou d'un compte pour les services Interac.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "interacFlatFee": {
            "description": "Frais fixes appliqués à chaque transaction traitée via le réseau Interac.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "interacRateFee": {
            "description": "Frais basés sur un pourcentage appliqués aux transactions traitées via le réseau Interac.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "transactionFee": {
            "description": "Frais appliqués par transaction individuelle traitée.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "monthlyFee": {
            "description": "Frais récurrents facturés mensuellement pour l'accès continu.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "boostMonthlyFee": {
            "description": "Frais récurrents supplémentaires facturés mensuellement pour des services ou fonctionnalités améliorés.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "netSuiteMonthlyFee": {
            "description": "Frais mensuels récurrents pour l'intégration ou l'utilisation de la plateforme NetSuite.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "tokenSharingSetupFee": {
            "description": "Frais uniques facturés pour la configuration des services de partage de jetons.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "eCommerceAssessmentTransactionFee": {
            "description": "Frais appliqués aux transactions évaluées pour le risque e-commerce.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "eCommerceCardBrandTransactionFee": {
            "description": "Frais appliqués aux transactions e-commerce basés sur la marque de carte.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "eCommerceMerchantDiscountRateFee": {
            "description": "Le taux de remise marchand pour les transactions e-commerce.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "eCommerceTransactionFee": {
            "description": "Frais appliqués à chaque transaction e-commerce traitée.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "kountFee": {
            "description": "Frais associés à l'utilisation de l'outil Kount.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "kountOneTimeFee": {
            "description": "Frais uniques facturés pour la configuration initiale ou l'activation de Kount.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "kountPerTransactionFee": {
            "description": "Frais appliqués à chaque transaction traitée en utilisant Kount.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "visa3dSecureAuthenticationTransactionFee": {
            "description": "Frais appliqués aux transactions traitées en utilisant le protocole d'authentification 3D Secure de Visa.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "amex3dSecureAuthenticationTransactionFee": {
            "description": "Frais appliqués aux transactions traitées en utilisant le protocole d'authentification 3D Secure d'Amex.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "mastercard3dSecureAuthenticationTransactionFee": {
            "description": "Frais appliqués aux transactions traitées en utilisant le protocole d'authentification 3D Secure de Mastercard.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "visa3dSecureAuthenticationMerchantDiscountRateFee": {
            "description": "Le taux de remise marchand appliqué aux transactions traitées via le protocole d'authentification 3D Secure de Visa.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "amex3dSecureAuthenticationMerchantDiscountRateFee": {
            "description": "Le taux de remise marchand appliqué aux transactions traitées via le protocole d'authentification 3D Secure d'Amex.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "mastercard3dSecureAuthenticationMerchantDiscountRateFee": {
            "description": "Le taux de remise marchand appliqué aux transactions traitées via le protocole d'authentification 3D Secure de Mastercard.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          }
        }
      },
      "monerisGateway": {
        "type": "object",
        "description": "Un objet contenant les détails du produit Moneris Gateway.",
        "nullable": true,
        "properties": {
          "isPaymentRequestForMonerisGateway": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si la demande de paiement est spécifiquement pour le produit Moneris Gateway."
          },
          "isEcommerce": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si le produit est destiné aux environnements en ligne."
          },
          "cardNotPresentConfigurationCode": {
            "$ref": "#/components/schemas/cardNotPresentConfigurationCode"
          },
          "feeDetails": {
            "$ref": "#/components/schemas/monerisGatewayFeeDetails"
          }
        }
      },
      "monerisGoPointOfSaleRetailFeeDetails": {
        "type": "object",
        "description": "Une liste de frais associés au point de vente Moneris Go pour le commerce de détail.",
        "nullable": true,
        "properties": {
          "goRetailFee": {
            "description": "Frais associés aux opérations de commerce de détail.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          }
        }
      },
      "monerisGoPointOfSaleRetail": {
        "type": "object",
        "description": "Un objet contenant les détails du point de vente Moneris Go pour le commerce de détail.",
        "nullable": true,
        "properties": {
          "feeDetails": {
            "$ref": "#/components/schemas/monerisGoPointOfSaleRetailFeeDetails"
          }
        }
      },
      "pricingModel": {
        "type": "string",
        "description": "Définit la structure de tarification pour les services fournis.",
        "nullable": true,
        "maxLength": 30
      },
      "monerisGoPortalFeeDetails": {
        "type": "object",
        "description": "Une liste de frais associés au portail Moneris Go.",
        "nullable": true,
        "properties": {
          "setupFee": {
            "description": "Frais uniques facturés pour la configuration initiale et l'intégration du produit.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "accessFee": {
            "description": "Frais facturés pour l'accès au service.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          }
        }
      },
      "monerisGoPortal": {
        "type": "object",
        "description": "Un objet contenant les détails du portail Moneris Go.",
        "nullable": true,
        "properties": {
          "pricingModel": {
            "$ref": "#/components/schemas/pricingModel"
          },
          "feeDetails": {
            "$ref": "#/components/schemas/monerisGoPortalFeeDetails"
          }
        }
      },
      "payDropPlusFeeDetails": {
        "type": "object",
        "description": "Une liste de frais associés à PayD Pro Plus.",
        "nullable": true,
        "properties": {
          "subTotalFee": {
            "description": "La somme de tous les frais applicables avant tous frais supplémentaires.",
            "nullable": true,
            "type": "object",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          }
        }
      },
      "payDropPlus": {
        "type": "object",
        "description": "Un objet contenant les détails de PayD Pro Plus.",
        "nullable": true,
        "properties": {
          "feeDetails": {
            "$ref": "#/components/schemas/payDropPlusFeeDetails"
          }
        }
      },
      "productDetails": {
        "type": "object",
        "description": "Un objet contenant tous les détails relatifs à un produit.",
        "properties": {
          "isPointOfSaleSoftware": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si la transaction ou le dispositif utilise une solution logicielle Point de Vente."
          },
          "monerisAdvance": {
            "$ref": "#/components/schemas/monerisAdvance"
          },
          "counterTopTerminals": {
            "$ref": "#/components/schemas/counterTopTerminals"
          },
          "integratedProduct": {
            "$ref": "#/components/schemas/integratedProduct"
          },
          "storeAndForward": {
            "$ref": "#/components/schemas/storeAndForward"
          },
          "petroTrak": {
            "$ref": "#/components/schemas/petroTrak"
          },
          "multiCurrency": {
            "$ref": "#/components/schemas/multiCurrencyProduct"
          },
          "dynamicCurrencyConversion": {
            "$ref": "#/components/schemas/multiCurrencyProduct"
          },
          "bookmark": {
            "$ref": "#/components/schemas/bookmark"
          },
          "bookmarkPro": {
            "$ref": "#/components/schemas/bookmarkPro"
          },
          "thirdPartyGiftCardFeeDetails": {
            "$ref": "#/components/schemas/thirdPartyGiftCardFeeDetails"
          },
          "ueat": {
            "$ref": "#/components/schemas/ueat"
          },
          "monerisGoAppetit": {
            "$ref": "#/components/schemas/monerisGoAppetit"
          },
          "webCreationPackagesFeeDetails": {
            "$ref": "#/components/schemas/webCreationPackagesFeeDetails"
          },
          "installmentsFeeDetails": {
            "$ref": "#/components/schemas/installmentsFeeDetails"
          },
          "wixPointOfSale": {
            "$ref": "#/components/schemas/wixPointOfSale"
          },
          "p2pe": {
            "$ref": "#/components/schemas/p2pe"
          },
          "wireless": {
            "$ref": "#/components/schemas/wireless"
          },
          "monerisGateway": {
            "$ref": "#/components/schemas/monerisGateway"
          },
          "monerisGoPointOfSaleRetail": {
            "$ref": "#/components/schemas/monerisGoPointOfSaleRetail"
          },
          "monerisGoPortal": {
            "$ref": "#/components/schemas/monerisGoPortal"
          },
          "payDropPlus": {
            "$ref": "#/components/schemas/payDropPlus"
          }
        }
      },
      "isAutoAdjudicationRequired": {
        "type": "boolean",
        "description": "Un indicateur booléen indiquant si le processus d'adjudication automatique est requis."
      },
      "isExpeditedOrder": {
        "type": "boolean",
        "description": "Un indicateur booléen indiquant si une commande est traitée comme une commande urgente ou accélérée."
      },
      "merchantDiscountRateType": {
        "type": "string",
        "description": "Le type de taux de remise marchand appliqué à un plan de carte.",
        "nullable": true,
        "enum": [
          "NET",
          "GROSS",
          "GROSS_GROSS"
        ]
      },
      "transactionFeeParameterCode": {
        "type": "string",
        "description": "Le code qui identifie les paramètres associés aux frais de transaction pour un plan de carte spécifique.",
        "nullable": true,
        "maxLength": 20,
        "enum": [
          "ATIP",
          "INDI",
          "KATZ",
          "INTP",
          "MCR3",
          "PLQ2",
          "SHOP",
          "CF02",
          "INGB",
          "Q200",
          "PLQ1",
          "VISA",
          "GNDS",
          "TXLP",
          "FLAT",
          "INDG",
          "CFIB",
          "SER4",
          "SER3",
          "TIRR",
          "TR00",
          "DIEN",
          "AMZN",
          "CF01",
          "TR02",
          "MCR1",
          "ID58",
          "INDN",
          "SDMI",
          "SEAR",
          "CRAV",
          "CITI",
          "CDMV",
          "CTP2",
          "SIMS",
          "DOLA",
          "PAYM",
          "ROGE",
          "CTP1",
          "GOVC",
          "PREC",
          "CITB",
          "ID53",
          "SIMP",
          "COST",
          "TTMK",
          "SER1"
        ]
      },
      "cardBrandTemplateIdentifier": {
        "type": "string",
        "description": "Identifiant unique qui lie à un modèle prédéfini associé à une marque de carte spécifique.",
        "nullable": true,
        "maxLength": 10
      },
      "selectedPlans": {
        "type": "array",
        "description": "Une liste des plans sélectionnés associés au plan de carte.",
        "maxItems": 8,
        "uniqueItems": true,
        "items": {
          "type": "string",
          "enum": [
            "AMEX",
            "DISCOVER",
            "INTERAC",
            "MASTERCARD",
            "MASTERCARD_DEBIT",
            "UNION_PAY",
            "VISA",
            "VISA_DEBIT"
          ]
        }
      },
      "isCommunicationsOptOut": {
        "type": "boolean",
        "description": "Un indicateur booléen indiquant si le client a choisi de ne pas recevoir de communications liées au plan de franchise."
      },
      "cardFeeDetails": {
        "type": "object",
        "description": "Un objet contenant les détails des frais du plan de carte.",
        "nullable": true,
        "properties": {
          "authorizationFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "refundAmount": {
            "description": "Un montant numérique représentant le montant d'argent remboursé à un client dans le cadre du plan de franchise.",
            "nullable": true,
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "settlementAmount": {
            "nullable": true,
            "type": "object",
            "description": "Montant monétaire. \nRemarque : La valeur doit être exprimée en cents. Par conséquent, 10,59 $ doivent être envoyés en tant que 1059.\n",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          }
        }
      },
      "merchantDiscountRate": {
        "type": "number",
        "description": "Le taux de remise marchand appliqué aux transactions sous le plan de transaction.",
        "format": "double",
        "default": 0,
        "minimum": 0,
        "maximum": 1
      },
      "minimumMerchantDiscountRate": {
        "type": "number",
        "description": "Le taux de remise marchand minimum qui s'applique sous le plan de transaction.",
        "format": "double",
        "default": 0,
        "minimum": 0,
        "maximum": 1
      },
      "maximumMerchantDiscountRate": {
        "type": "number",
        "description": "Le taux de remise marchand maximum qui s'applique sous le plan de transaction.",
        "default": 0,
        "format": "double",
        "minimum": 0,
        "maximum": 1
      },
      "transactionRate": {
        "type": "number",
        "description": "L'événement de traitement de paiement unique sous le plan de transaction.",
        "default": 0,
        "format": "double",
        "minimum": 0,
        "maximum": 1
      },
      "disqualifiedTransactionMerchantDiscountRate": {
        "type": "number",
        "description": "Le taux de remise marchand appliqué aux transactions qui ne répondent pas à certains critères de qualification sous le plan de transaction.",
        "default": 0,
        "format": "double",
        "minimum": 0,
        "maximum": 1
      },
      "transactionPlanTier": {
        "type": "string",
        "description": "Le niveau ou la bande dans le plan de transaction.",
        "nullable": true,
        "maxLength": 10
      },
      "feeTypeCode": {
        "type": "string",
        "description": "Un code qui identifie le type de frais associé à une transaction.",
        "nullable": true,
        "enum": [
          "ACCESS_POINT_CHARGE_FOR_VISA",
          "AFD_PRE_AUTHORIZATION_TEST_FEE",
          "AMEX_INBOUND_FEE",
          "AMEX_JCB_PARTICIPATION_FEE",
          "CARD_BRAND_FEES",
          "CARD_BRAND_MAINTENANCE_FEE",
          "CNP_MANUAL_ENTRY_FEE",
          "CONSUMER_BILL_PAYMENT_SERVICE",
          "DISCOVER_ASSESSMENT_FEE",
          "DISCOVER_INTERNATIONAL_PROCESS",
          "DISPUTE_ADJUSTMENT",
          "DO_NOT_USE",
          "DO_NOT_USE_ERROR_SET_UP",
          "DO_NOT_USE_REDUNDANT",
          "ELECTRONIC_COMMERCE_FEE",
          "FACILITY_USE_FEE",
          "GATEWAY_TRANSACTION_FEE",
          "HAULAGE_FEE",
          "HIGH_RISK_TRANSACTION_FEE",
          "INSTALLMENT_ELIGIBILITY",
          "INSTALLMENT_FUNDING",
          "INSTALLMENT_TRANSACTION",
          "INTERAC_ASSESSMENT_FEE",
          "INTERAC_DIRECT_ASSESSMENT",
          "INTERAC_ONLINE_FEE",
          "IVR_TRANSACTION_FEE",
          "KIOSK_TRANSACTION_FEE",
          "MASTERCARD_ACQUIRER_LICENSE_FEE",
          "MASTERCARD_ASSESSMENT_FEE",
          "MASTERCARD_ASSESSMENT_FEE_FOREIGN",
          "MASTERCARD_ASSESSMENT_TRANSACTION_FEE_CREDIT",
          "MASTERCARD_FLEX_PROGRAM_FEE",
          "MASTERCARD_FREIGHT_ASSESSMENT",
          "MASTERCARD_GL_WH_TRAVEL_TRANSACTION_PROGRAM_B2B_FEE",
          "MASTERCARD_HUMANITARIAN_ASSESSMENT",
          "MASTERCARD_INTERNATIONAL_TRANSACTION_PROCESSING_FEE",
          "MASTERCARD_MAIL_PHONE_ORDER",
          "MASTERCARD_PRE_AUTHORIZATION_AFD",
          "MASTERCARD_PRE_AUTHORIZATION_AFD_MINIMUM",
          "MASTERCARD_SAFETY_NET_ACQUIRER_FEE",
          "MDR_PROCESSING_FEE",
          "MONERIS_MARKETPLACE_SERVICE",
          "NETWORK_CONNECTIVITY_FEE",
          "NON_QUALIFIED_FEE",
          "OPERATOR_ADMINISTRATION",
          "P2PE_BLUEFIN_SOLUTION",
          "P2PE_COSTCO_BLUEFIN_SOLUTION",
          "P2PE_MONERIS_SOLUTION",
          "P2PE_TRANSACTION_FEE",
          "PARTNER_TRANSACTION_FEE",
          "REFUND_TRANSACTION_FEE",
          "RETURN_ADJUSTMENT",
          "ROYALTY_FEE",
          "SETTLEMENT_FEE",
          "SOFTPOS_TAP_TO_PAY",
          "STERLING_INTERAC_REMUNERATION",
          "SURCHARGE_ENABLEMENT_FEE",
          "SURCHARGE_FEE",
          "TEST_FEE",
          "THREE_DS_AUTHENTICATION_FEE",
          "UNIONPAY_SERVICE_FEE",
          "VAR_TRANSACTION_FEE",
          "VISA_ASSESSMENT_FEE",
          "VISA_B2B_VIRTUAL_SERVICE_FEE",
          "VISA_COMMERCIAL_SOLUTIONS_ASSISTANCE",
          "VISA_DIRECT_ASSESSMENT_FEE",
          "VISA_FOREIGN_ASSESSMENT",
          "VISA_FOREIGN_FEE",
          "VISA_MCP_NON_DOMESTIC_CHARGE",
          "VISA_NON_DOMESTIC_SETTLEMENT",
          "VISA_SYSTEM_ACCESS_FEE"
        ]
      },
      "paymentModeCode": {
        "type": "string",
        "description": "Le type de mode de paiement associé à une transaction sous le plan de transaction.",
        "nullable": true,
        "maxLength": 10
      },
      "minimumDisqualifiedTransactionMerchantDiscountRate": {
        "type": "number",
        "description": "La valeur minimale du taux de remise marchand appliquée aux transactions qui ne répondent pas à certains critères de qualification sous le plan de transaction.",
        "default": 0,
        "format": "double",
        "minimum": 0,
        "maximum": 1
      },
      "maximumDisqualifiedTransactionMerchantDiscountRate": {
        "type": "number",
        "description": "La valeur maximale du taux de remise marchand appliquée aux transactions qui ne répondent pas à certains critères de qualification sous le plan de transaction.",
        "default": 0,
        "format": "double",
        "minimum": 0,
        "maximum": 1
      },
      "transactionPlan": {
        "type": "object",
        "description": "Un objet contenant les détails du plan de transaction.",
        "properties": {
          "merchantDiscountRate": {
            "$ref": "#/components/schemas/merchantDiscountRate"
          },
          "minimumMerchantDiscountRate": {
            "$ref": "#/components/schemas/minimumMerchantDiscountRate"
          },
          "maximumMerchantDiscountRate": {
            "$ref": "#/components/schemas/maximumMerchantDiscountRate"
          },
          "transactionRate": {
            "$ref": "#/components/schemas/transactionRate"
          },
          "minimumTransactionValue": {
            "description": "La valeur de transaction minimale qui s'applique dans le cadre du plan de transaction.",
            "nullable": true,
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "maximumTransactionValue": {
            "description": "La valeur de transaction maximale qui s'applique dans le cadre du plan de transaction.",
            "nullable": true,
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/amount"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "example": {
              "amount": 16000,
              "currency": "CAD"
            }
          },
          "disqualifiedTransactionMerchantDiscountRate": {
            "$ref": "#/components/schemas/disqualifiedTransactionMerchantDiscountRate"
          },
          "transactionPlanTier": {
            "$ref": "#/components/schemas/transactionPlanTier"
          },
          "feeTypeCode": {
            "$ref": "#/components/schemas/feeTypeCode"
          },
          "paymentModeCode": {
            "$ref": "#/components/schemas/paymentModeCode"
          },
          "minimumDisqualifiedTransactionMerchantDiscountRate": {
            "$ref": "#/components/schemas/minimumDisqualifiedTransactionMerchantDiscountRate"
          },
          "maximumDisqualifiedTransactionMerchantDiscountRate": {
            "$ref": "#/components/schemas/maximumDisqualifiedTransactionMerchantDiscountRate"
          }
        }
      },
      "transactionPlans": {
        "type": "array",
        "description": "Une liste d'éléments de transaction.",
        "items": {
          "$ref": "#/components/schemas/transactionPlan"
        },
        "maxItems": 20
      },
      "foreignTransactionPercentageFee": {
        "type": "number",
        "description": "Le pourcentage de frais appliqué aux transactions impliquant des cartes étrangères.",
        "default": 0,
        "format": "float",
        "minimum": 0,
        "maximum": 100
      },
      "domesticTransactionPercentageFee": {
        "type": "number",
        "description": "Le pourcentage de frais appliqué aux transactions impliquant des cartes domestiques ou des paiements dans le même pays.",
        "default": 0,
        "format": "float",
        "minimum": 0,
        "maximum": 100
      },
      "foreignCardOriginCode": {
        "type": "string",
        "description": "Un code utilisé pour identifier l'origine d'une carte étrangère dans une transaction sous le plan de marque de carte.",
        "nullable": true,
        "maxLength": 10
      },
      "domesticCardOriginCode": {
        "type": "string",
        "description": "Un code utilisé pour identifier l'origine d'une carte domestique dans une transaction sous le plan de marque de carte.",
        "nullable": true,
        "maxLength": 10
      },
      "cardBrandPlan": {
        "type": "object",
        "description": "Un objet contenant les détails du plan de marque de carte.",
        "properties": {
          "foreignTransactionPercentageFee": {
            "$ref": "#/components/schemas/foreignTransactionPercentageFee"
          },
          "domesticTransactionPercentageFee": {
            "$ref": "#/components/schemas/domesticTransactionPercentageFee"
          },
          "domesticFlatFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "foreignCardOriginCode": {
            "$ref": "#/components/schemas/foreignCardOriginCode"
          },
          "domesticCardOriginCode": {
            "$ref": "#/components/schemas/domesticCardOriginCode"
          }
        }
      },
      "cardBrandPlans": {
        "type": "array",
        "description": "Une liste d'éléments de marque de carte.",
        "items": {
          "$ref": "#/components/schemas/cardBrandPlan"
        },
        "maxItems": 20
      },
      "cardOriginCode": {
        "type": "string",
        "description": "Un code qui indique l'origine de la carte.",
        "nullable": true,
        "enum": [
          "IRAC",
          "IRAR",
          "FRGN",
          "FRGX",
          "ALL",
          "IERR",
          "ONUS",
          "IERX"
        ]
      },
      "assessmentPlan": {
        "type": "object",
        "description": "Un objet contenant tous les détails relatifs au plan d'évaluation.",
        "properties": {
          "merchantDiscountRate": {
            "description": "Le taux d'escompte marchand appliqué aux transactions dans le cadre du plan d'évaluation.",
            "type": "number",
            "format": "double",
            "default": 0,
            "minimum": 0,
            "maximum": 1
          },
          "transactionRate": {
            "description": "Le taux de transaction appliqué aux transactions dans le cadre du plan d'évaluation.",
            "type": "number",
            "default": 0,
            "format": "double",
            "minimum": 0,
            "maximum": 1
          },
          "feeTypeCode": {
            "$ref": "#/components/schemas/feeTypeCode"
          },
          "cardOriginCode": {
            "$ref": "#/components/schemas/cardOriginCode"
          }
        }
      },
      "assessmentPlans": {
        "type": "array",
        "description": "Une liste d'éléments d'évaluation.",
        "items": {
          "$ref": "#/components/schemas/assessmentPlan"
        },
        "maxItems": 20
      },
      "serviceFeeDetails": {
        "type": "object",
        "description": "Un objet contenant les détails des frais de service.",
        "nullable": true,
        "properties": {
          "authorizationFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "maintenanceFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          }
        }
      },
      "otherFinancialInstitutionCardType": {
        "type": "string",
        "description": "Représente le type spécifique de carte utilisé dans le plan de carte de l'institution OFI.",
        "nullable": true,
        "enum": [
          "AMEX",
          "CHEQUE_AUTHORIZATION",
          "DINERS",
          "DISCOVER",
          "MASTERCARD",
          "VISA"
        ]
      },
      "cardAcquirer": {
        "type": "string",
        "description": "Un attribut de chaîne représentant la banque ou l'institution acquéreuse.",
        "nullable": true,
        "maxLength": 10
      },
      "merchantNumber": {
        "type": "string",
        "description": "Identifie le marchand dans le système de l'acquéreur.",
        "nullable": true,
        "maxLength": 10
      },
      "region": {
        "type": "string",
        "description": "Spécifie la zone géographique, la province ou le territoire pertinent pour l'opération.",
        "nullable": true,
        "maxLength": 10
      },
      "sch-orders_transitNumber": {
        "type": "string",
        "description": "Attribut représentant le numéro de succursale à cinq chiffres d'une institution financière.",
        "nullable": true,
        "maxLength": 10
      },
      "sch-orders_accountNumber": {
        "type": "string",
        "description": "Attribut qui représente l'identifiant unique d'un compte bancaire.",
        "nullable": true,
        "maxLength": 10
      },
      "depositType": {
        "type": "string",
        "description": "Indique le type d'arrangement de dépôt pour le compte marchand.",
        "nullable": true,
        "maxLength": 10
      },
      "authorizationDescription": {
        "type": "string",
        "description": "Une description du processus d'autorisation ou des exigences pour la transaction.",
        "nullable": true,
        "maxLength": 10
      },
      "cardOption": {
        "type": "string",
        "description": "Spécifie le type de carte utilisé ou l'option de service pour un plan de transaction.",
        "nullable": true,
        "maxLength": 10
      },
      "ofiCardPlan": {
        "type": "object",
        "description": "Un objet contenant tous les détails du plan de carte d'une autre institution financière.",
        "properties": {
          "otherFinancialInstitutionCardType": {
            "$ref": "#/components/schemas/otherFinancialInstitutionCardType"
          },
          "cardAcquirer": {
            "$ref": "#/components/schemas/cardAcquirer"
          },
          "merchantNumber": {
            "$ref": "#/components/schemas/merchantNumber"
          },
          "region": {
            "$ref": "#/components/schemas/region"
          },
          "transitNumber": {
            "$ref": "#/components/schemas/sch-orders_transitNumber"
          },
          "accountNumber": {
            "$ref": "#/components/schemas/sch-orders_accountNumber"
          },
          "transactionFee": {
            "nullable": true,
            "type": "object",
            "description": "Représente une charge monétaire appliquée à une transaction ou un service.",
            "properties": {
              "feeType": {
                "$ref": "#/components/schemas/feeType"
              },
              "unitPrice": {
                "$ref": "#/components/schemas/money"
              },
              "taxes": {
                "type": "array",
                "description": "A list of tax items associated with the fee.",
                "items": {
                  "$ref": "#/components/schemas/tax"
                },
                "maxItems": 10
              },
              "frequency": {
                "description": "La fréquence à laquelle la taxe est appliquée, telle que mensuelle ou annuelle.",
                "type": "string",
                "nullable": true,
                "maxLength": 20,
                "enum": [
                  "DAILY",
                  "MONTHLY",
                  "QUARTERLY",
                  "ONE_OFF",
                  "ANNUALLY"
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Représente le nombre de fois qu'une taxe est appliquée en fonction de sa fréquence.",
                "format": "int32",
                "minimum": 1,
                "maximum": 30,
                "example": 3
              },
              "isApproved": {
                "$ref": "#/components/schemas/isApproved"
              },
              "waivePeriod": {
                "$ref": "#/components/schemas/waivePeriod"
              }
            },
            "required": [
              "unitPrice"
            ]
          },
          "depositType": {
            "$ref": "#/components/schemas/depositType"
          },
          "authorizationDescription": {
            "$ref": "#/components/schemas/authorizationDescription"
          },
          "cardOption": {
            "$ref": "#/components/schemas/cardOption"
          }
        }
      },
      "otherFinancialInstitutionCards": {
        "type": "array",
        "description": "Une liste des cartes d'autres institutions financières.",
        "items": {
          "$ref": "#/components/schemas/ofiCardPlan"
        },
        "maxItems": 20
      },
      "programs": {
        "type": "array",
        "description": "Une liste de programmes associés au plan de carte.",
        "maxItems": 6,
        "uniqueItems": true,
        "items": {
          "type": "string",
          "enum": [
            "AMEX_EXPRESS",
            "DISCOVER_ZIP",
            "INTERAC_FLASH",
            "MASTERCARD_PAY_PASS",
            "UNION_PAY_QUICK_PASS",
            "VISA_VEPS"
          ]
        }
      },
      "solutionId": {
        "description": "Un identifiant unique pour l'objet de solutions.",
        "type": "integer",
        "format": "int32",
        "example": 1
      },
      "solutionDetails": {
        "type": "object",
        "description": "Un objet contenant les détails des solutions.",
        "properties": {
          "solutionId": {
            "$ref": "#/components/schemas/solutionId"
          },
          "quantity": {
            "description": "Le nombre d'articles fournis dans la solution.",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 99,
            "example": 21
          },
          "carrier": {
            "description": "Une chaîne qui identifie le fournisseur responsable de la livraison de la solution.",
            "nullable": true,
            "type": "string",
            "enum": [
              "ROGERS",
              "TELUS"
            ]
          }
        },
        "required": [
          "solutionId",
          "quantity"
        ]
      },
      "solutions": {
        "type": "array",
        "description": "Une liste d'éléments de solution.",
        "items": {
          "$ref": "#/components/schemas/solutionDetails"
        },
        "maxItems": 5
      },
      "addressee": {
        "description": "a (natural or legal) person that gets addressed",
        "type": "object",
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/middleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "companyName": {
            "$ref": "#/components/schemas/companyName"
          }
        },
        "required": [
          "firstName",
          "lastName"
        ]
      },
      "orderCreatedBy": {
        "type": "string",
        "description": "L'individu responsable de la création de la commande.",
        "nullable": true,
        "maxLength": 100,
        "example": "pcote03@PERCOM-> PERCOMpcote03"
      },
      "createStandardOrderRequest": {
        "type": "object",
        "description": "Représente la charge utile pour soumettre une commande.",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "marketSegment": {
            "$ref": "#/components/schemas/marketSegment"
          },
          "representativeCode": {
            "$ref": "#/components/schemas/representativeCode"
          },
          "userDetails": {
            "$ref": "#/components/schemas/userDetails"
          },
          "applicablePromotions": {
            "$ref": "#/components/schemas/applicablePromotions"
          },
          "feeDetails": {
            "$ref": "#/components/schemas/feeDetails"
          },
          "applicationDetails": {
            "$ref": "#/components/schemas/applicationDetails"
          },
          "agreementModelInformation": {
            "$ref": "#/components/schemas/agreementModelInformation"
          },
          "valueAddedServices": {
            "$ref": "#/components/schemas/valueAddedServices"
          },
          "documentsStatus": {
            "$ref": "#/components/schemas/documentsStatus"
          },
          "confirmation": {
            "$ref": "#/components/schemas/confirmation"
          },
          "supplies": {
            "$ref": "#/components/schemas/supplies"
          },
          "productDetails": {
            "$ref": "#/components/schemas/productDetails"
          },
          "isAutoAdjudicationRequired": {
            "$ref": "#/components/schemas/isAutoAdjudicationRequired"
          },
          "isExpeditedOrder": {
            "$ref": "#/components/schemas/isExpeditedOrder"
          },
          "cardPlanDetails": {
            "nullable": true,
            "type": "object",
            "description": "Un objet contenant tous les détails des plans de cartes.",
            "properties": {
              "merchantDiscountRateType": {
                "$ref": "#/components/schemas/merchantDiscountRateType"
              },
              "currency": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code monétaire à trois lettres selon la norme ISO 4217. \n\nPour obtenir la liste complète des codes de devise, rendez-vous sur : https://en.wikipedia.org/wiki/ISO_4217\n",
                "minLength": 3,
                "maxLength": 4,
                "example": "CAD",
                "format": "iso-4217"
              },
              "transactionFeeParameterCode": {
                "$ref": "#/components/schemas/transactionFeeParameterCode"
              },
              "cardBrandTemplateIdentifier": {
                "$ref": "#/components/schemas/cardBrandTemplateIdentifier"
              },
              "selectedPlans": {
                "$ref": "#/components/schemas/selectedPlans"
              },
              "mastercard": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "mastercardDebit": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "visa": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "visaDebit": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "discover": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "unionPay": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "interac": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "amex": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "otherFinancialInstitutionCards": {
                "$ref": "#/components/schemas/otherFinancialInstitutionCards"
              },
              "programs": {
                "$ref": "#/components/schemas/programs"
              }
            }
          },
          "solutions": {
            "$ref": "#/components/schemas/solutions"
          },
          "deliveryAddress": {
            "type": "object",
            "nullable": true,
            "description": "Un objet contenant les détails de l'adresse de livraison.",
            "allOf": [
              {
                "$ref": "#/components/schemas/address"
              },
              {
                "$ref": "#/components/schemas/addressee"
              }
            ]
          },
          "orderCreatedBy": {
            "$ref": "#/components/schemas/orderCreatedBy"
          }
        },
        "required": [
          "idempotencyKey",
          "userDetails",
          "productDetails",
          "applicationDetails"
        ]
      },
      "bankerInformation": {
        "type": "object",
        "description": "Un objet contenant tous les détails liés aux informations bancaires.",
        "properties": {
          "bankerEmail": {
            "nullable": true,
            "type": "string",
            "format": "email",
            "description": "Contient l’adresse e-mail du client.\n\nPour connaître les protocoles de courrier électronique standard, consultez : https://www.rfc-editor.org/rfc/rfc5322\n",
            "minLength": 1,
            "maxLength": 320,
            "example": "moneris@moneris.com"
          },
          "bankerEmployeeNumber": {
            "nullable": true,
            "type": "string",
            "description": "Un attribut de chaîne qui identifie de manière unique l'employé de la banque responsable.",
            "maxLength": 20,
            "example": "242200024"
          },
          "bankerName": {
            "nullable": true,
            "type": "string",
            "description": "Le nom complet du représentant bancaire.",
            "maxLength": 50,
            "example": "MONIKA  CARNOKA"
          },
          "bankerPhoneNumber": {
            "nullable": true,
            "type": "string",
            "description": "Numéro de téléphone.",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "minLength": 3,
            "maxLength": 16,
            "example": "+18663197450"
          },
          "bankerPhoneNumberExtension": {
            "nullable": true,
            "type": "string",
            "description": "L'extension du numéro de téléphone du représentant bancaire.",
            "maxLength": 50,
            "pattern": "^[0-9]{1,6}$",
            "example": "1068"
          },
          "bankerTransitNumber": {
            "nullable": true,
            "type": "string",
            "description": "The identifier of the transit bank associated.",
            "maxLength": 5,
            "example": "00160",
            "pattern": "^\\d{5}"
          },
          "bankerBranchIdentifier": {
            "nullable": true,
            "type": "string",
            "description": "L'identifiant de la succursale de la banque où se trouve le banquier.",
            "maxLength": 5,
            "example": "2679"
          }
        }
      },
      "createPartnerBankOrderRequest": {
        "type": "object",
        "description": "Un objet contenant tous les détails de la charge utile de commande pour la banque partenaire.",
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/idempotencyKey"
          },
          "solutions": {
            "$ref": "#/components/schemas/solutions"
          },
          "deliveryAddress": {
            "type": "object",
            "nullable": true,
            "description": "Un objet contenant les détails de l'adresse de livraison.",
            "allOf": [
              {
                "$ref": "#/components/schemas/address"
              },
              {
                "$ref": "#/components/schemas/addressee"
              }
            ]
          },
          "bankerInformation": {
            "$ref": "#/components/schemas/bankerInformation"
          },
          "orderCreatedBy": {
            "$ref": "#/components/schemas/orderCreatedBy"
          }
        },
        "required": [
          "idempotencyKey",
          "solutions",
          "deliveryAddress",
          "bankerInformation"
        ]
      },
      "createOrderRequest": {
        "description": "Représente le corp de la requète pour la création d'une commande.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/createStandardOrderRequest"
          },
          {
            "$ref": "#/components/schemas/createPartnerBankOrderRequest"
          }
        ]
      },
      "merchantOrderId": {
        "type": "integer",
        "description": "Un identifiant unique attribué par le marchand pour suivre une commande client spécifique.",
        "format": "int64",
        "example": 2341123
      },
      "orderStatus": {
        "type": "string",
        "description": "Représente le statut actuel de la commande dans le système.",
        "nullable": true,
        "enum": [
          "COMPLETED",
          "DECLINED",
          "DEPLOYMENT",
          "APPLICATION_SUBMITTED",
          "CREDIT_ADJUDICATION",
          "DECLINED_APPLICATION",
          "CREDIT_ADJUDICATION_REVIEW",
          "SCHEDULE_POS_INSTALL"
        ]
      },
      "partnerName": {
        "type": "string",
        "description": "Le nom du partenaire qui a référé le prospect à l'entreprise.",
        "nullable": true,
        "maxLength": 30
      },
      "order": {
        "type": "object",
        "description": "Un objet contenant tous les détails relatifs à la réponse des détails de la commande.",
        "required": [
          "merchantOrderId",
          "merchantId"
        ],
        "properties": {
          "merchantOrderId": {
            "$ref": "#/components/schemas/merchantOrderId"
          },
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "userIdentifier": {
            "type": "string",
            "description": "Identifie l'utilisateur associé à la commande.",
            "nullable": true
          },
          "representativeCode": {
            "type": "string",
            "description": "Représente l'identifiant du représentant commercial associé à la commande.",
            "nullable": true
          },
          "adjudicationRequired": {
            "type": "boolean",
            "description": "Un drapeau booléen qui indique si la commande nécessite un processus d'adjudication."
          },
          "orderStatus": {
            "$ref": "#/components/schemas/orderStatus"
          },
          "orderType": {
            "type": "string",
            "description": "La classification ou catégorie de la commande.",
            "nullable": true,
            "enum": [
              "CHIP",
              "EXISTING_MERCHANT",
              "EXISTING_MERCHANT_ADD_POS",
              "EXISTING_MERCHANT_NEW_POS",
              "EXISTING_MERCHANT_UPGRADE_POS",
              "EXISTING_POS",
              "M9000",
              "MERCHANT_UPDATE",
              "NET_NEW_MERCHANT",
              "PRICING_UPDATE",
              "READJUDICATION",
              "SC220",
              "SC220CAN"
            ]
          },
          "orderOpenedAt": {
            "type": "string",
            "description": "Un attribut datetime qui enregistre la date et l'heure exactes où la commande a été initiée au format ISO 8601.",
            "nullable": true,
            "format": "date-time",
            "example": "2025-03-21T18:10:00Z"
          },
          "orderChangedAt": {
            "type": "string",
            "description": "Un attribut datetime qui enregistre la date et l'heure exactes où la commande a été modifiée au format ISO 8601.",
            "nullable": true,
            "format": "date-time",
            "example": "2025-03-21T18:10:00Z"
          },
          "orderApprovedAt": {
            "type": "string",
            "description": "Un attribut datetime qui enregistre la date et l'heure exactes où la commande a été approuvée au format ISO 8601.",
            "nullable": true,
            "format": "date-time",
            "example": "2025-03-21T18:10:00Z"
          },
          "orderDeclinedAt": {
            "type": "string",
            "description": "Un attribut datetime qui enregistre la date et l'heure exactes où la commande a été refusée au format ISO 8601.",
            "nullable": true,
            "format": "date-time",
            "example": "2025-03-21T18:10:00Z"
          },
          "orderClosedAt": {
            "type": "string",
            "description": "Un attribut datetime qui enregistre la date et l'heure exactes où la commande a été fermée au format ISO 8601.",
            "nullable": true,
            "format": "date-time",
            "example": "2025-03-21T18:10:00Z"
          },
          "contractSent": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si le contrat a été envoyé."
          },
          "feeDetails": {
            "$ref": "#/components/schemas/feeDetails"
          },
          "promotionInformation": {
            "type": "object",
            "description": "Un objet contenant des informations liées à la promotion associée à la commande.",
            "nullable": true,
            "properties": {
              "promotionCode": {
                "type": "string",
                "description": "Un attribut chaîne utilisé pour stocker un code promotionnel ou de réduction qui peut être appliqué à la commande.",
                "nullable": true
              },
              "promotionName": {
                "type": "string",
                "description": "Le nom ou titre de l'offre promotionnelle associée au code promotionnel.",
                "nullable": true
              },
              "promotionExpirationDate": {
                "type": "string",
                "description": "Un attribut datetime qui indique la date d'expiration de l'offre promotionnelle au format ISO 8601.",
                "nullable": true,
                "format": "date-time",
                "example": "2025-10-21T18:10:00Z"
              },
              "promotionDescription": {
                "type": "string",
                "description": "Un attribut chaîne qui fournit des informations supplémentaires sur la promotion.",
                "nullable": true
              }
            }
          },
          "supplies": {
            "$ref": "#/components/schemas/supplies"
          },
          "productDetails": {
            "nullable": true,
            "type": "object",
            "description": "Un objet contenant tous les détails relatifs à un produit.",
            "properties": {
              "isPointOfSaleSoftware": {
                "type": "boolean",
                "description": "Un drapeau booléen indiquant si la transaction ou le dispositif utilise une solution logicielle Point de Vente."
              },
              "monerisAdvance": {
                "$ref": "#/components/schemas/monerisAdvance"
              },
              "counterTopTerminals": {
                "$ref": "#/components/schemas/counterTopTerminals"
              },
              "integratedProduct": {
                "$ref": "#/components/schemas/integratedProduct"
              },
              "storeAndForward": {
                "$ref": "#/components/schemas/storeAndForward"
              },
              "petroTrak": {
                "$ref": "#/components/schemas/petroTrak"
              },
              "multiCurrency": {
                "$ref": "#/components/schemas/multiCurrencyProduct"
              },
              "dynamicCurrencyConversion": {
                "$ref": "#/components/schemas/multiCurrencyProduct"
              },
              "bookmark": {
                "$ref": "#/components/schemas/bookmark"
              },
              "bookmarkPro": {
                "$ref": "#/components/schemas/bookmarkPro"
              },
              "thirdPartyGiftCardFeeDetails": {
                "$ref": "#/components/schemas/thirdPartyGiftCardFeeDetails"
              },
              "ueat": {
                "$ref": "#/components/schemas/ueat"
              },
              "monerisGoAppetit": {
                "$ref": "#/components/schemas/monerisGoAppetit"
              },
              "webCreationPackagesFeeDetails": {
                "$ref": "#/components/schemas/webCreationPackagesFeeDetails"
              },
              "installmentsFeeDetails": {
                "$ref": "#/components/schemas/installmentsFeeDetails"
              },
              "wixPointOfSale": {
                "$ref": "#/components/schemas/wixPointOfSale"
              },
              "p2pe": {
                "$ref": "#/components/schemas/p2pe"
              },
              "wireless": {
                "$ref": "#/components/schemas/wireless"
              },
              "monerisGateway": {
                "$ref": "#/components/schemas/monerisGateway"
              },
              "monerisGoPointOfSaleRetail": {
                "$ref": "#/components/schemas/monerisGoPointOfSaleRetail"
              },
              "monerisGoPortal": {
                "$ref": "#/components/schemas/monerisGoPortal"
              },
              "payDropPlus": {
                "$ref": "#/components/schemas/payDropPlus"
              }
            }
          },
          "bankerInformation": {
            "nullable": true,
            "type": "object",
            "description": "Un objet contenant tous les détails liés aux informations bancaires.",
            "properties": {
              "bankerEmail": {
                "nullable": true,
                "type": "string",
                "format": "email",
                "description": "Contient l’adresse e-mail du client.\n\nPour connaître les protocoles de courrier électronique standard, consultez : https://www.rfc-editor.org/rfc/rfc5322\n",
                "minLength": 1,
                "maxLength": 320,
                "example": "moneris@moneris.com"
              },
              "bankerEmployeeNumber": {
                "nullable": true,
                "type": "string",
                "description": "Un attribut de chaîne qui identifie de manière unique l'employé de la banque responsable.",
                "maxLength": 20,
                "example": "242200024"
              },
              "bankerName": {
                "nullable": true,
                "type": "string",
                "description": "Le nom complet du représentant bancaire.",
                "maxLength": 50,
                "example": "MONIKA  CARNOKA"
              },
              "bankerPhoneNumber": {
                "nullable": true,
                "type": "string",
                "description": "Numéro de téléphone.",
                "pattern": "^\\+[1-9]\\d{1,14}$",
                "minLength": 3,
                "maxLength": 16,
                "example": "+18663197450"
              },
              "bankerPhoneNumberExtension": {
                "nullable": true,
                "type": "string",
                "description": "L'extension du numéro de téléphone du représentant bancaire.",
                "maxLength": 50,
                "pattern": "^[0-9]{1,6}$",
                "example": "1068"
              },
              "bankerTransitNumber": {
                "nullable": true,
                "type": "string",
                "description": "The identifier of the transit bank associated.",
                "maxLength": 5,
                "example": "00160",
                "pattern": "^\\d{5}"
              },
              "bankerBranchIdentifier": {
                "nullable": true,
                "type": "string",
                "description": "L'identifiant de la succursale de la banque où se trouve le banquier.",
                "maxLength": 5,
                "example": "2679"
              }
            }
          },
          "cardPlanDetails": {
            "nullable": true,
            "type": "object",
            "description": "Un objet contenant tous les détails des plans de cartes.",
            "properties": {
              "merchantDiscountRateType": {
                "$ref": "#/components/schemas/merchantDiscountRateType"
              },
              "currency": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code monétaire à trois lettres selon la norme ISO 4217. \n\nPour obtenir la liste complète des codes de devise, rendez-vous sur : https://en.wikipedia.org/wiki/ISO_4217\n",
                "minLength": 3,
                "maxLength": 4,
                "example": "CAD",
                "format": "iso-4217"
              },
              "transactionFeeParameterCode": {
                "$ref": "#/components/schemas/transactionFeeParameterCode"
              },
              "cardBrandTemplateIdentifier": {
                "$ref": "#/components/schemas/cardBrandTemplateIdentifier"
              },
              "selectedPlans": {
                "$ref": "#/components/schemas/selectedPlans"
              },
              "mastercard": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "mastercardDebit": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "visa": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "visaDebit": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "discover": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "unionPay": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "interac": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "amex": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "otherFinancialInstitutionCards": {
                "$ref": "#/components/schemas/otherFinancialInstitutionCards"
              },
              "programs": {
                "$ref": "#/components/schemas/programs"
              }
            }
          },
          "pointOfSaleSolutionType": {
            "type": "string",
            "description": "Indique le type de solution Point de Vente utilisée ou demandée.",
            "nullable": true,
            "enum": [
              "POINT_OF_SALE_WITH_OFI",
              "MONERIS_POINT_OF_SALE",
              "PAPER_DEPOSIT"
            ]
          },
          "deploymentTransactionNumber": {
            "type": "string",
            "description": "Le numéro de transaction associé au processus de déploiement.",
            "nullable": true
          },
          "deploymentWorkOrderReference": {
            "type": "string",
            "description": "Le numéro d'ordre de travail associé au processus de déploiement.",
            "nullable": true
          },
          "deploymentWorkOrderStatus": {
            "type": "string",
            "description": "Le statut de l'ordre de travail associé au processus de déploiement.",
            "nullable": true,
            "enum": [
              "SHIPPED",
              "COMPLETE",
              "MAX_RETRIES_EXCEEDED",
              "CANCELLED",
              "ACCEPTED",
              "REJECTED",
              "SYSTEM_ERROR",
              "ON_HOLD"
            ]
          },
          "shippedAt": {
            "type": "string",
            "description": "Un attribut datetime qui indique la date d'expédition du produit ou du service au format ISO 8601.",
            "nullable": true,
            "format": "date-time",
            "example": "2025-10-21T18:10:00Z"
          },
          "shippingType": {
            "type": "string",
            "description": "Un attribut chaîne représentant le type de méthode d'expédition utilisée pour livrer le produit.",
            "nullable": true,
            "enum": [
              "POINT_OF_SALE_AND_SUPPLIES",
              "SUPPLIES_ONLY"
            ]
          },
          "shippingWayBillNumber": {
            "type": "string",
            "description": "Le numéro de suivi ou numéro de lettre de transport attribué à l'expédition.",
            "nullable": true
          },
          "shippingCourierName": {
            "type": "string",
            "description": "Le nom de la compagnie d'expédition ou de messagerie responsable de la livraison du produit ou du service.",
            "nullable": true
          },
          "installedAt": {
            "type": "string",
            "description": "Un attribut date représentant la date prévue ou réelle à laquelle l'installation d'un produit ou service est terminée au format ISO 8601.",
            "nullable": true,
            "format": "date",
            "example": "2025-10-21"
          },
          "installationType": {
            "type": "string",
            "description": "La catégorie du processus d'installation.",
            "nullable": true,
            "enum": [
              "TRAIN_ONLY",
              "INSTALL",
              "INSTALL_AND_TRAIN"
            ]
          },
          "installationMethod": {
            "type": "string",
            "description": "La méthode du processus d'installation.",
            "nullable": true,
            "enum": [
              "PRO",
              "STANDARD",
              "ONSITE",
              "MERCHANT_INSTALL",
              "ONSITE_STANDARD_INSTALLATION",
              "ONSITE_PRO_INSTALLATION",
              "VIRTUAL_TRAINING_AND_SETUP_ASSISTANCE",
              "ONSITE_PREMIUM_INSTALLATION",
              "PREMIUM",
              "PHONE"
            ]
          },
          "installationWorkOrderReference": {
            "type": "string",
            "description": "L'ordre de travail du processus d'installation.",
            "nullable": true
          },
          "isAcceptedByConduct": {
            "type": "boolean",
            "description": "Représente l'acceptation des termes, conditions ou accord basé sur les actions de conduite des parties impliquées."
          },
          "contractSignatureRequired": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si une signature formelle est requise pour valider ou compléter un contrat."
          },
          "faxRequired": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si l'envoi par télécopieur d'un document est nécessaire."
          },
          "additionalInformation": {
            "type": "string",
            "description": "Un attribut à usage général utilisé pour représenter des informations supplémentaires.",
            "nullable": true
          },
          "businessEntityName": {
            "type": "string",
            "description": "Le nom de l'entité commerciale.",
            "nullable": true
          },
          "readyAt": {
            "type": "string",
            "description": "Fait référence à la date à laquelle un produit, service ou commande est attendu d'être prêt au format ISO 8601.",
            "nullable": true,
            "format": "date-time",
            "example": "2025-10-21T18:10:00Z"
          },
          "isMerchantReadyToAccept": {
            "type": "boolean",
            "description": "Indique si le commerçant est prêt à accepter la commande."
          },
          "applicationScore": {
            "type": "integer",
            "description": "Le score catégoriel attribué à une demande.",
            "format": "int64"
          },
          "marginValue": {
            "type": "string",
            "description": "La métrique spécifique liée à la valeur de marge.",
            "nullable": true
          },
          "priorityTier": {
            "type": "string",
            "description": "Le niveau de priorité attribué à une commande.",
            "nullable": true,
            "enum": [
              "ONE",
              "TWO",
              "THREE",
              "FOUR"
            ]
          },
          "referralInformation": {
            "type": "object",
            "description": "Un objet contenant des informations liées au processus de référence.",
            "nullable": true,
            "properties": {
              "partnerName": {
                "$ref": "#/components/schemas/partnerName"
              },
              "transitNumber": {
                "type": "string",
                "description": "Le numéro de transit du partenaire qui a référé le prospect à l'entreprise.",
                "nullable": true
              },
              "employeeFirstName": {
                "type": "string",
                "description": "Le prénom du partenaire qui a référé le prospect à l'entreprise.",
                "nullable": true
              },
              "employeeLastName": {
                "type": "string",
                "description": "Le nom de famille du partenaire qui a référé le prospect à l'entreprise.",
                "nullable": true
              },
              "description": {
                "type": "string",
                "description": "Les détails du partenaire qui a référé le prospect à l'entreprise.",
                "nullable": true
              },
              "additionalInformation": {
                "type": "string",
                "description": "Les informations supplémentaires du partenaire qui a référé le prospect à l'entreprise.",
                "nullable": true
              }
            }
          },
          "hostType": {
            "type": "string",
            "description": "La catégorie d'hôte sur laquelle le service s'exécute.",
            "nullable": true,
            "enum": [
              "ESSENTIS",
              "OTHER"
            ]
          },
          "isExpeditedOrder": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si une commande est traitée avec un statut accéléré."
          },
          "autoApprovalStatus": {
            "type": "string",
            "description": "Le statut d'un processus d'approbation automatique d'une commande.",
            "nullable": true,
            "enum": [
              "CONDITIONALLY_APPROVED",
              "MANUAL",
              "MANUAL_ADJUDICATION",
              "NOT_APPLICABLE",
              "PENDING_ADJUDICATION",
              "PROCESSING"
            ]
          },
          "adjudicationApprovalStatus": {
            "nullable": true,
            "type": "string",
            "description": "Le statut qui indique si une commande a été approuvée ou rejetée pendant le processus d'adjudication.",
            "example": "MANUAL",
            "enum": [
              "AUTOMATIC",
              "MANUAL",
              "PENDING_ADJUDICATION"
            ]
          },
          "hasImprinter": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si une imprimante est disponible dans le processus de transaction."
          },
          "isMarketSubSegmentationPreApprovalRequired": {
            "type": "boolean",
            "description": "L'attribut lié à la pré-approbation de la segmentation du marché."
          },
          "optOutAmexCommunication": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si un client a choisi de ne pas recevoir de communications d'American Express."
          },
          "multiCurrencyPricingPackageId": {
            "type": "integer",
            "description": "L'identifiant associé à un forfait.",
            "format": "int64"
          },
          "deliveryAddressConfirmed": {
            "type": "boolean",
            "description": "Un drapeau booléen indiquant si l'adresse de livraison a été confirmée."
          },
          "isManualDeploymentRequired": {
            "type": "boolean",
            "description": "Indique si un déploiement de processus doit être effectué manuellement."
          },
          "isDeficient": {
            "type": "boolean",
            "description": "Indique si quelque chose manque ou est déficient en rapport avec la commande."
          },
          "preDeficientOrderStatus": {
            "type": "string",
            "description": "Le statut d'une commande avant qu'elle ne soit marquée comme déficiente.",
            "nullable": true,
            "enum": [
              "ADJUDICATION",
              "COLLATERAL_REQUIRED",
              "COMPLIANCE",
              "COMPLETE",
              "DEPLOYMENT",
              "FINAL_ACI_MERCHANT_UPDATE",
              "IN_PROGRESS",
              "MANUAL_ADJUDICATION",
              "MANUAL_ADJUDICATION_REVIEW",
              "ONE_TIME_FEE",
              "POST_BOARDING_DP_FLOW",
              "READJUDICATION",
              "READJUDICATION_FLOW",
              "SCHEDULE_INSTALL",
              "SALES_ACTIVATION_BASE24",
              "SALES_ACTIVATION_POST_DEPLOYMENT",
              "SALES_APPROVAL",
              "START_ORDER",
              "UPDATE_ORDER"
            ]
          }
        }
      },
      "updateStandardOrderRequest": {
        "type": "object",
        "description": "Représente la charge utile pour la mise à jour d'une commande.",
        "properties": {
          "marketSegment": {
            "$ref": "#/components/schemas/marketSegment"
          },
          "representativeCode": {
            "$ref": "#/components/schemas/representativeCode"
          },
          "userDetails": {
            "$ref": "#/components/schemas/userDetails"
          },
          "applicablePromotions": {
            "$ref": "#/components/schemas/applicablePromotions"
          },
          "feeDetails": {
            "$ref": "#/components/schemas/feeDetails"
          },
          "applicationDetails": {
            "$ref": "#/components/schemas/applicationDetails"
          },
          "agreementModelInformation": {
            "$ref": "#/components/schemas/agreementModelInformation"
          },
          "valueAddedServices": {
            "$ref": "#/components/schemas/valueAddedServices"
          },
          "documentsStatus": {
            "$ref": "#/components/schemas/documentsStatus"
          },
          "confirmation": {
            "$ref": "#/components/schemas/confirmation"
          },
          "supplies": {
            "$ref": "#/components/schemas/supplies"
          },
          "productDetails": {
            "$ref": "#/components/schemas/productDetails"
          },
          "isAutoAdjudicationRequired": {
            "$ref": "#/components/schemas/isAutoAdjudicationRequired"
          },
          "isExpeditedOrder": {
            "$ref": "#/components/schemas/isExpeditedOrder"
          },
          "cardPlanDetails": {
            "nullable": true,
            "type": "object",
            "description": "Un objet contenant tous les détails des plans de cartes.",
            "properties": {
              "merchantDiscountRateType": {
                "$ref": "#/components/schemas/merchantDiscountRateType"
              },
              "currency": {
                "nullable": true,
                "type": "string",
                "description": "Fournit le code monétaire à trois lettres selon la norme ISO 4217. \n\nPour obtenir la liste complète des codes de devise, rendez-vous sur : https://en.wikipedia.org/wiki/ISO_4217\n",
                "minLength": 3,
                "maxLength": 4,
                "example": "CAD",
                "format": "iso-4217"
              },
              "transactionFeeParameterCode": {
                "$ref": "#/components/schemas/transactionFeeParameterCode"
              },
              "cardBrandTemplateIdentifier": {
                "$ref": "#/components/schemas/cardBrandTemplateIdentifier"
              },
              "selectedPlans": {
                "$ref": "#/components/schemas/selectedPlans"
              },
              "mastercard": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "mastercardDebit": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "visa": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "visaDebit": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "discover": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "unionPay": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "interac": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "amex": {
                "nullable": true,
                "type": "object",
                "description": "Un objet contenant les détails du plan de franchise.",
                "properties": {
                  "isCommunicationsOptOut": {
                    "$ref": "#/components/schemas/isCommunicationsOptOut"
                  },
                  "cardFeeDetails": {
                    "$ref": "#/components/schemas/cardFeeDetails"
                  },
                  "transactionPlans": {
                    "$ref": "#/components/schemas/transactionPlans"
                  },
                  "cardBrandPlans": {
                    "$ref": "#/components/schemas/cardBrandPlans"
                  },
                  "assessmentPlans": {
                    "$ref": "#/components/schemas/assessmentPlans"
                  },
                  "serviceFeeDetails": {
                    "$ref": "#/components/schemas/serviceFeeDetails"
                  }
                }
              },
              "otherFinancialInstitutionCards": {
                "$ref": "#/components/schemas/otherFinancialInstitutionCards"
              },
              "programs": {
                "$ref": "#/components/schemas/programs"
              }
            }
          },
          "solutions": {
            "$ref": "#/components/schemas/solutions"
          },
          "deliveryAddress": {
            "type": "object",
            "nullable": true,
            "description": "Un objet contenant les détails de l'adresse de livraison.",
            "allOf": [
              {
                "$ref": "#/components/schemas/address"
              },
              {
                "$ref": "#/components/schemas/addressee"
              }
            ]
          },
          "orderCreatedBy": {
            "$ref": "#/components/schemas/orderCreatedBy"
          }
        },
        "required": [
          "userDetails",
          "productDetails"
        ]
      },
      "updatePartnerBankOrderRequest": {
        "type": "object",
        "description": "Un objet contenant tous les détails de la charge utile de commande pour la banque partenaire.",
        "properties": {
          "solutions": {
            "$ref": "#/components/schemas/solutions"
          },
          "deliveryAddress": {
            "type": "object",
            "nullable": true,
            "description": "Un objet contenant les détails de l'adresse de livraison.",
            "allOf": [
              {
                "$ref": "#/components/schemas/address"
              },
              {
                "$ref": "#/components/schemas/addressee"
              }
            ]
          },
          "bankerInformation": {
            "$ref": "#/components/schemas/bankerInformation"
          },
          "orderCreatedBy": {
            "$ref": "#/components/schemas/orderCreatedBy"
          }
        },
        "required": [
          "solutions",
          "deliveryAddress",
          "bankerInformation"
        ]
      },
      "updateOrderRequest": {
        "description": "Représente le corp de la requète pour la mise à jour d'une commande.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/updateStandardOrderRequest"
          },
          {
            "$ref": "#/components/schemas/updatePartnerBankOrderRequest"
          }
        ]
      },
      "annualVolume": {
        "type": "integer",
        "description": "Le volume annuel de transactions traitées par l'entreprise.",
        "format": "int32"
      },
      "hasMajorityOwnership": {
        "type": "boolean",
        "description": "Une valeur booléenne indiquant si l'entreprise détient la propriété majoritaire."
      },
      "hasExistingRelationship": {
        "type": "boolean",
        "description": "Une valeur booléenne indiquant si l'entreprise a une relation existante avec le fournisseur de services."
      },
      "hasMultipleLocations": {
        "type": "boolean",
        "description": "Une valeur booléenne indiquant si l'entreprise a plusieurs emplacements."
      },
      "sch-product-recommendations_solutionId": {
        "type": "integer",
        "description": "L'identifiant unique de la solution.",
        "format": "int32"
      },
      "isAllowedToSell": {
        "type": "boolean",
        "description": "Une valeur booléenne indiquant si l'entreprise est autorisée à vendre la solution."
      },
      "isOnline": {
        "type": "boolean",
        "description": "Une valeur booléenne indiquant si la solution est disponible pour les transactions en ligne."
      },
      "isInstore": {
        "type": "boolean",
        "description": "Une valeur booléenne indiquant si la solution est disponible pour les transactions en magasin."
      },
      "productRecommendationRequest": {
        "type": "object",
        "required": [
          "annualVolume",
          "hasMajorityOwnership",
          "hasExistingRelationship",
          "hasMultipleLocations",
          "locationProvince",
          "merchantCategoryCode"
        ],
        "description": "Attributs de la charge utile des produits recommandés",
        "properties": {
          "partnerName": {
            "$ref": "#/components/schemas/partnerName"
          },
          "annualVolume": {
            "$ref": "#/components/schemas/annualVolume"
          },
          "hasMajorityOwnership": {
            "$ref": "#/components/schemas/hasMajorityOwnership"
          },
          "hasExistingRelationship": {
            "$ref": "#/components/schemas/hasExistingRelationship"
          },
          "hasMultipleLocations": {
            "$ref": "#/components/schemas/hasMultipleLocations"
          },
          "locationProvince": {
            "$ref": "#/components/schemas/province"
          },
          "merchantCategoryCode": {
            "$ref": "#/components/schemas/merchantCategoryCode"
          },
          "solutionId": {
            "$ref": "#/components/schemas/sch-product-recommendations_solutionId"
          },
          "isAllowedToSell": {
            "$ref": "#/components/schemas/isAllowedToSell"
          },
          "isOnline": {
            "$ref": "#/components/schemas/isOnline"
          },
          "isInstore": {
            "$ref": "#/components/schemas/isInstore"
          },
          "directSellingPercentage": {
            "$ref": "#/components/schemas/directSellingPercentage"
          },
          "motoTransactionPercentage": {
            "$ref": "#/components/schemas/motoTransactionPercentage"
          },
          "ecommerceTransactionPercentage": {
            "$ref": "#/components/schemas/ecommerceTransactionPercentage"
          }
        }
      },
      "solutionPricing": {
        "type": "object",
        "description": "Un objet contenant tous les détails liés à une option de tarification pour une solution.",
        "required": [
          "pricingLabel",
          "pricingText"
        ],
        "properties": {
          "pricingLabel": {
            "type": "string",
            "description": "L'étiquette associée à l'option de tarification."
          },
          "pricingText": {
            "type": "string",
            "description": "Le texte associé à l'option de tarification."
          }
        }
      },
      "solutionFeature": {
        "type": "object",
        "description": "Un objet contenant tous les détails liés à une fonctionnalité d'une solution.",
        "required": [
          "description"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Une description détaillée de la fonctionnalité."
          }
        }
      },
      "solution": {
        "type": "object",
        "description": "Un objet contenant tous les détails liés à une solution.",
        "required": [
          "solutionIdentifier",
          "solutionName",
          "solutionDescription",
          "solutionImageUrl"
        ],
        "properties": {
          "solutionIdentifier": {
            "type": "integer",
            "description": "L'identifiant unique de la solution.",
            "format": "int32"
          },
          "solutionName": {
            "type": "string",
            "description": "Le nom de la solution."
          },
          "solutionDescription": {
            "type": "string",
            "description": "Une description détaillée de la solution."
          },
          "solutionImageUrl": {
            "type": "string",
            "description": "L'URL de l'image associée à la solution."
          },
          "solutionPrices": {
            "type": "array",
            "description": "Une liste d'options de tarification associées à la solution.",
            "items": {
              "$ref": "#/components/schemas/solutionPricing"
            }
          },
          "solutionFeatures": {
            "type": "array",
            "description": "Une liste de fonctionnalités associées à la solution.",
            "items": {
              "$ref": "#/components/schemas/solutionFeature"
            }
          },
          "promotionalBlock": {
            "type": "string",
            "description": "Un bloc promotionnel associé à la solution.",
            "nullable": true
          },
          "additionalSolutionDetailsUrl": {
            "type": "string",
            "description": "L'URL pour des détails supplémentaires sur la solution.",
            "nullable": true
          },
          "maximumQuantity": {
            "type": "integer",
            "description": "La quantité maximale de la solution qui peut être achetée.",
            "format": "int32"
          },
          "carrierOptions": {
            "type": "array",
            "description": "Une liste d'options de transporteur disponibles pour la solution.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "productRecommendation": {
        "type": "object",
        "description": "Un objet contenant tous les détails liés à une recommandation de produit.",
        "properties": {
          "allowToSell": {
            "type": "boolean",
            "description": "Une valeur booléenne indiquant si l'entreprise est autorisée à vendre la solution."
          },
          "solutions": {
            "type": "array",
            "description": "Une liste d'éléments de solution.",
            "items": {
              "$ref": "#/components/schemas/solution"
            }
          }
        }
      }
    },
    "parameters": {
      "apiVersion": {
        "in": "header",
        "name": "Api-Version",
        "required": true,
        "example": "2024-09-17",
        "description": "Version de l’API du point de terminaison. \n\nDoit être fourni dans la section des en-têtes. \n",
        "schema": {
          "$ref": "#/components/schemas/apiVersion"
        }
      },
      "correlationId": {
        "in": "header",
        "name": "X-Correlation-Id",
        "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4",
        "description": "Corrèle une série de requêtes au sein d’un même flux.\n\nRemarque : Cet identifiant est généré par Moneris avec chaque demande ou réponse, s’il n’existe pas. \nLes commerçants doivent faire écho à la valeur avec chaque demande qui fait partie du flux d’appels.\n",
        "required": false,
        "schema": {
          "type": "string",
          "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4"
        }
      },
      "merchantId": {
        "in": "header",
        "name": "X-Merchant-Id",
        "example": "0123456789101",
        "description": "Code d’identification de treize caractères. \n\nRemarque : Ce code est fourni par Moneris et est nécessaire pour identifier le commerçant qui effectue la transaction.\n",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/merchantId"
        }
      },
      "pageBeforeCursor": {
        "in": "query",
        "name": "cursor",
        "description": "Curseur de pagination pour renvoyer les éléments situés après.",
        "required": false,
        "example": "d41d8cd98f00b204e9800998ecf8427e",
        "schema": {
          "type": "string",
          "example": "d41d8cd98f00b204e9800998ecf8427e"
        }
      },
      "pageLimit": {
        "in": "query",
        "name": "limit",
        "description": "Nombre maximal d’éléments à renvoyer dans la réponse.",
        "example": 10,
        "schema": {
          "type": "integer",
          "default": 10,
          "minimum": 1,
          "maximum": 20,
          "example": 10
        }
      },
      "createdFrom": {
        "name": "created_from",
        "in": "query",
        "description": "Renvoie les éléments créés après la date spécifiée, par défaut à la date actuelle à partir de 12 heures.",
        "required": false,
        "example": "2024-05-16T04:00:00.000Z",
        "schema": {
          "$ref": "#/components/schemas/dateTime"
        }
      },
      "createdTo": {
        "name": "created_to",
        "in": "query",
        "description": "Renvoie les éléments créés avant la date spécifiée, jusqu’à un jour plus tôt. \n\nPar défaut, la date et l’heure actuelles ne doivent pas être postérieures de plus d’un jour à la date created_from. \n",
        "required": false,
        "example": "2024-05-16T04:00:00.000Z",
        "schema": {
          "$ref": "#/components/schemas/dateTime"
        }
      },
      "paymentId": {
        "in": "path",
        "name": "payment-id",
        "description": "L’identifiant unique du paiement",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "paymentMethodId": {
        "name": "payment-method-id",
        "in": "path",
        "description": "ID du mode de paiement",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "refundId": {
        "in": "path",
        "name": "refund-id",
        "description": "L’identifiant unique du remboursement",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/refundId"
        }
      },
      "validationId": {
        "in": "path",
        "name": "validation-id",
        "description": "L’identifiant unique de la Validation",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "subscriptionId": {
        "in": "path",
        "name": "subscription-id",
        "description": "L’identifiant unique de l'abonnement",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "customerId": {
        "in": "path",
        "name": "customer-id",
        "description": "L’identifiant unique du client",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "authenticationId": {
        "in": "path",
        "name": "authentication-id",
        "description": "L’identifiant unique de l’authentification",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "kountInquiryId": {
        "in": "path",
        "name": "kount-inquiry-id",
        "description": "L’identifiant unique de la transaction Kount.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/resourceId"
        }
      },
      "prm-merchants_merchantId": {
        "in": "path",
        "name": "merchant-id",
        "example": "0123456789101",
        "required": true,
        "description": "Code d’identification de treize caractères. \n",
        "schema": {
          "$ref": "#/components/schemas/merchantId"
        }
      },
      "merchantOrderId": {
        "in": "path",
        "name": "merchant-order-id",
        "description": "L’identifiant unique du client",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/merchantOrderId"
        }
      },
      "acceptLanguage": {
        "in": "header",
        "name": "Accept-Language",
        "description": "This value indicates the natural language and locale that the client prefers\n",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "headers": {
      "apiVersion": {
        "description": "Version de l’API du point de terminaison.",
        "example": "2024-03-28-preview",
        "schema": {
          "type": "string"
        }
      },
      "correlationId": {
        "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4",
        "description": "Corrèle une série de requêtes au sein d’un même flux. \n\nRemarque : Cet identifiant est généré par Moneris avec chaque demande ou réponse, s’il n’existe pas, et il est recommandé au commerçant de faire écho à la valeur.  \n",
        "schema": {
          "type": "string",
          "example": "06f1e47b-a1b5-4902-be9c-bccc506127c4"
        }
      },
      "sunset": {
        "example": "2025-07-30T06:43:40.252Z",
        "description": "Optionnel.\n\nIndique que l’URI de la ressource sera mis hors service et mis hors service à l’heure spécifiée dans le futur. \nPlus de détails sont disponibles sur [RFC 8594](https://www.rfc-editor.org/rfc/rfc8594.html)\n",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2025-07-30T06:43:40.252Z"
        }
      },
      "rateLimitCount": {
        "description": "Nombre maximal de requêtes que le client peut effectuer dans cette fenêtre.",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 1000
      },
      "rateLimitRemaining": {
        "description": "Le nombre de requêtes autorisées dans la fenêtre actuelle.",
        "schema": {
          "type": "integer",
          "format": "int64"
        },
        "example": 0
      },
      "rateLimitReset": {
        "description": "Temps relatif en secondes lorsque la fenêtre de limite de débit sera réinitialisée.",
        "schema": {
          "type": "integer",
          "format": "int32"
        },
        "example": 3600
      },
      "retryAfter": {
        "description": "Indique le temps que les clients doivent attendre avant de réessayer.",
        "schema": {
          "type": "integer",
          "format": "int32"
        },
        "example": 60
      },
      "location": {
        "description": "Location url to retrieve the resource",
        "required": true,
        "example": "/tpa/disputes/cases/121719004446/1/dispute-images-upload-status/IU1001J3ZNNEGFFQCTGTGGJ076JYQB?api_version=2023-08-10",
        "schema": {
          "type": "string",
          "format": "uri-reference"
        }
      }
    },
    "responses": {
      "listPaymentsResponse": {
        "description": "Liste de tous les paiements",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentList"
            },
            "example": {
              "data": [
                {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "invoiceNumber": "1a2s3d45v6",
                  "transactionDateTime": "2019-07-30T06:43:40.252Z",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "amount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "authorizedAmount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "capturableAmount": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "amountDetails": null,
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "paymentStatus": "SUCCEEDED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "00",
                    "responseCode": "000",
                    "message": "approved",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "verificationDetails": {
                    "addressVerificationServiceResultCode": "FULL_MATCH",
                    "cardSecurityCodeResultCode": "MATCH",
                    "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                  },
                  "credentialOnFileResponse": null,
                  "refundDetails": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                },
                {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAZ",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "invoiceNumber": "1a2s3d45v6",
                  "transactionDateTime": "2019-07-30T06:43:40.252Z",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "amount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "authorizedAmount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "capturableAmount": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "amountDetails": null,
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "paymentStatus": "CANCELED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "00",
                    "responseCode": "000",
                    "message": "approved",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "verificationDetails": {
                    "addressVerificationServiceResultCode": "FULL_MATCH",
                    "cardSecurityCodeResultCode": "MATCH",
                    "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                  },
                  "credentialOnFileResponse": null,
                  "refundDetails": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                },
                {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAX",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "invoiceNumber": "1a2s3d45v6",
                  "transactionDateTime": "2019-07-30T06:43:40.252Z",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "amount": {
                    "amount": 16000,
                    "currency": "CAD"
                  },
                  "authorizedAmount": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "capturableAmount": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "amountDetails": null,
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "paymentStatus": "DECLINED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "43",
                    "responseCode": "421",
                    "message": "Stolen card, pick up.",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "verificationDetails": {
                    "addressVerificationServiceResultCode": "FULL_MATCH",
                    "cardSecurityCodeResultCode": "MATCH",
                    "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
                  },
                  "credentialOnFileResponse": null,
                  "refundDetails": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              ],
              "self": "/payments?cursor=d41d8cd98f00b&limit=50",
              "first": "/payments?cursor=d41d8cd98f00b&limit=50",
              "last": "/payments?cursor=d41d8cd98f00b&limit=50",
              "next": null,
              "previous": null
            }
          }
        }
      },
      "invalidListbadRequest": {
        "description": "Mauvaise demande.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "idempotency_error": {
                "$ref": "#/components/examples/InvalidListRequestErrorResponse"
              }
            }
          }
        }
      },
      "unauthorized": {
        "description": "Non autorisé. L’utilisateur ne dispose pas d’une clé API ou d’un jeton d’accès valide.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          },
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "example": "Bearer, error=\"invalid_token\""
            }
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "UNAUTHORIZED_REQUEST",
              "status": 401,
              "detail": null,
              "instance": null,
              "category": "UNAUTHORIZED_ERROR",
              "errors": []
            }
          }
        }
      },
      "forbidden": {
        "description": "Interdit. L’utilisateur n’est pas autorisé à accéder à la ressource demandée.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          },
          "WWW-Authenticate": {
            "schema": {
              "type": "string",
              "example": "Bearer, error=\"insufficient_scope\""
            }
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "FORBIDDEN_REQUEST",
              "status": 403,
              "detail": null,
              "instance": null,
              "category": "UNAUTHORIZED_ERROR",
              "errors": []
            }
          }
        }
      },
      "tooManyRequests": {
        "description": "Trop de requêtes",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/rateLimitReset"
          },
          "Retry-After": {
            "$ref": "#/components/headers/rateLimitReset"
          }
        }
      },
      "internalServer": {
        "description": "Erreur inattendue.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://api-developer.moneris.com/responsehandling/",
              "title": "INTERNAL_SERVER_ERROR",
              "status": 500,
              "detail": null,
              "instance": null,
              "category": "INTERNAL_SERVER_ERROR",
              "errors": []
            }
          }
        }
      },
      "serviceUnavailable": {
        "description": "Service temporairement indisponible",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "Retry-After": {
            "$ref": "#/components/headers/retryAfter"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://api-developer.moneris.com/responsehandling/",
              "title": "SERVICE_UNAVAILABLE",
              "status": 503,
              "detail": null,
              "instance": null,
              "category": "INTERNAL_SERVER_ERROR",
              "errors": []
            }
          }
        }
      },
      "createPaymentSuccessResponse": {
        "description": "Opération de paiement créée avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payment"
            },
            "examples": {
              "PurchaseCompleted": {
                "$ref": "#/components/examples/PurchaseCompletedResponse"
              },
              "PreauthorizationCompletedResponse": {
                "$ref": "#/components/examples/PreauthorizationCompletedResponse"
              }
            }
          }
        }
      },
      "createPaymentBadRequestResponse": {
        "description": "Réponse du résultat de l’opération de paiement échoué",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "invalid_request": {
                "$ref": "#/components/examples/InvalidRequestErrorResponse"
              }
            }
          }
        }
      },
      "conflict": {
        "description": "La demande n’a pas pu être terminée en raison d’un conflit avec l’état de la ressource ou la clé d’idempotence existante.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "idempotency_error": {
                "$ref": "#/components/examples/IdempotencyRequestErrorResponse"
              }
            }
          }
        }
      },
      "createPaymentUnprocessableContentResponse": {
        "description": "Réponse du résultat de l’opération de paiement échoué",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "declined": {
                "$ref": "#/components/examples/DeclineErrorResponse"
              }
            }
          }
        }
      },
      "retrievePaymentSuccessResponse": {
        "description": "Le paiement correspondant à l''identifiant de paiement fourni.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payment"
            },
            "examples": {
              "succeeded": {
                "$ref": "#/components/examples/PurchaseCompletedResponse"
              },
              "authorized": {
                "$ref": "#/components/examples/PreauthorizationCompletedResponse"
              },
              "declined": {
                "$ref": "#/components/examples/PurchaseDeclinedResponse"
              },
              "declined_retry": {
                "$ref": "#/components/examples/PurchaseDeclinedRetryResponse"
              },
              "canceled": {
                "$ref": "#/components/examples/PurchaseCanceledResponse"
              }
            }
          }
        }
      },
      "notFound": {
        "description": "Introuvable.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "NOT_FOUND",
              "status": 404,
              "detail": null,
              "instance": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "category": "INVALID_REQUEST_ERROR",
              "errors": []
            }
          }
        }
      },
      "cancelPaymentSuccessResponse": {
        "description": "Le paiement a été annulé avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payment"
            },
            "example": {
              "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "orderId": "1q2w3e4r5t6t78",
              "invoiceNumber": "1a2s3d45v6",
              "transactionDateTime": "2019-07-30T06:43:40.252Z",
              "createdAt": "2019-07-30T06:43:40.252Z",
              "modifiedAt": "2019-07-30T06:43:40.252Z",
              "amount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "authorizedAmount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "capturableAmount": {
                "amount": 0,
                "currency": "CAD"
              },
              "amountDetails": null,
              "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "paymentMethod": {
                "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "0123456789101",
                "cardholderInformation": null,
                "contactDetails": null,
                "billingAddress": null,
                "paymentMethodInformation": {
                  "paymentMethodType": "CARD",
                  "paymentMethodSource": "CARD",
                  "cardInformation": {
                    "bankIdentificationNumber": "123456",
                    "lastFour": "1234",
                    "expiryMonth": 1,
                    "expiryYear": 2028,
                    "cardBrand": "MASTERCARD",
                    "cardType": "CREDIT",
                    "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                    "issuer": "RBC"
                  },
                  "paymentAccountReference": "11112222333344445555666677778",
                  "storePaymentMethod": "DO_NOT_STORE"
                },
                "createdAt": "2019-07-30T06:43:40.252Z",
                "modifiedAt": null,
                "customData": {
                  "property1": "string",
                  "property2": "string"
                }
              },
              "paymentStatus": "CANCELED",
              "transactionDetails": {
                "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                "isoResponseCode": "00",
                "responseCode": "000",
                "message": "approved",
                "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
              },
              "verificationDetails": {
                "addressVerificationServiceResultCode": "FULL_MATCH",
                "cardSecurityCodeResultCode": "MATCH",
                "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
              },
              "credentialOnFileResponse": null,
              "refundDetails": null,
              "customData": {
                "property1": "string",
                "property2": "string"
              }
            }
          }
        }
      },
      "badRequest": {
        "description": "Mauvaise demande.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "cancelPaymentUnprocessableContentResponse": {
        "description": "Échec de l’annulation de la réponse Résultat de l’opération de paiement",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "declined": {
                "$ref": "#/components/examples/DeclineErrorResponse"
              },
              "invalid_request": {
                "$ref": "#/components/examples/InvalidPurchaseErrorResponse"
              }
            }
          }
        }
      },
      "completePaymentSuccessResponse": {
        "description": "Le paiement s’est terminé avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payment"
            },
            "example": {
              "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "orderId": "1q2w3e4r5t6t78",
              "invoiceNumber": "1a2s3d45v6",
              "transactionDateTime": "2019-07-30T06:43:40.252Z",
              "createdAt": "2019-07-30T06:43:40.252Z",
              "modifiedAt": "2019-07-30T06:43:40.252Z",
              "amount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "authorizedAmount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "capturableAmount": {
                "amount": 0,
                "currency": "CAD"
              },
              "amountDetails": null,
              "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "paymentMethod": {
                "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "0123456789101",
                "cardholderInformation": null,
                "contactDetails": null,
                "billingAddress": null,
                "paymentMethodInformation": {
                  "paymentMethodType": "CARD",
                  "paymentMethodSource": "CARD",
                  "cardInformation": {
                    "bankIdentificationNumber": "123456",
                    "lastFour": "1234",
                    "expiryMonth": 1,
                    "expiryYear": 2028,
                    "cardBrand": "MASTERCARD",
                    "cardType": "CREDIT",
                    "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                    "issuer": "RBC"
                  },
                  "paymentAccountReference": "11112222333344445555666677778",
                  "storePaymentMethod": "DO_NOT_STORE"
                },
                "createdAt": "2019-07-30T06:43:40.252Z",
                "modifiedAt": null,
                "customData": {
                  "property1": "string",
                  "property2": "string"
                }
              },
              "paymentStatus": "SUCCEEDED",
              "transactionDetails": {
                "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                "isoResponseCode": "00",
                "responseCode": "000",
                "message": "approved",
                "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
              },
              "verificationDetails": {
                "addressVerificationServiceResultCode": "FULL_MATCH",
                "cardSecurityCodeResultCode": "MATCH",
                "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
              },
              "credentialOnFileResponse": null,
              "refundDetails": null,
              "customData": null
            }
          }
        }
      },
      "completePaymentBadRequestResponse": {
        "description": "Échec de l’achat",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "declined": {
                "$ref": "#/components/examples/DeclineErrorResponse"
              },
              "invalid_request": {
                "$ref": "#/components/examples/InvalidPurchaseErrorResponse"
              }
            }
          }
        }
      },
      "completePaymentUnprocessableContentResponse": {
        "description": "Réponse du résultat de l’opération de paiement échoué",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "declined": {
                "$ref": "#/components/examples/DeclineErrorResponse"
              }
            }
          }
        }
      },
      "listPaymentMethodsResponse": {
        "description": "Liste paginée des modes de paiement",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentMethodList"
            },
            "example": {
              "data": [
                {
                  "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "cardholderInformation": null,
                  "contactDetails": null,
                  "billingAddress": null,
                  "paymentMethodInformation": {
                    "paymentMethodType": "CARD",
                    "paymentMethodSource": "CARD",
                    "cardInformation": {
                      "bankIdentificationNumber": "123456",
                      "lastFour": "1234",
                      "expiryMonth": 1,
                      "expiryYear": 2028,
                      "cardBrand": "MASTERCARD",
                      "cardType": "CREDIT",
                      "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                      "issuer": "RBC"
                    },
                    "paymentAccountReference": "11112222333344445555666677778",
                    "storePaymentMethod": "DO_NOT_STORE"
                  },
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                },
                {
                  "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "cardholderInformation": {
                    "cardholderName": "John Doe",
                    "companyName": "SP Ltd"
                  },
                  "contactDetails": {
                    "phoneNumber": "+18663197450",
                    "email": "moneris@moneris.com"
                  },
                  "billingAddress": {
                    "unitNumber": "123A",
                    "streetNumber": "3300",
                    "streetName": "Bloor Street West",
                    "city": "Toronto",
                    "province": "ON",
                    "postalCode": "M8X 2X2",
                    "country": "CA"
                  },
                  "paymentMethodInformation": {
                    "paymentMethodType": "CARD",
                    "paymentMethodSource": "TEMPORARY_TOKEN",
                    "cardInformation": {
                      "bankIdentificationNumber": "123456",
                      "lastFour": "1234",
                      "expiryMonth": 1,
                      "expiryYear": 2028,
                      "cardBrand": "MASTERCARD",
                      "cardType": "CREDIT",
                      "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                      "issuer": "RBC"
                    },
                    "paymentAccountReference": "11112222333344445555666677778",
                    "storePaymentMethod": "DO_NOT_STORE"
                  },
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              ],
              "self": "/payment-methods?cursor=d41d8cd98f00b&limit=50",
              "first": "/payment-methods?cursor=d41d8cd98f00b&limit=50",
              "last": "/payment-methods?cursor=d41d8cd98f00b&limit=50",
              "next": null,
              "previous": null
            }
          }
        }
      },
      "createPaymentMethodSuccessResponse": {
        "description": "Mode de paiement créé avec succès.  Le contenu de la réponse contient le mode de paiement créé.\n",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentMethod"
            },
            "example": {
              "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "cardholderInformation": {
                "cardholderName": "John Doe",
                "companyName": "SP Ltd"
              },
              "contactDetails": {
                "phoneNumber": "+18663197450",
                "email": "moneris@moneris.com"
              },
              "billingAddress": {
                "unitNumber": "123A",
                "streetNumber": "3300",
                "streetName": "Bloor Street West",
                "city": "Toronto",
                "province": "ON",
                "postalCode": "M8X 2X2",
                "country": "CA"
              },
              "paymentMethodInformation": {
                "paymentMethodType": "CARD",
                "paymentMethodSource": "CARD",
                "cardInformation": {
                  "bankIdentificationNumber": "123456",
                  "lastFour": "1234",
                  "expiryMonth": 1,
                  "expiryYear": 2028,
                  "cardBrand": "MASTERCARD",
                  "cardType": "CREDIT",
                  "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                  "issuer": "RBC"
                },
                "paymentAccountReference": "11112222333344445555666677778",
                "storePaymentMethod": "DO_NOT_STORE"
              },
              "createdAt": "2019-07-30T06:43:40.252Z",
              "modifiedAt": "2019-07-30T06:43:40.252Z",
              "customData": {
                "property1": "string",
                "property2": "string"
              }
            }
          }
        }
      },
      "unprocessableContent": {
        "description": "L’API ne peut pas effectuer l’action demandée en raison d’erreurs sémantiques ou de validation métier. \n",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "retrievePaymentMethodSuccessResponse": {
        "description": "Mode de paiement trouvé et renvoyé dans la réponse.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentMethod"
            },
            "example": {
              "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "cardholderInformation": {
                "cardholderName": "John Doe",
                "companyName": "SP Ltd"
              },
              "contactDetails": {
                "phoneNumber": "+18663197450",
                "email": "moneris@moneris.com"
              },
              "billingAddress": {
                "unitNumber": "123A",
                "streetNumber": "3300",
                "streetName": "Bloor Street West",
                "city": "Toronto",
                "province": "ON",
                "postalCode": "M8X 2X2",
                "country": "CA"
              },
              "paymentMethodInformation": {
                "paymentMethodType": "CARD",
                "paymentMethodSource": "CARD",
                "cardInformation": {
                  "bankIdentificationNumber": "123456",
                  "lastFour": "1234",
                  "expiryMonth": 1,
                  "expiryYear": 2028,
                  "cardBrand": "MASTERCARD",
                  "cardType": "CREDIT",
                  "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                  "issuer": "RBC"
                },
                "paymentAccountReference": "11112222333344445555666677778",
                "storePaymentMethod": "DO_NOT_STORE"
              },
              "createdAt": "2019-07-30T06:43:40.252Z",
              "modifiedAt": "2019-07-30T06:43:40.252Z",
              "customData": {
                "property1": "string",
                "property2": "string"
              }
            }
          }
        }
      },
      "paymentMethodNotFoundResponse": {
        "description": "Mode de paiement introuvable.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "NOT_FOUND",
              "status": 404,
              "detail": null,
              "instance": "/payment-methods/pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "category": "INVALID_REQUEST_ERROR",
              "errors": []
            }
          }
        }
      },
      "paymentMethodUpdateSuccessResponse": {
        "description": "Mode de paiement mis à jour avec succès",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paymentMethod"
            },
            "example": {
              "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "cardholderInformation": {
                "cardholderName": "John Doe",
                "companyName": "SP Ltd"
              },
              "contactDetails": {
                "phoneNumber": "+18663197450",
                "email": "moneris@moneris.com"
              },
              "billingAddress": {
                "unitNumber": "123A",
                "streetNumber": "3300",
                "streetName": "Bloor Street West",
                "city": "Toronto",
                "province": "ON",
                "postalCode": "M8X 2X2",
                "country": "CA"
              },
              "paymentMethodInformation": {
                "paymentMethodType": "CARD",
                "paymentMethodSource": "CARD",
                "cardInformation": {
                  "bankIdentificationNumber": "123456",
                  "lastFour": "1234",
                  "expiryMonth": 1,
                  "expiryYear": 2028,
                  "cardBrand": "MASTERCARD",
                  "cardType": "CREDIT",
                  "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                  "issuer": "RBC"
                },
                "paymentAccountReference": "11112222333344445555666677778",
                "storePaymentMethod": "DO_NOT_STORE"
              },
              "createdAt": "2019-07-30T06:43:40.252Z",
              "modifiedAt": "2019-07-30T06:43:40.252Z",
              "customData": {
                "property1": "string",
                "property2": "string"
              }
            }
          }
        }
      },
      "concurrencyConflict": {
        "description": "La demande n’a pas pu être traitée en raison d’un problème d’accès simultané.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "concurrency_error": {
                "$ref": "#/components/examples/concurrentRequestErrorResponse"
              }
            }
          }
        }
      },
      "paymentMethodDeleteSuccessResponse": {
        "description": "Mode de paiement supprimé avec succès. \nLe contenu de la réponse contient les détails du mode de paiement.\n",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        }
      },
      "listRefundsSuccessResponse": {
        "description": "Liste de remboursement retournée avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/refundList"
            },
            "example": {
              "data": [
                {
                  "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "payment": {
                    "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
                  },
                  "merchantId": "0123456789101",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "refundAmount": {
                    "amount": 1600,
                    "currency": "CAD"
                  },
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "refundStatus": "SUCCEEDED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "00",
                    "responseCode": "000",
                    "message": "SUCCESS",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "reason": "Defective product",
                  "credentialOnFileResponse": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                },
                {
                  "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "payment": {
                    "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
                  },
                  "merchantId": "0123456789101",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "refundAmount": {
                    "amount": 1600,
                    "currency": "CAD"
                  },
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "refundStatus": "DECLINED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "51",
                    "responseCode": "054",
                    "message": "Expired Card",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "reason": "Defective product",
                  "credentialOnFileResponse": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              ],
              "self": "/refunds?cursor=d41d8cd98f00b&limit=50",
              "first": "/refunds?cursor=d41d8cd98f00b&limit=50",
              "last": "/refunds?cursor=d41d8cd98f00b&limit=50",
              "next": null,
              "previous": null
            }
          }
        }
      },
      "createRefundSuccessResponse": {
        "description": "Réponse du résultat de l’opération de remboursement",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/refund"
            },
            "example": {
              "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "payment": {
                "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
              },
              "merchantId": "0123456789101",
              "paymentMethod": {
                "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "0123456789101",
                "cardholderInformation": null,
                "contactDetails": null,
                "billingAddress": null,
                "paymentMethodInformation": {
                  "paymentMethodType": "CARD",
                  "paymentMethodSource": "CARD",
                  "cardInformation": {
                    "bankIdentificationNumber": "123456",
                    "lastFour": "1234",
                    "expiryMonth": 1,
                    "expiryYear": 2028,
                    "cardBrand": "MASTERCARD",
                    "cardType": "CREDIT",
                    "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                    "issuer": "RBC"
                  },
                  "paymentAccountReference": "11112222333344445555666677778",
                  "storePaymentMethod": "DO_NOT_STORE"
                },
                "createdAt": "2019-07-30T06:43:40.252Z",
                "modifiedAt": null,
                "customData": {
                  "property1": "string",
                  "property2": "string"
                }
              },
              "createdAt": "2019-07-30T06:43:40.252Z",
              "modifiedAt": "2019-07-30T06:43:40.252Z",
              "refundAmount": {
                "amount": 1600,
                "currency": "CAD"
              },
              "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "refundStatus": "SUCCEEDED",
              "transactionDetails": {
                "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                "isoResponseCode": "00",
                "responseCode": "000",
                "message": "SUCCESS",
                "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
              },
              "reason": "Defective product",
              "credentialOnFileResponse": null,
              "customData": {
                "property1": "string",
                "property2": "string"
              }
            }
          }
        }
      },
      "createRefundBadRequestResponse": {
        "description": "Demande de remboursement invalide",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "invalid_request": {
                "$ref": "#/components/examples/InvalidRefundErrorResponse"
              }
            }
          }
        }
      },
      "createRefundDeclinedResponse": {
        "description": "Opération de remboursement refusée",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "examples": {
              "declined": {
                "$ref": "#/components/examples/exp-refundResponse_DeclineErrorResponse"
              }
            }
          }
        }
      },
      "retrieveRefundSuccessResponse": {
        "description": "Vous avez réussi à récupérer le remboursement correspondant à l’identifiant de remboursement fourni.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/refund"
            },
            "examples": {
              "succeeded": {
                "$ref": "#/components/examples/SucceededRefundResponse"
              },
              "declined": {
                "$ref": "#/components/examples/DeclinedRefundResponse"
              }
            }
          }
        }
      },
      "refundNotFoundResponse": {
        "description": "Remboursement introuvable.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "data": [
                {
                  "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "payment": {
                    "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
                  },
                  "merchantId": "0123456789101",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "refundAmount": {
                    "amount": 1600,
                    "currency": "CAD"
                  },
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "refundStatus": "SUCCEEDED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "00",
                    "responseCode": "000",
                    "message": "SUCCESS",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "reason": "Defective product",
                  "credentialOnFileResponse": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                },
                {
                  "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "payment": {
                    "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
                  },
                  "merchantId": "0123456789101",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": null,
                    "contactDetails": null,
                    "billingAddress": null,
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": null,
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": "2019-07-30T06:43:40.252Z",
                  "refundAmount": {
                    "amount": 1600,
                    "currency": "CAD"
                  },
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "refundStatus": "DECLINED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "51",
                    "responseCode": "054",
                    "message": "Expired Card",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "reason": "Defective product",
                  "credentialOnFileResponse": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              ],
              "self": "/refunds?cursor=d41d8cd98f00b&limit=50",
              "first": "/refunds?cursor=d41d8cd98f00b&limit=50",
              "last": "/refunds?cursor=d41d8cd98f00b&limit=50",
              "next": null,
              "previous": null
            }
          }
        }
      },
      "listValidationsSuccessResponse": {
        "description": "Liste des validations de cartes",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/validationList"
            },
            "example": {
              "data": [
                {
                  "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": null,
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": {
                      "cardholderName": "John Doe",
                      "companyName": "SP Ltd"
                    },
                    "contactDetails": {
                      "phoneNumber": "+18663197450",
                      "email": "moneris@moneris.com"
                    },
                    "billingAddress": {
                      "unitNumber": "123A",
                      "streetNumber": "3300",
                      "streetName": "Bloor Street West",
                      "city": "Toronto",
                      "province": "ON",
                      "postalCode": "M8X 2X2",
                      "country": "CA"
                    },
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": "2019-07-30T06:43:40.252Z",
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "validationStatus": "SUCCEEDED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "00",
                    "responseCode": "000",
                    "message": "approved",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "verificationDetails": {
                    "addressVerificationServiceResultCode": "FULL_MATCH",
                    "cardSecurityCodeResultCode": "MATCH"
                  },
                  "credentialOnFileResponse": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                },
                {
                  "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAX",
                  "merchantId": "0123456789101",
                  "orderId": "1q2w3e4r5t6t78",
                  "createdAt": "2019-07-30T06:43:40.252Z",
                  "modifiedAt": null,
                  "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "paymentMethod": {
                    "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                    "merchantId": "0123456789101",
                    "cardholderInformation": {
                      "cardholderName": "John Doe",
                      "companyName": "SP Ltd"
                    },
                    "contactDetails": {
                      "phoneNumber": "+18663197450",
                      "email": "moneris@moneris.com"
                    },
                    "billingAddress": {
                      "unitNumber": "123A",
                      "streetNumber": "3300",
                      "streetName": "Bloor Street West",
                      "city": "Toronto",
                      "province": "ON",
                      "postalCode": "M8X 2X2",
                      "country": "CA"
                    },
                    "paymentMethodInformation": {
                      "paymentMethodType": "CARD",
                      "paymentMethodSource": "CARD",
                      "cardInformation": {
                        "bankIdentificationNumber": "123456",
                        "lastFour": "1234",
                        "expiryMonth": 1,
                        "expiryYear": 2028,
                        "cardBrand": "MASTERCARD",
                        "cardType": "CREDIT",
                        "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                        "issuer": "RBC"
                      },
                      "paymentAccountReference": "11112222333344445555666677778",
                      "storePaymentMethod": "DO_NOT_STORE"
                    },
                    "createdAt": "2019-07-30T06:43:40.252Z",
                    "modifiedAt": "2019-07-30T06:43:40.252Z",
                    "customData": {
                      "property1": "string",
                      "property2": "string"
                    }
                  },
                  "validationStatus": "DECLINED",
                  "transactionDetails": {
                    "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
                    "isoResponseCode": "43",
                    "responseCode": "421",
                    "message": "Stolen card, pick up.",
                    "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
                  },
                  "verificationDetails": {
                    "addressVerificationServiceResultCode": "FULL_MATCH",
                    "cardSecurityCodeResultCode": "MATCH"
                  },
                  "credentialOnFileResponse": null,
                  "customData": {
                    "property1": "string",
                    "property2": "string"
                  }
                }
              ],
              "self": "/validations?cursor=d41d8cd98f00b&limit=50",
              "first": "/validations?cursor=d41d8cd98f00b&limit=50",
              "last": "/validations?cursor=d41d8cd98f00b&limit=50",
              "next": null,
              "previous": null
            }
          }
        }
      },
      "retrieveValidationSuccessResponse": {
        "description": "Validation de carte récupérée avec succès",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/validation"
            },
            "examples": {
              "succeeded": {
                "$ref": "#/components/examples/ValidationSucceededResponse"
              },
              "declined": {
                "$ref": "#/components/examples/ValidationDeclinedRetryResponse"
              },
              "declined_retry": {
                "$ref": "#/components/examples/ValidationDeclinedResponse"
              }
            }
          }
        }
      },
      "validationNotFoundResponse": {
        "description": "Validation de la carte introuvable",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "NOT_FOUND",
              "status": 404,
              "detail": null,
              "instance": "/validations/vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "category": "INVALID_REQUEST_ERROR",
              "errors": []
            }
          }
        }
      },
      "listSubscriptionsResponse": {
        "description": "Liste paginée des abonnements.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subscriptionList"
            }
          }
        }
      },
      "createSubscriptionSuccessResponse": {
        "description": "Abonnement créé avec succès",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subscription"
            },
            "example": {
              "subscriptionId": "rp0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "orderId": "1q2w3e4r5t6t78",
              "invoiceNumber": "1a2s3d45v6",
              "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "createdAt": "2023-02-25T06:43:40.252Z",
              "modifiedAt": "2023-02-26T06:43:40.252Z",
              "billingInformation": {
                "billingIntervalUnit": "WEEK",
                "billingIntervalFrequency": 2,
                "billingIntervalCount": 2,
                "billingAmount": {
                  "amount": 2500,
                  "currency": "CAD"
                },
                "billingStartDate": "2025-02-01",
                "nextBillingDate": "2025-02-14",
                "billingEndDate": "2025-02-28"
              },
              "callbackUrl": "https://myserver.com/send/callback/here",
              "paymentMethod": {
                "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "0123456789101",
                "cardholderInformation": {
                  "cardholderName": "John Doe",
                  "companyName": "SP Ltd"
                },
                "contactDetails": {
                  "phoneNumber": "+18663197450",
                  "email": "moneris@moneris.com"
                },
                "billingAddress": {
                  "unitNumber": "123A",
                  "streetNumber": "3300",
                  "streetName": "Bloor Street West",
                  "city": "Toronto",
                  "province": "ON",
                  "postalCode": "M8X 2X2",
                  "country": "CA"
                },
                "paymentMethodInformation": {
                  "paymentMethodType": "CARD",
                  "paymentMethodSource": "TEMPORARY_TOKEN",
                  "cardInformation": {
                    "bankIdentificationNumber": "123456",
                    "lastFour": "1234",
                    "expiryMonth": 1,
                    "expiryYear": 2028,
                    "cardBrand": "MASTERCARD",
                    "cardType": "CREDIT",
                    "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                    "issuer": "RBC"
                  },
                  "paymentAccountReference": "11112222333344445555666677778",
                  "storePaymentMethod": "DO_NOT_STORE"
                },
                "createdAt": "2023-02-25T06:43:40.252Z",
                "modifiedAt": "2023-02-26T06:43:40.252Z",
                "customData": {
                  "property1": "string",
                  "property2": "string"
                }
              },
              "subscriptionStatus": "ACTIVE",
              "oneTimeAmount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "credentialOnFileResponse": {
                "originalAmount": {
                  "amount": 15000,
                  "currency": "CAD"
                },
                "issuerId": "A"
              },
              "payments": [
                {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "href": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
                }
              ]
            }
          }
        }
      },
      "retrieveSubscriptionSuccessResponse": {
        "description": "Abonnement trouvé avec succès et renvoyé dans la réponse.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subscription"
            },
            "example": {
              "subscriptionId": "rp0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "orderId": "1q2w3e4r5t6t78",
              "invoiceNumber": "1a2s3d45v6",
              "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "createdAt": "2023-02-25T06:43:40.252Z",
              "modifiedAt": "2023-02-26T06:43:40.252Z",
              "billingInformation": {
                "billingIntervalUnit": "WEEK",
                "billingIntervalFrequency": 2,
                "billingIntervalCount": 2,
                "billingAmount": {
                  "amount": 2500,
                  "currency": "CAD"
                },
                "billingStartDate": "2025-02-01",
                "nextBillingDate": "2025-02-14",
                "billingEndDate": "2025-02-28"
              },
              "callbackUrl": "https://myserver.com/send/callback/here",
              "paymentMethod": {
                "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "0123456789101",
                "cardholderInformation": {
                  "cardholderName": "John Doe",
                  "companyName": "SP Ltd"
                },
                "contactDetails": {
                  "phoneNumber": "+18663197450",
                  "email": "moneris@moneris.com"
                },
                "billingAddress": {
                  "unitNumber": "123A",
                  "streetNumber": "3300",
                  "streetName": "Bloor Street West",
                  "city": "Toronto",
                  "province": "ON",
                  "postalCode": "M8X 2X2",
                  "country": "CA"
                },
                "paymentMethodInformation": {
                  "paymentMethodType": "CARD",
                  "paymentMethodSource": "TEMPORARY_TOKEN",
                  "cardInformation": {
                    "bankIdentificationNumber": "123456",
                    "lastFour": "1234",
                    "expiryMonth": 1,
                    "expiryYear": 2028,
                    "cardBrand": "MASTERCARD",
                    "cardType": "CREDIT",
                    "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                    "issuer": "RBC"
                  },
                  "paymentAccountReference": "11112222333344445555666677778",
                  "storePaymentMethod": "DO_NOT_STORE"
                },
                "createdAt": "2023-02-25T06:43:40.252Z",
                "modifiedAt": "2023-02-26T06:43:40.252Z",
                "customData": {
                  "property1": "string",
                  "property2": "string"
                }
              },
              "subscriptionStatus": "ACTIVE",
              "oneTimeAmount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "credentialOnFileResponse": {
                "originalAmount": {
                  "amount": 15000,
                  "currency": "CAD"
                },
                "issuerId": "A"
              },
              "payments": [
                {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "href": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
                }
              ]
            }
          }
        }
      },
      "updateSubscriptionSuccessResponse": {
        "description": "Les détails de facturation des abonnements ont été traités avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subscription"
            },
            "example": {
              "subscriptionId": "rp0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "orderId": "1q2w3e4r5t6t78",
              "invoiceNumber": "1a2s3d45v6",
              "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "createdAt": "2023-02-25T06:43:40.252Z",
              "modifiedAt": "2023-02-26T06:43:40.252Z",
              "billingInformation": {
                "billingIntervalUnit": "WEEK",
                "billingIntervalFrequency": 2,
                "billingIntervalCount": 2,
                "billingAmount": {
                  "amount": 2500,
                  "currency": "CAD"
                },
                "billingStartDate": "2025-02-01",
                "nextBillingDate": "2025-02-14",
                "billingEndDate": "2025-02-28"
              },
              "callbackUrl": "https://myserver.com/send/callback/here",
              "paymentMethod": {
                "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "0123456789101",
                "cardholderInformation": {
                  "cardholderName": "John Doe",
                  "companyName": "SP Ltd"
                },
                "contactDetails": {
                  "phoneNumber": "+18663197450",
                  "email": "moneris@moneris.com"
                },
                "billingAddress": {
                  "unitNumber": "123A",
                  "streetNumber": "3300",
                  "streetName": "Bloor Street West",
                  "city": "Toronto",
                  "province": "ON",
                  "postalCode": "M8X 2X2",
                  "country": "CA"
                },
                "paymentMethodInformation": {
                  "paymentMethodType": "CARD",
                  "paymentMethodSource": "TEMPORARY_TOKEN",
                  "cardInformation": {
                    "bankIdentificationNumber": "123456",
                    "lastFour": "1234",
                    "expiryMonth": 1,
                    "expiryYear": 2028,
                    "cardBrand": "MASTERCARD",
                    "cardType": "CREDIT",
                    "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                    "issuer": "RBC"
                  },
                  "paymentAccountReference": "11112222333344445555666677778",
                  "storePaymentMethod": "DO_NOT_STORE"
                },
                "createdAt": "2023-02-25T06:43:40.252Z",
                "modifiedAt": "2023-02-26T06:43:40.252Z",
                "customData": {
                  "property1": "string",
                  "property2": "string"
                }
              },
              "subscriptionStatus": "ACTIVE",
              "oneTimeAmount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "credentialOnFileResponse": {
                "originalAmount": {
                  "amount": 15000,
                  "currency": "CAD"
                },
                "issuerId": "A"
              },
              "payments": [
                {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "href": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
                }
              ]
            }
          }
        }
      },
      "resumeSubscriptionSuccessResponse": {
        "description": "L'abonnement a été repris avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subscription"
            },
            "example": {
              "subscriptionId": "rp0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "orderId": "1q2w3e4r5t6t78",
              "invoiceNumber": "1a2s3d45v6",
              "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "createdAt": "2023-02-25T06:43:40.252Z",
              "modifiedAt": "2023-02-26T06:43:40.252Z",
              "billingInformation": {
                "billingIntervalUnit": "WEEK",
                "billingIntervalFrequency": 2,
                "billingIntervalCount": 2,
                "billingAmount": {
                  "amount": 2500,
                  "currency": "CAD"
                },
                "billingStartDate": "2025-02-01",
                "nextBillingDate": "2025-02-14",
                "billingEndDate": "2025-02-28"
              },
              "callbackUrl": "https://myserver.com/send/callback/here",
              "paymentMethod": {
                "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "0123456789101",
                "cardholderInformation": {
                  "cardholderName": "John Doe",
                  "companyName": "SP Ltd"
                },
                "contactDetails": {
                  "phoneNumber": "+18663197450",
                  "email": "moneris@moneris.com"
                },
                "billingAddress": {
                  "unitNumber": "123A",
                  "streetNumber": "3300",
                  "streetName": "Bloor Street West",
                  "city": "Toronto",
                  "province": "ON",
                  "postalCode": "M8X 2X2",
                  "country": "CA"
                },
                "paymentMethodInformation": {
                  "paymentMethodType": "CARD",
                  "paymentMethodSource": "TEMPORARY_TOKEN",
                  "cardInformation": {
                    "bankIdentificationNumber": "123456",
                    "lastFour": "1234",
                    "expiryMonth": 1,
                    "expiryYear": 2028,
                    "cardBrand": "MASTERCARD",
                    "cardType": "CREDIT",
                    "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                    "issuer": "RBC"
                  },
                  "paymentAccountReference": "11112222333344445555666677778",
                  "storePaymentMethod": "DO_NOT_STORE"
                },
                "createdAt": "2023-02-25T06:43:40.252Z",
                "modifiedAt": "2023-02-26T06:43:40.252Z",
                "customData": {
                  "property1": "string",
                  "property2": "string"
                }
              },
              "subscriptionStatus": "ACTIVE",
              "oneTimeAmount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "credentialOnFileResponse": {
                "originalAmount": {
                  "amount": 15000,
                  "currency": "CAD"
                },
                "issuerId": "A"
              },
              "payments": [
                {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "href": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
                }
              ]
            }
          }
        }
      },
      "pauseSubscriptionSuccessResponse": {
        "description": "L'abonnement a été suspendu avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subscription"
            },
            "example": {
              "subscriptionId": "rp0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "orderId": "1q2w3e4r5t6t78",
              "invoiceNumber": "1a2s3d45v6",
              "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "createdAt": "2023-02-25T06:43:40.252Z",
              "modifiedAt": "2023-02-26T06:43:40.252Z",
              "billingInformation": {
                "billingIntervalUnit": "WEEK",
                "billingIntervalFrequency": 2,
                "billingIntervalCount": 2,
                "billingAmount": {
                  "amount": 2500,
                  "currency": "CAD"
                },
                "billingStartDate": "2025-02-01",
                "nextBillingDate": null,
                "billingEndDate": "2025-02-28"
              },
              "callbackUrl": "https://myserver.com/send/callback/here",
              "paymentMethod": {
                "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "0123456789101",
                "cardholderInformation": {
                  "cardholderName": "John Doe",
                  "companyName": "SP Ltd"
                },
                "contactDetails": {
                  "phoneNumber": "+18663197450",
                  "email": "moneris@moneris.com"
                },
                "billingAddress": {
                  "unitNumber": "123A",
                  "streetNumber": "3300",
                  "streetName": "Bloor Street West",
                  "city": "Toronto",
                  "province": "ON",
                  "postalCode": "M8X 2X2",
                  "country": "CA"
                },
                "paymentMethodInformation": {
                  "paymentMethodType": "CARD",
                  "paymentMethodSource": "TEMPORARY_TOKEN",
                  "cardInformation": {
                    "bankIdentificationNumber": "123456",
                    "lastFour": "1234",
                    "expiryMonth": 1,
                    "expiryYear": 2028,
                    "cardBrand": "MASTERCARD",
                    "cardType": "CREDIT",
                    "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                    "issuer": "RBC"
                  },
                  "paymentAccountReference": "11112222333344445555666677778",
                  "storePaymentMethod": "DO_NOT_STORE"
                },
                "createdAt": "2023-02-25T06:43:40.252Z",
                "modifiedAt": "2023-02-26T06:43:40.252Z",
                "customData": {
                  "property1": "string",
                  "property2": "string"
                }
              },
              "subscriptionStatus": "PAUSED",
              "oneTimeAmount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "credentialOnFileResponse": {
                "originalAmount": {
                  "amount": 15000,
                  "currency": "CAD"
                },
                "issuerId": "A"
              },
              "payments": [
                {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "href": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
                }
              ]
            }
          }
        }
      },
      "cancelSubscriptionSuccessResponse": {
        "description": "Abonnement annulé avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subscription"
            },
            "example": {
              "subscriptionId": "rp0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "orderId": "1q2w3e4r5t6t78",
              "invoiceNumber": "1a2s3d45v6",
              "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "createdAt": "2023-02-25T06:43:40.252Z",
              "modifiedAt": "2023-02-26T06:43:40.252Z",
              "billingInformation": {
                "billingIntervalUnit": "WEEK",
                "billingIntervalFrequency": 2,
                "billingIntervalCount": 2,
                "billingAmount": {
                  "amount": 2500,
                  "currency": "CAD"
                },
                "billingStartDate": "2025-02-01",
                "nextBillingDate": null,
                "billingEndDate": "2025-02-28"
              },
              "callbackUrl": "https://myserver.com/send/callback/here",
              "paymentMethod": {
                "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "0123456789101",
                "cardholderInformation": {
                  "cardholderName": "John Doe",
                  "companyName": "SP Ltd"
                },
                "contactDetails": {
                  "phoneNumber": "+18663197450",
                  "email": "moneris@moneris.com"
                },
                "billingAddress": {
                  "unitNumber": "123A",
                  "streetNumber": "3300",
                  "streetName": "Bloor Street West",
                  "city": "Toronto",
                  "province": "ON",
                  "postalCode": "M8X 2X2",
                  "country": "CA"
                },
                "paymentMethodInformation": {
                  "paymentMethodType": "CARD",
                  "paymentMethodSource": "TEMPORARY_TOKEN",
                  "cardInformation": {
                    "bankIdentificationNumber": "123456",
                    "lastFour": "1234",
                    "expiryMonth": 1,
                    "expiryYear": 2028,
                    "cardBrand": "MASTERCARD",
                    "cardType": "CREDIT",
                    "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                    "issuer": "RBC"
                  },
                  "paymentAccountReference": "11112222333344445555666677778",
                  "storePaymentMethod": "DO_NOT_STORE"
                },
                "createdAt": "2023-02-25T06:43:40.252Z",
                "modifiedAt": "2023-02-26T06:43:40.252Z",
                "customData": {
                  "property1": "string",
                  "property2": "string"
                }
              },
              "subscriptionStatus": "CANCELED",
              "oneTimeAmount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "credentialOnFileResponse": {
                "originalAmount": {
                  "amount": 15000,
                  "currency": "CAD"
                },
                "issuerId": "A"
              },
              "payments": [
                {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "href": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
                }
              ]
            }
          }
        }
      },
      "extendSubscriptionSuccessResponse": {
        "description": "Abonnement prolongé avec succés",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subscription"
            },
            "example": {
              "subscriptionId": "rp0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "merchantId": "0123456789101",
              "orderId": "1q2w3e4r5t6t78",
              "invoiceNumber": "1a2s3d45v6",
              "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "createdAt": "2023-02-25T06:43:40.252Z",
              "modifiedAt": "2023-02-26T06:43:40.252Z",
              "billingInformation": {
                "billingIntervalUnit": "WEEK",
                "billingIntervalFrequency": 2,
                "billingIntervalCount": 14,
                "billingAmount": {
                  "amount": 2500,
                  "currency": "CAD"
                },
                "billingStartDate": "2025-02-01",
                "nextBillingDate": "2025-02-14",
                "billingEndDate": "2025-08-16"
              },
              "callbackUrl": "https://myserver.com/send/callback/here",
              "paymentMethod": {
                "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                "merchantId": "0123456789101",
                "cardholderInformation": {
                  "cardholderName": "John Doe",
                  "companyName": "SP Ltd"
                },
                "contactDetails": {
                  "phoneNumber": "+18663197450",
                  "email": "moneris@moneris.com"
                },
                "billingAddress": {
                  "unitNumber": "123A",
                  "streetNumber": "3300",
                  "streetName": "Bloor Street West",
                  "city": "Toronto",
                  "province": "ON",
                  "postalCode": "M8X 2X2",
                  "country": "CA"
                },
                "paymentMethodInformation": {
                  "paymentMethodType": "CARD",
                  "paymentMethodSource": "TEMPORARY_TOKEN",
                  "cardInformation": {
                    "bankIdentificationNumber": "123456",
                    "lastFour": "1234",
                    "expiryMonth": 1,
                    "expiryYear": 2028,
                    "cardBrand": "MASTERCARD",
                    "cardType": "CREDIT",
                    "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                    "issuer": "RBC"
                  },
                  "paymentAccountReference": "11112222333344445555666677778",
                  "storePaymentMethod": "DO_NOT_STORE"
                },
                "createdAt": "2023-02-25T06:43:40.252Z",
                "modifiedAt": "2023-02-26T06:43:40.252Z",
                "customData": {
                  "property1": "string",
                  "property2": "string"
                }
              },
              "subscriptionStatus": "ACTIVE",
              "oneTimeAmount": {
                "amount": 16000,
                "currency": "CAD"
              },
              "credentialOnFileResponse": {
                "originalAmount": {
                  "amount": 15000,
                  "currency": "CAD"
                },
                "issuerId": "A"
              },
              "payments": [
                {
                  "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
                  "href": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
                }
              ]
            }
          }
        }
      },
      "listCustomersSuccessResponse": {
        "description": "Liste de tous les clients",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/customerList"
            }
          }
        }
      },
      "createCustomerSuccessResponse": {
        "description": "Réponse du résultat de l’opération client",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/customer"
            }
          }
        }
      },
      "retrieveCustomerSuccessResponse": {
        "description": "Le client correspondant au 'customerId' fourni",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/customer"
            }
          }
        }
      },
      "customerNotFoundResponse": {
        "description": "Client introuvable",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
              "title": "NOT_FOUND",
              "status": 404,
              "detail": null,
              "instance": "/customers/ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
              "category": "INVALID_REQUEST_ERROR",
              "errors": []
            }
          }
        }
      },
      "customerUpdateSuccessResponse": {
        "description": "Le client a mis à jour avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/customer"
            }
          }
        }
      },
      "customerDeleteSuccessResponse": {
        "description": "Le client a été supprimé avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        }
      },
      "createThreeDSecureAuthenticationSuccessResponse": {
        "description": "L’authentification 3DS Secure a été créée et exécutée avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/threeDSecureAuthentication"
            }
          }
        }
      },
      "createThreeDSecureAuthenticationChallengeResponse": {
        "description": "L’opération d’authentification MPI s’est avérée problématique.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/threeDSecureAuthentication"
            }
          }
        }
      },
      "retrieveThreeDSecureAuthenticationSuccessResponse": {
        "description": "L’authentification correspondant à l''authentication-id fourni.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/threeDSecureAuthentication"
            }
          }
        }
      },
      "threeDSecureAuthenticationLookupSuccessResponse": {
        "description": "L’opération d’authentification MPI a été authentifiée avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/threeDSecureAuthentication"
            }
          }
        }
      },
      "createThreeDSecureCardLookupSuccessResponse": {
        "description": "Opération de recherche de carte 3D-Secure créée avec succès",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/cardLookup"
            }
          }
        }
      },
      "listKountInquiriesSuccessResponse": {
        "description": "Réponse du résultat de l’opération d’enquête Kount",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/kountInquiryList"
            }
          }
        }
      },
      "createKountInquirySuccessResponse": {
        "description": "L’enquête Kount a été approuvée avec succès.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/kountInquiry"
            }
          }
        }
      },
      "createKountInquiryAcceptedResponse": {
        "description": "L’enquête Kount a été acceptée et est en cours d’examen.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/kountInquiry"
            }
          }
        }
      },
      "retrieveKountInquiryResponse": {
        "description": "Réponse du résultat de l’opération d’acquisition de L’enquête Kount",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/kountInquiry"
            }
          }
        }
      },
      "assertKountInquirySuccessResponse": {
        "description": "Réponse du résultat de l’opération d'affirmation de L’enquête Kount",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/kountInquiry"
            }
          }
        }
      },
      "assertKountInquiryAcceptedResponse": {
        "description": "L’enquête Kount a été mise à jour et est en cours d’examen.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/kountInquiry"
            }
          }
        }
      },
      "installmentLookupResponse": {
        "description": "Liste des plans éligibles.",
        "headers": {
          "Api-Version": {
            "$ref": "#/components/headers/apiVersion"
          },
          "X-Correlation-Id": {
            "$ref": "#/components/headers/correlationId"
          },
          "Sunset": {
            "$ref": "#/components/headers/sunset"
          },
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/rateLimitCount"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/rateLimitRemaining"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/installmentEligibilityResponse"
            }
          }
        }
      }
    },
    "examples": {
      "InvalidListRequestErrorResponse": {
        "summary": "Invalid query parameter",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_QUERY_PARAMETER",
          "status": 400,
          "detail": null,
          "instance": null,
          "category": "INVALID_REQUEST_ERROR",
          "errors": [
            {
              "parameterName": "created_from",
              "parameterValue": "2019/07/30",
              "reasonCode": "INVALID_FORMAT"
            }
          ]
        }
      },
      "regularPurchaseWithPaymentMethodId": {
        "summary": "Regular Purchase With Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "PAYMENT_METHOD_ID",
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "storePaymentMethod": "DO_NOT_STORE"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithCardPaymentMethod": {
        "summary": "Regular Purchase With Payment Method Details",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "CARD",
            "card": {
              "cardNumber": "4242424242424242",
              "expiryMonth": 1,
              "expiryYear": 2028,
              "cardSecurityCode": "123"
            },
            "storePaymentMethod": "DO_NOT_STORE"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithTemporaryPaymentMethod": {
        "summary": "Regular Purchase With Temporary Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "TEMPORARY_TOKEN",
            "temporaryToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithPermanentPaymentMethod": {
        "summary": "Regular Purchase With Permanent Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "PERMANENT_TOKEN",
            "permanentToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
            "credentialOnFileInformation": {
              "paymentIndicator": "UNSCHEDULED_CREDENTIAL_ON_FILE",
              "paymentInformation": "FIRST"
            }
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithApplePayEncryptedPaymentMethod": {
        "summary": "Regular Purchase With Apple Pay Encrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "APPLE_PAY_ENCRYPTED",
            "displayName": "MasterCard 4079",
            "cardBrand": "MASTERCARD",
            "applePayVersion": "EC_V1",
            "data": "ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh",
            "signature": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "publicKeyHash": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "ephemeralPublicKey": "ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh",
            "applePayTransactionId": "22iWw1ySnzwiav6ToJ7KOhkY49",
            "walletIndicator": "IN_BROWSER"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithApplePayDecryptedPaymentMethod": {
        "summary": "Regular Purchase With Apple Pay Decrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "APPLE_PAY_DECRYPTED",
            "applicationPrimaryAccountNumber": "4242424242424242",
            "expiryMonth": 1,
            "expiryYear": 2028,
            "deviceManufacturerIdentifier": "r7tBjIbr4eaTCgs8bkU0w7hB7s",
            "dataType": "THREE_D_SECURE",
            "cryptogram": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "walletEcommerceIndicator": "07",
            "cardBrand": "VISA",
            "walletIndicator": "IN_APPLICATION"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithGooglePayEncryptedPaymentMethod": {
        "summary": "Regular Purchase With Google Pay Encrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "GOOGLE_PAY_ENCRYPTED",
            "cardBrand": "MASTERCARD",
            "googlePayProtocolVersion": "EC_V1",
            "signedMessage": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "signature": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "walletIndicator": "IN_BROWSER"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "regularPurchaseWithGooglePayDecryptedPaymentMethod": {
        "summary": "Regular Purchase With Google Pay Decrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "GOOGLE_PAY_DECRYPTED",
            "cardBrand": "VISA",
            "cardDetails": {
              "personalAccountNumber": "4242424242424242",
              "expiryMonth": 1,
              "expiryYear": 2028,
              "authenticationMethod": "CRYPTOGRAM_3DS",
              "cryptogram": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
              "walletEcommerceIndicator": "07"
            },
            "walletIndicator": "IN_BROWSER",
            "walletSource": "CARD"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "preAuthorizationWithPaymentMethodId": {
        "summary": "Pre-Authorization With Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "GOOGLE_PAY_DECRYPTED",
            "cardBrand": "VISA",
            "cardDetails": {
              "personalAccountNumber": "4242424242424242",
              "expiryMonth": 1,
              "expiryYear": 2028,
              "authenticationMethod": "CRYPTOGRAM_3DS",
              "cryptogram": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
              "walletEcommerceIndicator": "07"
            },
            "walletIndicator": "IN_BROWSER",
            "walletSource": "CARD"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": true,
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "preAuthorizationWithCardPaymentMethod": {
        "summary": "Pre-Authorization With Card Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "PERMANENT_TOKEN",
            "permanentToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
            "credentialOnFileInformation": {
              "paymentIndicator": "UNSCHEDULED_CREDENTIAL_ON_FILE",
              "paymentInformation": "FIRST"
            }
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": false,
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "preAuthorizationWithTemporaryToken": {
        "summary": "Pre-Authorization With Temporary Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "TEMPORARY_TOKEN",
            "temporaryToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": false,
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "preAuthorizationWithPermanentToken": {
        "summary": "Pre-Authorization With Permanent Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "PERMANENT_TOKEN",
            "permanentToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
            "credentialOnFileInformation": {
              "paymentIndicator": "UNSCHEDULED_CREDENTIAL_ON_FILE",
              "paymentInformation": "FIRST"
            }
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "automaticCapture": false,
          "dynamicDescriptor": "moneris",
          "ipv4": "192.0.2.146",
          "ipv6": "2345:0425:2CA1:0000:0000:0567:5673:23b5"
        }
      },
      "PurchaseCompletedResponse": {
        "summary": "Successful Purchase",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "SUCCEEDED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "00",
            "responseCode": "000",
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "credentialOnFileResponse": null,
          "refundDetails": null,
          "customData": null
        }
      },
      "PreauthorizationCompletedResponse": {
        "summary": "Successful Pre-Authorization",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "amountDetails": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "AUTHORIZED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "27",
            "responseCode": "000",
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "credentialOnFileResponse": null,
          "refundDetails": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "InvalidRequestErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_ADDRESS",
          "status": 400,
          "detail": null,
          "instance": null,
          "category": "INVALID_REQUEST_ERROR",
          "errors": [
            {
              "reasonCode": "INVALID_FORMAT",
              "parameterName": "address.postalCode",
              "parameterValue": "MAP3J8"
            }
          ]
        }
      },
      "IdempotencyRequestErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "IDEMPOTENCY_KEY_ALREADY_EXISTS",
          "status": 409,
          "detail": null,
          "instance": null,
          "category": "IDEMPOTENCY_ERROR",
          "errors": []
        }
      },
      "DeclineErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "EXCESS PIN TRIES",
          "status": 400,
          "detail": "052-38 - PIN retries exceeded",
          "instance": "/payments/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "DECLINED_ERROR",
          "errors": []
        }
      },
      "PurchaseDeclinedResponse": {
        "summary": "Purchase Declined",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "DECLINED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "43",
            "responseCode": "421",
            "message": "Stolen card, pick up.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "credentialOnFileResponse": null,
          "refundDetails": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "PurchaseDeclinedRetryResponse": {
        "summary": "Purchase Declined with Retry",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "DECLINED_RETRY",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "79",
            "responseCode": "416",
            "message": "Life cycle declines.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "credentialOnFileResponse": null,
          "refundDetails": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "PurchaseCanceledResponse": {
        "summary": "Purchase Canceled",
        "value": {
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "transactionDateTime": "2019-07-30T06:43:40.252Z",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "authorizedAmount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "capturableAmount": {
            "amount": 0,
            "currency": "CAD"
          },
          "amountDetails": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "paymentStatus": "CANCELED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "00",
            "responseCode": "000",
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH",
            "threeDSecureAuthenticationValueResultCode": "VISA_CAVV_PASSED_VALIDATION_ATTEMPTED"
          },
          "credentialOnFileResponse": null,
          "refundDetails": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "InvalidPurchaseErrorResponse": {
        "summary": "Purchase already completed",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_STATE",
          "status": 400,
          "detail": "Invalid purchase state",
          "instance": "/payments/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "INVALID_REQUEST_ERROR"
        }
      },
      "cardPaymentMethodRequest": {
        "summary": "Card Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "cardholderInformation": {
            "cardholderName": "John Doe",
            "companyName": "SP Ltd"
          },
          "contactDetails": {
            "phoneNumber": "+18663197450",
            "email": "moneris@moneris.com"
          },
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor Street West",
            "city": "Toronto",
            "province": "ON",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethodSource": "CARD",
          "card": {
            "cardNumber": "4242424242424242",
            "expiryMonth": 1,
            "expiryYear": 2028,
            "cardSecurityCode": "123"
          },
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "temporaryTokenPaymentMethodRequest": {
        "summary": "Temporary Token Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentMethodSource": "TEMPORARY_TOKEN",
          "temporaryToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "permanentTokenPaymentMethodRequest": {
        "summary": "Permanent Token Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentMethodSource": "PERMANENT_TOKEN",
          "permanentToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "applePayEncryptedPaymentMethodRequest": {
        "summary": "Apple Pay Encrypted Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentMethodSource": "APPLE_PAY_ENCRYPTED",
          "displayName": "MasterCard 4079",
          "cardBrand": "MASTERCARD",
          "applePayVersion": "EC_V1",
          "data": "ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh",
          "signature": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
          "publicKeyHash": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
          "ephemeralPublicKey": "ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh",
          "applePayTransactionId": "22iWw1ySnzwiav6ToJ7KOhkY49",
          "walletIndicator": "IN_BROWSER",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "applePayDecryptedPaymentMethodRequest": {
        "summary": "Apple Pay Decrypted Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentMethodSource": "APPLE_PAY_DECRYPTED",
          "applicationPrimaryAccountNumber": "4242424242424242",
          "expiryMonth": 1,
          "expiryYear": 2028,
          "deviceManufacturerIdentifier": "r7tBjIbr4eaTCgs8bkU0w7hB7s",
          "dataType": "THREE_D_SECURE",
          "cryptogram": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
          "walletEcommerceIndicator": "07",
          "cardBrand": "VISA",
          "walletIndicator": "IN_APPLICATION",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "googlePayEncryptedPaymentMethodRequest": {
        "summary": "Google Pay Encrypted Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentMethodSource": "GOOGLE_PAY_ENCRYPTED",
          "cardBrand": "MASTERCARD",
          "googlePayProtocolVersion": "EC_V1",
          "signedMessage": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
          "signature": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
          "walletIndicator": "IN_BROWSER",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "googlePayDecryptedPaymentMethodRequest": {
        "summary": "Google Pay Decrypted Payment Method request",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentMethodSource": "GOOGLE_PAY_DECRYPTED",
          "cardBrand": "VISA",
          "cardDetails": {
            "personalAccountNumber": "4242424242424242",
            "expiryMonth": 1,
            "expiryYear": 2028,
            "authenticationMethod": "CRYPTOGRAM_3DS",
            "cryptogram": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "walletEcommerceIndicator": "07"
          },
          "walletIndicator": "IN_BROWSER",
          "walletSource": "CARD",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "updateCardPaymentMethodRequest": {
        "summary": "Card Payment Method request",
        "value": {
          "cardholderInformation": {
            "cardholderName": "John Doe",
            "companyName": "SP Ltd"
          },
          "contactDetails": {
            "phoneNumber": "+18663197450",
            "email": "moneris@moneris.com"
          },
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor Street West",
            "city": "Toronto",
            "province": "ON",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethodSource": "CARD",
          "card": {
            "cardNumber": "4242424242424242",
            "expiryMonth": 1,
            "expiryYear": 2028,
            "cardSecurityCode": "123"
          },
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "updateTemporaryTokenPaymentMethodRequest": {
        "summary": "Temporary Token Payment Method request",
        "value": {
          "paymentMethodSource": "TEMPORARY_TOKEN",
          "temporaryToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "updatePermanentTokenPaymentMethodRequest": {
        "summary": "Permanent Token Payment Method request",
        "value": {
          "paymentMethodSource": "PERMANENT_TOKEN",
          "permanentToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "concurrentRequestErrorResponse": {
        "summary": "Concurrent Access Error",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "CONCURRENCY_ERROR",
          "status": 409,
          "detail": null,
          "instance": null,
          "category": "API_ERROR",
          "errors": []
        }
      },
      "matchingRefundRequest": {
        "summary": "Matching Refund",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "refundAmount": {
            "amount": 1600,
            "currency": "CAD"
          },
          "dynamicDescriptor": "moneris",
          "ipv4": "104.75.173.179",
          "ipv6": "2600:1401:2::8a",
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "reason": "Defective product",
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "InvalidRefundErrorResponse": {
        "summary": "Invalid Matching Refund",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "INVALID_PAYMENT",
          "status": 400,
          "detail": "Invalid payment Id or payment Id not found",
          "instance": "/payments/pi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "category": "INVALID_REQUEST_ERROR"
        }
      },
      "exp-refundResponse_DeclineErrorResponse": {
        "summary": "Refund declined",
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "EXPIRED CARD",
          "status": 400,
          "detail": "051-54 - Expired Card",
          "instance": "/refunds/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "DECLINED_ERROR",
          "errors": []
        }
      },
      "SucceededRefundResponse": {
        "summary": "Refund succeeded",
        "value": {
          "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "payment": {
            "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": "0123456789101",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "refundAmount": {
            "amount": 1600,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "refundStatus": "SUCCEEDED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "00",
            "responseCode": "000",
            "message": "SUCCESS",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "reason": "Defective product",
          "credentialOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "DeclinedRefundResponse": {
        "summary": "Refund succeeded",
        "value": {
          "refundId": "ri0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "payment": {
            "paymentId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "merchantId": "0123456789101",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": null,
            "contactDetails": null,
            "billingAddress": null,
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": null,
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": "2019-07-30T06:43:40.252Z",
          "refundAmount": {
            "amount": 1600,
            "currency": "CAD"
          },
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "refundStatus": "DECLINED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "51",
            "responseCode": "054",
            "message": "Expired Card",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "reason": "Defective product",
          "credentialOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "validationWithPaymentMethodId": {
        "summary": "Validation With Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "PAYMENT_METHOD_ID",
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "storePaymentMethod": "DO_NOT_STORE"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithCardPaymentMethod": {
        "summary": "Validation With Payment Method Details",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "CARD",
            "card": {
              "cardNumber": "4242424242424242",
              "expiryMonth": 1,
              "expiryYear": 2028,
              "cardSecurityCode": "123"
            },
            "storePaymentMethod": "DO_NOT_STORE"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithTemporaryTokenPaymentMethod": {
        "summary": "Validation With Temporary Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "TEMPORARY_TOKEN",
            "temporaryToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
            "credentialOnFileInformation": {
              "paymentIndicator": "CUSTOMER_INITIATED",
              "paymentInformation": "FIRST",
              "issuerId": "123asd"
            }
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithPermanentTokenPaymentMethod": {
        "summary": "Validation With Permanent Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "PERMANENT_TOKEN",
            "permanentToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2",
            "credentialOnFileInformation": {
              "paymentIndicator": "UNSCHEDULED_CREDENTIAL_ON_FILE",
              "paymentInformation": "FIRST",
              "issuerId": null
            }
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithApplePayEncryptedPaymentMethod": {
        "summary": "Validation With Apple Pay Encrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "APPLE_PAY_ENCRYPTED",
            "displayName": "MasterCard 4079",
            "cardBrand": "MASTERCARD",
            "applePayVersion": "EC_V1",
            "data": "ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh",
            "signature": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "publicKeyHash": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "ephemeralPublicKey": "ZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnpkV0lpT2lJeE1qTTBOVFkzT0Rrd0lpd2libUZ0WlNJNklrcHZh",
            "applePayTransactionId": "22iWw1ySnzwiav6ToJ7KOhkY49",
            "walletIndicator": "IN_BROWSER"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithApplePayDecryptedPaymentMethod": {
        "summary": "Validation With Apple Pay Decrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "APPLE_PAY_DECRYPTED",
            "applicationPrimaryAccountNumber": "4242424242424242",
            "expiryMonth": 1,
            "expiryYear": 2028,
            "deviceManufacturerIdentifier": "r7tBjIbr4eaTCgs8bkU0w7hB7s",
            "dataType": "THREE_D_SECURE",
            "cryptogram": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "walletEcommerceIndicator": "07",
            "cardBrand": "VISA",
            "walletIndicator": "IN_APPLICATION"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithGooglePayEncryptedPaymentMethod": {
        "summary": "Validation With Google Pay Encrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "GOOGLE_PAY_ENCRYPTED",
            "cardBrand": "MASTERCARD",
            "googlePayProtocolVersion": "EC_V1",
            "signedMessage": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "signature": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
            "walletIndicator": "IN_BROWSER"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "validationWithGooglePayDecryptedPaymentMethod": {
        "summary": "Validation With Google Pay Decrypted Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac1",
          "orderId": "1q2w3e4r5t6t78",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodSource": "GOOGLE_PAY_DECRYPTED",
            "cardBrand": "VISA",
            "cardDetails": {
              "personalAccountNumber": "4242424242424242",
              "expiryMonth": 1,
              "expiryYear": 2028,
              "authenticationMethod": "CRYPTOGRAM_3DS",
              "cryptogram": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva",
              "walletEcommerceIndicator": "07"
            },
            "walletIndicator": "IN_BROWSER",
            "walletSource": "CARD"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris"
        }
      },
      "exp-validationResponse_DeclineErrorResponse": {
        "value": {
          "type": "https://developer.moneris.com/en/More/Testing/Response%20Codes",
          "title": "EXCESS PIN TRIES",
          "status": 400,
          "detail": "052-38 - PIN retries exceeded",
          "instance": "/validations/20c3ee41-2560-4645-b84f-631fb08819de",
          "category": "DECLINED_ERROR",
          "errors": []
        }
      },
      "ValidationSucceededResponse": {
        "summary": "Successful Validation",
        "value": {
          "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": {
              "phoneNumber": "+18663197450",
              "email": "moneris@moneris.com"
            },
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": "2019-07-30T06:43:40.252Z",
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "validationStatus": "SUCCEEDED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "00",
            "responseCode": "000",
            "message": "approved",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH"
          },
          "credentialOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "ValidationDeclinedRetryResponse": {
        "summary": "Validation Declined with Retry",
        "value": {
          "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": {
              "phoneNumber": "+18663197450",
              "email": "moneris@moneris.com"
            },
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": "2019-07-30T06:43:40.252Z",
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "validationStatus": "DECLINED_RETRY",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "79",
            "responseCode": "416",
            "message": "Life cycle declines.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH"
          },
          "credentialOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "ValidationDeclinedResponse": {
        "summary": "Validation Declined",
        "value": {
          "validationId": "vi0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "merchantId": "0123456789101",
          "orderId": "1q2w3e4r5t6t78",
          "createdAt": "2019-07-30T06:43:40.252Z",
          "modifiedAt": null,
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "paymentMethod": {
            "paymentMethodId": "pm0105ARZ3NDEKTSV4RRFFQ69G5FAV",
            "merchantId": "0123456789101",
            "cardholderInformation": {
              "cardholderName": "John Doe",
              "companyName": "SP Ltd"
            },
            "contactDetails": {
              "phoneNumber": "+18663197450",
              "email": "moneris@moneris.com"
            },
            "billingAddress": {
              "unitNumber": "123A",
              "streetNumber": "3300",
              "streetName": "Bloor Street West",
              "city": "Toronto",
              "province": "ON",
              "postalCode": "M8X 2X2",
              "country": "CA"
            },
            "paymentMethodInformation": {
              "paymentMethodType": "CARD",
              "paymentMethodSource": "CARD",
              "cardInformation": {
                "bankIdentificationNumber": "123456",
                "lastFour": "1234",
                "expiryMonth": 1,
                "expiryYear": 2028,
                "cardBrand": "MASTERCARD",
                "cardType": "CREDIT",
                "cardFingerprint": "1Q2W3E4r5t6rfwewerwewrrw",
                "issuer": "RBC"
              },
              "paymentAccountReference": "11112222333344445555666677778",
              "storePaymentMethod": "DO_NOT_STORE"
            },
            "createdAt": "2019-07-30T06:43:40.252Z",
            "modifiedAt": "2019-07-30T06:43:40.252Z",
            "customData": {
              "property1": "string",
              "property2": "string"
            }
          },
          "validationStatus": "DECLINED",
          "transactionDetails": {
            "transactionUniqueId": "938c2cc0dcc05f2b68c4287040cfcf71",
            "isoResponseCode": "43",
            "responseCode": "421",
            "message": "Stolen card, pick up.",
            "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE"
          },
          "verificationDetails": {
            "addressVerificationServiceResultCode": "FULL_MATCH",
            "cardSecurityCodeResultCode": "MATCH"
          },
          "credentialOnFileResponse": null,
          "customData": {
            "property1": "string",
            "property2": "string"
          }
        }
      },
      "subscriptionRequestWithImmediateInitialAmount": {
        "summary": "Recurring Subscription With immediate Initial Amount",
        "value": {
          "idempotencyKey": "6q5w4e7r8t9y",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "subscriptionType": "RECURRING",
          "billingDetails": {
            "billingIntervalUnit": "MONTH",
            "billingIntervalFrequency": 1,
            "billingIntervalCount": 5,
            "billingStartDate": "2024-02-22",
            "billingAmount": {
              "amount": 25000,
              "currency": "CAD"
            }
          },
          "callbackUrl": "https://myserver.com/send/callback/here",
          "oneTimeAmount": {
            "amount": 2000,
            "currency": "CAD"
          },
          "paymentMethod": {
            "paymentMethodSource": "PAYMENT_METHOD_ID",
            "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "threeDSecureData": {
            "threeDSecureAuthenticationId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ipv4": "104.75.173.179",
          "ipv6": "2600:1401:2::8a"
        }
      },
      "dailyPaymentRequestToStartAtbillingStartDate": {
        "summary": "Daily Recurring Subscription To Start at Start Date",
        "value": {
          "idempotencyKey": "6q5w4e7r8t9y",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "subscriptionType": "RECURRING",
          "billingDetails": {
            "billingIntervalUnit": "DAY",
            "billingIntervalFrequency": 1,
            "billingIntervalCount": 7,
            "billingStartDate": "2024-02-22",
            "billingAmount": {
              "amount": 25000,
              "currency": "CAD"
            }
          },
          "callbackUrl": "https://myserver.com/send/callback/here",
          "paymentMethod": {
            "paymentMethodSource": "PAYMENT_METHOD_ID",
            "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "threeDSecureData": {
            "threeDSecureAuthenticationId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ipv4": "104.75.173.179",
          "ipv6": "2600:1401:2::8a"
        }
      },
      "weeklyPaymentRequestToStartAtbillingStartDate": {
        "summary": "Weekly Recurring Subscription To Start at Start Date",
        "value": {
          "idempotencyKey": "6q5w4e7r8t9y",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "subscriptionType": "RECURRING",
          "billingDetails": {
            "billingIntervalUnit": "WEEK",
            "billingIntervalFrequency": 1,
            "billingIntervalCount": 5,
            "billingStartDate": "2024-02-22",
            "billingAmount": {
              "amount": 25000,
              "currency": "CAD"
            }
          },
          "callbackUrl": "https://myserver.com/send/callback/here",
          "paymentMethod": {
            "paymentMethodSource": "PAYMENT_METHOD_ID",
            "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "threeDSecureData": {
            "threeDSecureAuthenticationId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ipv4": "104.75.173.179",
          "ipv6": "2600:1401:2::8a"
        }
      },
      "biweeklyPaymentRequestToStartAtbillingStartDate": {
        "summary": "Bi-Weekly Recurring Subscription To Start at Start Date",
        "value": {
          "idempotencyKey": "6q5w4e7r8t9y",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "subscriptionType": "RECURRING",
          "billingDetails": {
            "billingIntervalUnit": "WEEK",
            "billingIntervalFrequency": 2,
            "billingIntervalCount": 5,
            "billingStartDate": "2024-02-22",
            "billingAmount": {
              "amount": 25000,
              "currency": "CAD"
            }
          },
          "callbackUrl": "https://myserver.com/send/callback/here",
          "paymentMethod": {
            "paymentMethodSource": "PAYMENT_METHOD_ID",
            "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "threeDSecureData": {
            "threeDSecureAuthenticationId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ipv4": "104.75.173.179",
          "ipv6": "2600:1401:2::8a"
        }
      },
      "monthlyPaymentRequestToStartAtbillingStartDate": {
        "summary": "Monthly Recurring Subscription To Start at Start Date",
        "value": {
          "idempotencyKey": "6q5w4e7r8t9y",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "subscriptionType": "RECURRING",
          "billingDetails": {
            "billingIntervalUnit": "MONTH",
            "billingIntervalFrequency": 1,
            "billingIntervalCount": 5,
            "billingStartDate": "2024-02-22",
            "billingAmount": {
              "amount": 25000,
              "currency": "CAD"
            }
          },
          "callbackUrl": "https://myserver.com/send/callback/here",
          "paymentMethod": {
            "paymentMethodSource": "PAYMENT_METHOD_ID",
            "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "threeDSecureData": {
            "threeDSecureAuthenticationId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ipv4": "104.75.173.179",
          "ipv6": "2600:1401:2::8a"
        }
      },
      "endOfMonthPaymentRequestToStartAtbillingStartDate": {
        "summary": "End Of Month Recurring Subscription To Start at Start Date",
        "value": {
          "idempotencyKey": "6q5w4e7r8t9y",
          "orderId": "1q2w3e4r5t6t78",
          "invoiceNumber": "1a2s3d45v6",
          "subscriptionType": "RECURRING",
          "billingDetails": {
            "billingIntervalUnit": "END_OF_MONTH",
            "billingIntervalFrequency": 1,
            "billingIntervalCount": 5,
            "billingStartDate": "2024-02-22",
            "billingAmount": {
              "amount": 25000,
              "currency": "CAD"
            }
          },
          "callbackUrl": "https://myserver.com/send/callback/here",
          "paymentMethod": {
            "paymentMethodSource": "PAYMENT_METHOD_ID",
            "paymentMethodId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ecommerceIndicator": "AUTHENTICATED_ECOMMERCE",
          "customerId": "ci0105ARZ3NDEKTSV4RRFFQ69G5FAV",
          "customData": {
            "property1": "string",
            "property2": "string"
          },
          "dynamicDescriptor": "moneris",
          "threeDSecureData": {
            "threeDSecureAuthenticationId": "pi0105ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "ipv4": "104.75.173.179",
          "ipv6": "2600:1401:2::8a"
        }
      },
      "threeDSecureBrowserChannelWithPaymentMethodId": {
        "summary": "3D-Secure Browser channel, with Payment Method Id",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "browserIpAddress": "104.75.173.179",
          "browserScreenHeight": 1080,
          "browserScreenWidth": 1920,
          "cardholderEmail": "moneris@moneris.com",
          "cardholderName": "John Doe",
          "cardholderPhoneNumber": "+18663197450",
          "threeDSecureDeviceChannel": "BROWSER",
          "threeDSecureMessageCategory": "PAYMENT",
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor",
            "city": "Toronto",
            "province": "ON",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethod": {
            "paymentMethodSource": "PAYMENT_METHOD_ID",
            "paymentMethodId": "pm0001J7HZZHPB20VCHWN8PEEPXZYH"
          },
          "threeDSecureRequestType": "CARDHOLDER",
          "threeDSecureNotificationUrl": "https%3A%2F%2Fputsreq.com%2FnMhp2fzHDgfzSs4GiNTD",
          "threeDSecureCompletionIndicator": "SUCCESS",
          "threeDSecureChallengeWindowSize": "FULL_SCREEN",
          "browserUserAgent": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})",
          "browserJavaEnabled": true,
          "browserJavascriptEnabled": true,
          "browserLanguage": "en"
        }
      },
      "threeDSecureBrowserChannelWithCardPaymentMethod": {
        "summary": "3D-Secure Browser channel, with Card Payment Method",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "browserIpAddress": "104.75.173.179",
          "browserScreenHeight": 1080,
          "browserScreenWidth": 1920,
          "cardholderEmail": "moneris@moneris.com",
          "cardholderName": "John Doe",
          "cardholderPhoneNumber": "+18663197450",
          "threeDSecureDeviceChannel": "BROWSER",
          "threeDSecureMessageCategory": "PAYMENT",
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor",
            "city": "Toronto",
            "province": "ON",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethod": {
            "paymentMethodSource": "CARD",
            "card": {
              "cardNumber": "4365729291041247",
              "expiryMonth": 1,
              "expiryYear": 2028,
              "cardSecurityCode": "123"
            }
          },
          "threeDSecureRequestType": "CARDHOLDER",
          "threeDSecureNotificationUrl": "https%3A%2F%2Fputsreq.com%2FnMhp2fzHDgfzSs4GiNTD",
          "threeDSecureCompletionIndicator": "SUCCESS",
          "threeDSecureChallengeWindowSize": "FULL_SCREEN",
          "browserUserAgent": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})",
          "browserJavaEnabled": true,
          "browserJavascriptEnabled": true,
          "browserLanguage": "en"
        }
      },
      "threeDSecureBrowserChannelWithTemporaryToken": {
        "summary": "3D-Secure Browser channel, with Temporary Token",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "browserIpAddress": "104.75.173.179",
          "browserScreenHeight": 1080,
          "browserScreenWidth": 1920,
          "cardholderEmail": "moneris@moneris.com",
          "cardholderName": "John Doe",
          "cardholderPhoneNumber": "+18663197450",
          "threeDSecureDeviceChannel": "BROWSER",
          "threeDSecureMessageCategory": "PAYMENT",
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor",
            "city": "Toronto",
            "province": "ON",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethod": {
            "paymentMethodSource": "TEMPORARY_TOKEN",
            "temporaryToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2"
          },
          "threeDSecureRequestType": "CARDHOLDER",
          "threeDSecureNotificationUrl": "https%3A%2F%2Fputsreq.com%2FnMhp2fzHDgfzSs4GiNTD",
          "threeDSecureCompletionIndicator": "SUCCESS",
          "threeDSecureChallengeWindowSize": "FULL_SCREEN",
          "browserUserAgent": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})",
          "browserJavaEnabled": true,
          "browserJavascriptEnabled": true,
          "browserLanguage": "en"
        }
      },
      "threeDSecureBrowserChannelWithPermanentToken": {
        "summary": "3D-Secure Browser channel, with Permanent Token",
        "value": {
          "idempotencyKey": "5d8f812e-9969-4885-85bb-d03948eccac2",
          "amount": {
            "amount": 16000,
            "currency": "CAD"
          },
          "browserIpAddress": "104.75.173.179",
          "browserScreenHeight": 1080,
          "browserScreenWidth": 1920,
          "cardholderEmail": "moneris@moneris.com",
          "cardholderName": "John Doe",
          "cardholderPhoneNumber": "+18663197450",
          "threeDSecureDeviceChannel": "BROWSER",
          "threeDSecureMessageCategory": "PAYMENT",
          "billingAddress": {
            "unitNumber": "123A",
            "streetNumber": "3300",
            "streetName": "Bloor",
            "city": "Toronto",
            "province": "ON",
            "postalCode": "M8X 2X2",
            "country": "CA"
          },
          "paymentMethod": {
            "paymentMethodSource": "PERMANENT_TOKEN",
            "permanentToken": "ot-y2mxjFqmqDisQQGB6hQ8xwQ2"
          },
          "threeDSecureRequestType": "CARDHOLDER",
          "threeDSecureNotificationUrl": "https%3A%2F%2Fputsreq.com%2FnMhp2fzHDgfzSs4GiNTD",
          "threeDSecureCompletionIndicator": "SUCCESS",
          "threeDSecureChallengeWindowSize": "FULL_SCREEN",
          "browserUserAgent": "Mozilla/5.0 (Linux; {Android Version}; {Build Tag etc.})",
          "browserJavaEnabled": true,
          "browserJavascriptEnabled": true,
          "browserLanguage": "en"
        }
      },
      "CreateStandardOrderPayload": {
        "summary": "Create Standard Order Payload",
        "value": {
          "idempotencyKey": "b3e1f8c2-4d2a-4e6b-9c1a-2f3e4d5b6a7c",
          "representativeCode": "0A",
          "userDetails": {
            "userIdentifier": "001",
            "firstName": "test",
            "lastName": "test"
          },
          "applicationDetails": {
            "applicationType": "NET_NEW_MERCHANT"
          },
          "marketSegment": "INTUIT",
          "applicablePromotions": [
            "1MONTHOFF",
            "PAYDPROPLUS"
          ],
          "feeDetails": {
            "pciSecurityFee": {
              "unitPrice": {
                "amount": 895,
                "currency": "CAD"
              }
            },
            "paperStatementFee": {
              "unitPrice": {
                "amount": 795,
                "currency": "CAD"
              }
            },
            "minimumMerchantDiscountRateFee": {
              "unitPrice": {
                "amount": 699,
                "currency": "CAD"
              }
            },
            "agedCloseBatchFee": {
              "unitPrice": {
                "amount": 250,
                "currency": "CAD"
              }
            },
            "handlingFee": {
              "unitPrice": {
                "amount": 500,
                "currency": "CAD"
              }
            },
            "mastercardComplianceFee": {
              "unitPrice": {
                "amount": 8000,
                "currency": "CAD"
              }
            },
            "dialCommunicationFee": {
              "unitPrice": {
                "amount": 8,
                "currency": "CAD"
              }
            },
            "chargeBackFee": {
              "unitPrice": {
                "amount": 2501,
                "currency": "CAD"
              }
            },
            "totalAdminFee": {
              "unitPrice": {
                "amount": 200,
                "currency": "CAD"
              }
            }
          },
          "supplies": [
            {
              "supplyName": "2-PLY Sales Draft Slips (25)",
              "unitPrice": {
                "amount": 2,
                "currency": "CAD"
              },
              "quantity": 1
            },
            {
              "supplyName": "Physical Distancing Arrow Decal",
              "unitPrice": {
                "amount": 6,
                "currency": "CAD"
              },
              "quantity": 3
            }
          ],
          "productDetails": {
            "isPointOfSaleSoftware": false,
            "counterTopTerminals": [],
            "wireless": {
              "terminals": [
                {
                  "carrier": "Telus",
                  "terminalName": "Moneris Go",
                  "unitPrice": {
                    "amount": 22,
                    "currency": "CAD"
                  },
                  "quantity": 4
                }
              ],
              "feeDetails": {
                "goSoftwareFee": {
                  "quantity": 1,
                  "unitPrice": {
                    "amount": 500,
                    "currency": "CAD"
                  }
                }
              }
            },
            "monerisGoPointOfSaleRetail": {
              "feeDetails": {
                "goRetailFee": {
                  "isApproved": true,
                  "unitPrice": {
                    "amount": 1000,
                    "currency": "CAD"
                  }
                }
              }
            },
            "payDropPlus": {
              "feeDetails": {
                "subTotalFee": {
                  "unitPrice": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "taxes": [
                    {
                      "taxName": "GOODS_SERVICES_TAX",
                      "taxAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      }
                    },
                    {
                      "taxName": "PROVINCIAL_SALES_TAX",
                      "taxAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      }
                    },
                    {
                      "taxName": "HARMONIZED_SALES_TAX",
                      "taxAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      }
                    }
                  ]
                }
              }
            },
            "monerisGateway": {
              "feeDetails": {
                "mastercard3dSecureAuthenticationMerchantDiscountRateFee": {
                  "unitPrice": {
                    "amount": 1000,
                    "currency": "CAD"
                  }
                },
                "mastercard3dSecureAuthenticationTransactionFee": {
                  "unitPrice": {
                    "amount": 1100,
                    "currency": "CAD"
                  },
                  "isApproved": true
                },
                "visa3dSecureAuthenticationMerchantDiscountRateFee": {
                  "unitPrice": {
                    "amount": 1300,
                    "currency": "CAD"
                  }
                },
                "visa3dSecureAuthenticationTransactionFee": {
                  "unitPrice": {
                    "amount": 2500,
                    "currency": "CAD"
                  },
                  "isApproved": true
                }
              }
            }
          },
          "deliveryAddress": {
            "streetNumber": "64",
            "postalCode": "L1S2H6",
            "city": "Ajax",
            "province": "ON",
            "streetName": " Harwood Ave South",
            "country": "CA",
            "firstName": "KANGATHARAN",
            "lastName": "RASIAH"
          },
          "bankerInformation": {
            "bankerBranchIdentifier": "2679",
            "bankerPhoneNumber": "+19024333434"
          },
          "cardPlanDetails": {
            "selectedPlans": [
              "MASTERCARD",
              "VISA"
            ],
            "amex": {
              "isCommunicationsOptOut": true
            },
            "mastercard": {
              "transactionPlans": [
                {
                  "merchantDiscountRate": 0.111,
                  "minimumMerchantDiscountRate": 0.121,
                  "maximumMerchantDiscountRate": 0.121,
                  "transactionRate": 0.131,
                  "minimumTransactionValue": {
                    "amount": 100,
                    "currency": "CAD"
                  },
                  "maximumTransactionValue": {
                    "amount": 200,
                    "currency": "CAD"
                  }
                }
              ],
              "assessmentPlans": [
                {
                  "merchantDiscountRate": 0.21,
                  "transactionRate": 0.211,
                  "feeTypeCode": "MASTERCARD_HUMANITARIAN_ASSESSMENT",
                  "cardOriginCode": "ALL"
                },
                {
                  "merchantDiscountRate": 0.22,
                  "transactionRate": 0.221,
                  "feeTypeCode": "MASTERCARD_ASSESSMENT_FEE",
                  "cardOriginCode": "ALL"
                },
                {
                  "merchantDiscountRate": 0.23,
                  "transactionRate": 0.231,
                  "feeTypeCode": "MASTERCARD_ASSESSMENT_FEE_FOREIGN",
                  "cardOriginCode": "FRGN"
                },
                {
                  "merchantDiscountRate": 0.24,
                  "transactionRate": 0.241,
                  "feeTypeCode": "MASTERCARD_ASSESSMENT_FEE_FOREIGN",
                  "cardOriginCode": "FRGN"
                },
                {
                  "merchantDiscountRate": 0.25,
                  "transactionRate": 0.251,
                  "feeTypeCode": "MASTERCARD_ASSESSMENT_FEE_FOREIGN",
                  "cardOriginCode": "IERR"
                },
                {
                  "merchantDiscountRate": 0.26,
                  "transactionRate": 0.261,
                  "feeTypeCode": "MASTERCARD_ASSESSMENT_FEE_FOREIGN",
                  "cardOriginCode": "IERR"
                }
              ],
              "serviceFeeDetails": {
                "maintenanceFee": {
                  "feeType": "maintenance",
                  "unitPrice": {
                    "amount": 301,
                    "currency": "USD"
                  }
                }
              }
            },
            "programs": [
              "MASTERCARD_PAY_PASS"
            ],
            "visa": {},
            "discover": {},
            "unionPay": {},
            "interac": {},
            "merchantDiscountRateType": "GROSS_GROSS",
            "currency": "CAD"
          },
          "isExpeditedOrder": true,
          "orderCreatedBy": "jhundal@PERCOM",
          "isAutoAdjudicationRequired": true
        }
      },
      "CreatePartnerBankOrderPayload": {
        "value": {
          "idempotencyKey": "b3e1f8c2-4d2a-4e6b-9c1a-2f3e4d5b6a7c",
          "deliveryAddress": {
            "streetNumber": "64",
            "postalCode": "L1S2H6",
            "city": "Ajax",
            "province": "ON",
            "streetName": "Harwood Ave South",
            "country": "CA",
            "firstName": "KANGATHARAN",
            "lastName": "RASIAH"
          },
          "bankerInformation": {
            "bankerBranchIdentifier": "2679",
            "bankerPhoneNumber": "+19024333434"
          },
          "solutions": [
            {
              "solutionId": 1,
              "quantity": 1,
              "carrier": "TELUS"
            }
          ],
          "orderCreatedBy": "jhundal@PERCOM"
        }
      },
      "UpdateStandardOrderPayload": {
        "summary": "Order Payload",
        "value": {
          "representativeCode": "0A",
          "userDetails": {
            "userIdentifier": "001",
            "firstName": "test",
            "lastName": "test"
          },
          "applicationDetails": {
            "applicationType": "NET_NEW_MERCHANT"
          },
          "marketSegment": "INTUIT",
          "applicablePromotions": [
            "1MONTHOFF",
            "PAYDPROPLUS"
          ],
          "feeDetails": {
            "pciSecurityFee": {
              "unitPrice": {
                "amount": 895,
                "currency": "CAD"
              }
            },
            "paperStatementFee": {
              "unitPrice": {
                "amount": 795,
                "currency": "CAD"
              }
            },
            "minimumMerchantDiscountRateFee": {
              "unitPrice": {
                "amount": 699,
                "currency": "CAD"
              }
            },
            "agedCloseBatchFee": {
              "unitPrice": {
                "amount": 250,
                "currency": "CAD"
              }
            },
            "handlingFee": {
              "unitPrice": {
                "amount": 500,
                "currency": "CAD"
              }
            },
            "mastercardComplianceFee": {
              "unitPrice": {
                "amount": 8000,
                "currency": "CAD"
              }
            },
            "dialCommunicationFee": {
              "unitPrice": {
                "amount": 8,
                "currency": "CAD"
              }
            },
            "chargeBackFee": {
              "unitPrice": {
                "amount": 2501,
                "currency": "CAD"
              }
            },
            "totalAdminFee": {
              "unitPrice": {
                "amount": 200,
                "currency": "CAD"
              }
            }
          },
          "supplies": [
            {
              "supplyName": "2-PLY Sales Draft Slips (25)",
              "unitPrice": {
                "amount": 2,
                "currency": "CAD"
              },
              "quantity": 1
            },
            {
              "supplyName": "Physical Distancing Arrow Decal",
              "unitPrice": {
                "amount": 6,
                "currency": "CAD"
              },
              "quantity": 3
            }
          ],
          "productDetails": {
            "isPointOfSaleSoftware": false,
            "counterTopTerminals": [],
            "wireless": {
              "terminals": [
                {
                  "carrier": "Telus",
                  "terminalName": "Moneris Go",
                  "unitPrice": {
                    "amount": 22,
                    "currency": "CAD"
                  },
                  "quantity": 4
                }
              ],
              "feeDetails": {
                "goSoftwareFee": {
                  "quantity": 1,
                  "unitPrice": {
                    "amount": 500,
                    "currency": "CAD"
                  }
                }
              }
            },
            "monerisGoPointOfSaleRetail": {
              "feeDetails": {
                "goRetailFee": {
                  "isApproved": true,
                  "unitPrice": {
                    "amount": 1000,
                    "currency": "CAD"
                  }
                }
              }
            },
            "payDropPlus": {
              "feeDetails": {
                "subTotalFee": {
                  "unitPrice": {
                    "amount": 0,
                    "currency": "CAD"
                  },
                  "taxes": [
                    {
                      "taxName": "GOODS_SERVICES_TAX",
                      "taxAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      }
                    },
                    {
                      "taxName": "PROVINCIAL_SALES_TAX",
                      "taxAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      }
                    },
                    {
                      "taxName": "HARMONIZED_SALES_TAX",
                      "taxAmount": {
                        "amount": 0,
                        "currency": "CAD"
                      }
                    }
                  ]
                }
              }
            },
            "monerisGateway": {
              "feeDetails": {
                "mastercard3dSecureAuthenticationMerchantDiscountRateFee": {
                  "unitPrice": {
                    "amount": 1000,
                    "currency": "CAD"
                  }
                },
                "mastercard3dSecureAuthenticationTransactionFee": {
                  "unitPrice": {
                    "amount": 1100,
                    "currency": "CAD"
                  },
                  "isApproved": true
                },
                "visa3dSecureAuthenticationMerchantDiscountRateFee": {
                  "unitPrice": {
                    "amount": 1300,
                    "currency": "CAD"
                  }
                },
                "visa3dSecureAuthenticationTransactionFee": {
                  "unitPrice": {
                    "amount": 2500,
                    "currency": "CAD"
                  },
                  "isApproved": true
                }
              }
            }
          },
          "deliveryAddress": {
            "streetNumber": "64",
            "postalCode": "L1S2H6",
            "city": "Ajax",
            "province": "ON",
            "streetName": " Harwood Ave South",
            "country": "CA",
            "firstName": "KANGATHARAN",
            "lastName": "RASIAH"
          },
          "bankerInformation": {
            "bankerBranchIdentifier": "2679",
            "bankerPhoneNumber": "+19024333434"
          },
          "cardPlanDetails": {
            "selectedPlans": [
              "MASTERCARD",
              "VISA"
            ],
            "amex": {
              "isCommunicationsOptOut": true
            },
            "mastercard": {
              "transactionPlans": [
                {
                  "merchantDiscountRate": 0.111,
                  "minimumMerchantDiscountRate": 0.121,
                  "maximumMerchantDiscountRate": 0.121,
                  "transactionRate": 0.131,
                  "minimumTransactionValue": {
                    "amount": 100,
                    "currency": "CAD"
                  },
                  "maximumTransactionValue": {
                    "amount": 200,
                    "currency": "CAD"
                  }
                }
              ],
              "assessmentPlans": [
                {
                  "merchantDiscountRate": 0.21,
                  "transactionRate": 0.211,
                  "feeTypeCode": "MASTERCARD_HUMANITARIAN_ASSESSMENT",
                  "cardOriginCode": "ALL"
                },
                {
                  "merchantDiscountRate": 0.22,
                  "transactionRate": 0.221,
                  "feeTypeCode": "MASTERCARD_ASSESSMENT_FEE",
                  "cardOriginCode": "ALL"
                },
                {
                  "merchantDiscountRate": 0.23,
                  "transactionRate": 0.231,
                  "feeTypeCode": "MASTERCARD_ASSESSMENT_FEE_FOREIGN",
                  "cardOriginCode": "FRGN"
                },
                {
                  "merchantDiscountRate": 0.24,
                  "transactionRate": 0.241,
                  "feeTypeCode": "MASTERCARD_ASSESSMENT_FEE_FOREIGN",
                  "cardOriginCode": "FRGN"
                },
                {
                  "merchantDiscountRate": 0.25,
                  "transactionRate": 0.251,
                  "feeTypeCode": "MASTERCARD_ASSESSMENT_FEE_FOREIGN",
                  "cardOriginCode": "IERR"
                },
                {
                  "merchantDiscountRate": 0.26,
                  "transactionRate": 0.261,
                  "feeTypeCode": "MASTERCARD_ASSESSMENT_FEE_FOREIGN",
                  "cardOriginCode": "IERR"
                }
              ],
              "serviceFeeDetails": {
                "maintenanceFee": {
                  "feeType": "maintenance",
                  "unitPrice": {
                    "amount": 301,
                    "currency": "USD"
                  }
                }
              }
            },
            "programs": [
              "MASTERCARD_PAY_PASS"
            ],
            "visa": {},
            "discover": {},
            "unionPay": {},
            "interac": {},
            "merchantDiscountRateType": "GROSS_GROSS",
            "currency": "CAD"
          },
          "isExpeditedOrder": true,
          "orderCreatedBy": "jhundal@PERCOM",
          "isAutoAdjudicationRequired": true
        }
      },
      "UpdatePartnerBankOrderPayload": {
        "value": {
          "deliveryAddress": {
            "streetNumber": "64",
            "postalCode": "L1S2H6",
            "city": "Ajax",
            "province": "ON",
            "streetName": "Harwood Ave South",
            "country": "CA",
            "firstName": "KANGATHARAN",
            "lastName": "RASIAH"
          },
          "bankerInformation": {
            "bankerBranchIdentifier": "2679",
            "bankerPhoneNumber": "+19024333434"
          },
          "solutions": [
            {
              "solutionId": 1,
              "quantity": 1,
              "carrier": "TELUS"
            }
          ],
          "orderCreatedBy": "jhundal@PERCOM"
        }
      }
    }
  }
}